// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msgbean.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "msgbean.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace spplus {
namespace buff {

namespace {

const ::google::protobuf::Descriptor* UserBean_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserBean_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserRoleBean_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserRoleBean_reflection_ = NULL;
const ::google::protobuf::Descriptor* StationRuleBean_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StationRuleBean_reflection_ = NULL;
const ::google::protobuf::Descriptor* CircleQueryBean_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CircleQueryBean_reflection_ = NULL;
const ::google::protobuf::Descriptor* SignQueryBean_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SignQueryBean_reflection_ = NULL;
const ::google::protobuf::Descriptor* GswitchQueryBean_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GswitchQueryBean_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsetQueryBean_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsetQueryBean_reflection_ = NULL;
const ::google::protobuf::Descriptor* EventQueryBean_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EventQueryBean_reflection_ = NULL;
const ::google::protobuf::Descriptor* StateBean_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StateBean_reflection_ = NULL;
const ::google::protobuf::Descriptor* StationTypeBean_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StationTypeBean_reflection_ = NULL;
const ::google::protobuf::Descriptor* StationBean_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StationBean_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnitsBean_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnitsBean_reflection_ = NULL;
const ::google::protobuf::Descriptor* SavingBean_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SavingBean_reflection_ = NULL;
const ::google::protobuf::Descriptor* RuleBean_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RuleBean_reflection_ = NULL;
const ::google::protobuf::Descriptor* TicketMsionBean_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TicketMsionBean_reflection_ = NULL;
const ::google::protobuf::Descriptor* TicketBean_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TicketBean_reflection_ = NULL;
const ::google::protobuf::Descriptor* TicketActBean_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TicketActBean_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_msgbean_2eproto() {
  protobuf_AddDesc_msgbean_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "msgbean.proto");
  GOOGLE_CHECK(file != NULL);
  UserBean_descriptor_ = file->message_type(0);
  static const int UserBean_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBean, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBean, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBean, userpwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBean, userrole_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBean, rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBean, realname_),
  };
  UserBean_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserBean_descriptor_,
      UserBean::default_instance_,
      UserBean_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBean, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBean, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserBean));
  UserRoleBean_descriptor_ = file->message_type(1);
  static const int UserRoleBean_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRoleBean, userroleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRoleBean, userrolename_),
  };
  UserRoleBean_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserRoleBean_descriptor_,
      UserRoleBean::default_instance_,
      UserRoleBean_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRoleBean, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRoleBean, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserRoleBean));
  StationRuleBean_descriptor_ = file->message_type(2);
  static const int StationRuleBean_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationRuleBean, stationcim_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationRuleBean, stationname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationRuleBean, ruleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationRuleBean, rulename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationRuleBean, isuse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationRuleBean, isusename_),
  };
  StationRuleBean_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StationRuleBean_descriptor_,
      StationRuleBean::default_instance_,
      StationRuleBean_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationRuleBean, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationRuleBean, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StationRuleBean));
  CircleQueryBean_descriptor_ = file->message_type(3);
  static const int CircleQueryBean_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CircleQueryBean, unitcim_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CircleQueryBean, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CircleQueryBean, stationcim_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CircleQueryBean, stationname_),
  };
  CircleQueryBean_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CircleQueryBean_descriptor_,
      CircleQueryBean::default_instance_,
      CircleQueryBean_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CircleQueryBean, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CircleQueryBean, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CircleQueryBean));
  SignQueryBean_descriptor_ = file->message_type(4);
  static const int SignQueryBean_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignQueryBean, unitcim_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignQueryBean, unitcimname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignQueryBean, stationcim_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignQueryBean, stationname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignQueryBean, unittype_),
  };
  SignQueryBean_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SignQueryBean_descriptor_,
      SignQueryBean::default_instance_,
      SignQueryBean_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignQueryBean, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignQueryBean, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SignQueryBean));
  GswitchQueryBean_descriptor_ = file->message_type(5);
  static const int GswitchQueryBean_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GswitchQueryBean, unitcim_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GswitchQueryBean, unitcimname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GswitchQueryBean, stationcim_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GswitchQueryBean, stationname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GswitchQueryBean, unittype_),
  };
  GswitchQueryBean_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GswitchQueryBean_descriptor_,
      GswitchQueryBean::default_instance_,
      GswitchQueryBean_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GswitchQueryBean, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GswitchQueryBean, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GswitchQueryBean));
  MsetQueryBean_descriptor_ = file->message_type(6);
  static const int MsetQueryBean_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsetQueryBean, unitcim_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsetQueryBean, unitcimname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsetQueryBean, stationcim_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsetQueryBean, stationname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsetQueryBean, unittype_),
  };
  MsetQueryBean_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsetQueryBean_descriptor_,
      MsetQueryBean::default_instance_,
      MsetQueryBean_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsetQueryBean, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsetQueryBean, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsetQueryBean));
  EventQueryBean_descriptor_ = file->message_type(7);
  static const int EventQueryBean_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventQueryBean, unitcim_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventQueryBean, unitcimname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventQueryBean, stationcim_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventQueryBean, stationname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventQueryBean, unittype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventQueryBean, eventvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventQueryBean, eventtime_),
  };
  EventQueryBean_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EventQueryBean_descriptor_,
      EventQueryBean::default_instance_,
      EventQueryBean_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventQueryBean, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventQueryBean, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EventQueryBean));
  StateBean_descriptor_ = file->message_type(8);
  static const int StateBean_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateBean, cimid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateBean, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateBean, isboard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateBean, iselectric_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateBean, volcolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateBean, unittype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateBean, stationcim_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateBean, ispower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateBean, isground_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateBean, isop_),
  };
  StateBean_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StateBean_descriptor_,
      StateBean::default_instance_,
      StateBean_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateBean, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateBean, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StateBean));
  StationTypeBean_descriptor_ = file->message_type(9);
  static const int StationTypeBean_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationTypeBean, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationTypeBean, ordernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationTypeBean, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationTypeBean, stationlist_),
  };
  StationTypeBean_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StationTypeBean_descriptor_,
      StationTypeBean::default_instance_,
      StationTypeBean_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationTypeBean, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationTypeBean, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StationTypeBean));
  StationBean_descriptor_ = file->message_type(10);
  static const int StationBean_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationBean, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationBean, categoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationBean, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationBean, cimid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationBean, currentname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationBean, path_),
  };
  StationBean_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StationBean_descriptor_,
      StationBean::default_instance_,
      StationBean_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationBean, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationBean, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StationBean));
  UnitsBean_descriptor_ = file->message_type(11);
  static const int UnitsBean_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitsBean, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitsBean, stationid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitsBean, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitsBean, cimid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitsBean, volid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitsBean, unittype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitsBean, selftype_),
  };
  UnitsBean_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnitsBean_descriptor_,
      UnitsBean::default_instance_,
      UnitsBean_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitsBean, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitsBean, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnitsBean));
  SavingBean_descriptor_ = file->message_type(12);
  static const int SavingBean_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavingBean, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavingBean, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavingBean, savetime_),
  };
  SavingBean_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SavingBean_descriptor_,
      SavingBean::default_instance_,
      SavingBean_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavingBean, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavingBean, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SavingBean));
  RuleBean_descriptor_ = file->message_type(13);
  static const int RuleBean_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuleBean, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuleBean, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuleBean, alarmlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuleBean, description_),
  };
  RuleBean_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RuleBean_descriptor_,
      RuleBean::default_instance_,
      RuleBean_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuleBean, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuleBean, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RuleBean));
  TicketMsionBean_descriptor_ = file->message_type(14);
  static const int TicketMsionBean_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TicketMsionBean, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TicketMsionBean, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TicketMsionBean, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TicketMsionBean, actuserid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TicketMsionBean, actusername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TicketMsionBean, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TicketMsionBean, publishtime_),
  };
  TicketMsionBean_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TicketMsionBean_descriptor_,
      TicketMsionBean::default_instance_,
      TicketMsionBean_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TicketMsionBean, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TicketMsionBean, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TicketMsionBean));
  TicketBean_descriptor_ = file->message_type(15);
  static const int TicketBean_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TicketBean, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TicketBean, cuserid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TicketBean, cusername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TicketBean, auserid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TicketBean, ausername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TicketBean, missionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TicketBean, missionname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TicketBean, no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TicketBean, actiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TicketBean, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TicketBean, actionperson_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TicketBean, protectperson_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TicketBean, chargeperson_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TicketBean, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TicketBean, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TicketBean, publishtime_),
  };
  TicketBean_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TicketBean_descriptor_,
      TicketBean::default_instance_,
      TicketBean_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TicketBean, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TicketBean, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TicketBean));
  TicketActBean_descriptor_ = file->message_type(16);
  static const int TicketActBean_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TicketActBean, ticketid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TicketActBean, ordernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TicketActBean, systemcontent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TicketActBean, content_),
  };
  TicketActBean_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TicketActBean_descriptor_,
      TicketActBean::default_instance_,
      TicketActBean_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TicketActBean, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TicketActBean, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TicketActBean));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_msgbean_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserBean_descriptor_, &UserBean::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserRoleBean_descriptor_, &UserRoleBean::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StationRuleBean_descriptor_, &StationRuleBean::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CircleQueryBean_descriptor_, &CircleQueryBean::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SignQueryBean_descriptor_, &SignQueryBean::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GswitchQueryBean_descriptor_, &GswitchQueryBean::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsetQueryBean_descriptor_, &MsetQueryBean::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EventQueryBean_descriptor_, &EventQueryBean::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StateBean_descriptor_, &StateBean::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StationTypeBean_descriptor_, &StationTypeBean::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StationBean_descriptor_, &StationBean::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnitsBean_descriptor_, &UnitsBean::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SavingBean_descriptor_, &SavingBean::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RuleBean_descriptor_, &RuleBean::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TicketMsionBean_descriptor_, &TicketMsionBean::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TicketBean_descriptor_, &TicketBean::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TicketActBean_descriptor_, &TicketActBean::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_msgbean_2eproto() {
  delete UserBean::default_instance_;
  delete UserBean_reflection_;
  delete UserRoleBean::default_instance_;
  delete UserRoleBean_reflection_;
  delete StationRuleBean::default_instance_;
  delete StationRuleBean_reflection_;
  delete CircleQueryBean::default_instance_;
  delete CircleQueryBean_reflection_;
  delete SignQueryBean::default_instance_;
  delete SignQueryBean_reflection_;
  delete GswitchQueryBean::default_instance_;
  delete GswitchQueryBean_reflection_;
  delete MsetQueryBean::default_instance_;
  delete MsetQueryBean_reflection_;
  delete EventQueryBean::default_instance_;
  delete EventQueryBean_reflection_;
  delete StateBean::default_instance_;
  delete StateBean_reflection_;
  delete StationTypeBean::default_instance_;
  delete StationTypeBean_reflection_;
  delete StationBean::default_instance_;
  delete StationBean_reflection_;
  delete UnitsBean::default_instance_;
  delete UnitsBean_reflection_;
  delete SavingBean::default_instance_;
  delete SavingBean_reflection_;
  delete RuleBean::default_instance_;
  delete RuleBean_reflection_;
  delete TicketMsionBean::default_instance_;
  delete TicketMsionBean_reflection_;
  delete TicketBean::default_instance_;
  delete TicketBean_reflection_;
  delete TicketActBean::default_instance_;
  delete TicketActBean_reflection_;
}

void protobuf_AddDesc_msgbean_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rmsgbean.proto\022\017com.spplus.buff\"s\n\010User"
    "Bean\022\016\n\006userid\030\001 \001(\014\022\020\n\010username\030\002 \001(\014\022\017"
    "\n\007userpwd\030\003 \001(\014\022\020\n\010userrole\030\004 \001(\014\022\020\n\010rol"
    "ename\030\005 \001(\014\022\020\n\010realname\030\006 \001(\014\"8\n\014UserRol"
    "eBean\022\022\n\nuserroleid\030\001 \001(\014\022\024\n\014userrolenam"
    "e\030\002 \001(\014\"~\n\017StationRuleBean\022\022\n\nstationCim"
    "\030\001 \001(\014\022\023\n\013stationName\030\002 \001(\014\022\016\n\006ruleId\030\003 "
    "\001(\r\022\020\n\010ruleName\030\004 \001(\014\022\r\n\005isUse\030\005 \001(\014\022\021\n\t"
    "isUseName\030\006 \001(\014\"Y\n\017CircleQueryBean\022\017\n\007un"
    "itCim\030\001 \001(\014\022\014\n\004Name\030\002 \001(\014\022\022\n\nstationCim\030"
    "\003 \001(\014\022\023\n\013stationName\030\004 \001(\014\"p\n\rSignQueryB"
    "ean\022\017\n\007unitCim\030\001 \001(\014\022\023\n\013unitCimName\030\002 \001("
    "\014\022\022\n\nstationCim\030\003 \001(\014\022\023\n\013stationName\030\004 \001"
    "(\014\022\020\n\010unitType\030\005 \001(\014\"s\n\020GswitchQueryBean"
    "\022\017\n\007unitCim\030\001 \001(\014\022\023\n\013unitCimName\030\002 \001(\014\022\022"
    "\n\nstationCim\030\003 \001(\014\022\023\n\013stationName\030\004 \001(\014\022"
    "\020\n\010unitType\030\005 \001(\014\"p\n\rMsetQueryBean\022\017\n\007un"
    "itCim\030\001 \001(\014\022\023\n\013unitCimName\030\002 \001(\014\022\022\n\nstat"
    "ionCim\030\003 \001(\014\022\023\n\013stationName\030\004 \001(\014\022\020\n\010uni"
    "tType\030\005 \001(\014\"\230\001\n\016EventQueryBean\022\017\n\007unitCi"
    "m\030\001 \001(\014\022\023\n\013unitCimName\030\002 \001(\014\022\022\n\nstationC"
    "im\030\003 \001(\014\022\023\n\013stationName\030\004 \001(\014\022\020\n\010unitTyp"
    "e\030\005 \001(\014\022\022\n\neventvalue\030\006 \001(\014\022\021\n\teventtime"
    "\030\007 \001(\014\"\267\001\n\tStateBean\022\r\n\005cimId\030\001 \001(\014\022\r\n\005s"
    "tate\030\002 \001(\r\022\017\n\007isBoard\030\003 \001(\r\022\022\n\nisElectri"
    "c\030\004 \001(\r\022\020\n\010volColor\030\005 \001(\014\022\020\n\010unitType\030\006 "
    "\001(\r\022\022\n\nstationCim\030\007 \001(\014\022\017\n\007isPower\030\010 \001(\r"
    "\022\020\n\010isGround\030\t \001(\r\022\014\n\004isOp\030\n \001(\r\"p\n\017Stat"
    "ionTypeBean\022\n\n\002Id\030\001 \001(\r\022\020\n\010ordernum\030\002 \001("
    "\r\022\014\n\004Name\030\003 \001(\014\0221\n\013StationList\030\004 \003(\0132\034.c"
    "om.spplus.buff.StationBean\"m\n\013StationBea"
    "n\022\n\n\002Id\030\001 \001(\r\022\022\n\nCategoryId\030\002 \001(\r\022\014\n\004Nam"
    "e\030\003 \001(\014\022\r\n\005CimId\030\004 \001(\014\022\023\n\013CurrentName\030\005 "
    "\001(\014\022\014\n\004Path\030\006 \001(\014\"z\n\tUnitsBean\022\n\n\002Id\030\001 \001"
    "(\r\022\021\n\tStationId\030\002 \001(\r\022\014\n\004Name\030\003 \001(\014\022\r\n\005C"
    "imId\030\004 \001(\014\022\r\n\005VolId\030\005 \001(\014\022\020\n\010UnitType\030\006 "
    "\001(\014\022\020\n\010SelfType\030\007 \001(\014\"8\n\nSavingBean\022\n\n\002I"
    "d\030\001 \001(\r\022\014\n\004Name\030\002 \001(\014\022\020\n\010SaveTime\030\003 \001(\014\""
    "M\n\010RuleBean\022\n\n\002Id\030\001 \001(\r\022\014\n\004Name\030\002 \001(\014\022\022\n"
    "\nAlarmLevel\030\003 \001(\014\022\023\n\013Description\030\004 \001(\014\"\212"
    "\001\n\017TicketMsionBean\022\n\n\002Id\030\001 \001(\r\022\016\n\006UserId"
    "\030\002 \001(\r\022\020\n\010UserName\030\003 \001(\014\022\021\n\tActUserId\030\004 "
    "\001(\r\022\023\n\013ActUserName\030\005 \001(\014\022\014\n\004Name\030\006 \001(\014\022\023"
    "\n\013PublishTime\030\007 \001(\014\"\262\002\n\nTicketBean\022\n\n\002Id"
    "\030\001 \001(\r\022\017\n\007CuserId\030\002 \001(\r\022\021\n\tCuserName\030\003 \001"
    "(\014\022\017\n\007AuserId\030\004 \001(\r\022\021\n\tAuserName\030\005 \001(\014\022\021"
    "\n\tMissionId\030\006 \001(\r\022\023\n\013MissionName\030\007 \001(\014\022\n"
    "\n\002No\030\010 \001(\014\022\022\n\nActionType\030\t \001(\014\022\014\n\004info\030\n"
    " \001(\014\022\024\n\014ActionPerson\030\013 \001(\014\022\025\n\rProtectPer"
    "son\030\014 \001(\014\022\024\n\014ChargePerson\030\r \001(\014\022\021\n\tStart"
    "Time\030\016 \001(\014\022\017\n\007EndTime\030\017 \001(\014\022\023\n\013PublishTi"
    "me\030\020 \001(\014\"[\n\rTicketActBean\022\020\n\010Ticketid\030\001 "
    "\001(\r\022\020\n\010OrderNum\030\002 \001(\r\022\025\n\rSystemContent\030\003"
    " \001(\014\022\017\n\007Content\030\004 \001(\014", 2141);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "msgbean.proto", &protobuf_RegisterTypes);
  UserBean::default_instance_ = new UserBean();
  UserRoleBean::default_instance_ = new UserRoleBean();
  StationRuleBean::default_instance_ = new StationRuleBean();
  CircleQueryBean::default_instance_ = new CircleQueryBean();
  SignQueryBean::default_instance_ = new SignQueryBean();
  GswitchQueryBean::default_instance_ = new GswitchQueryBean();
  MsetQueryBean::default_instance_ = new MsetQueryBean();
  EventQueryBean::default_instance_ = new EventQueryBean();
  StateBean::default_instance_ = new StateBean();
  StationTypeBean::default_instance_ = new StationTypeBean();
  StationBean::default_instance_ = new StationBean();
  UnitsBean::default_instance_ = new UnitsBean();
  SavingBean::default_instance_ = new SavingBean();
  RuleBean::default_instance_ = new RuleBean();
  TicketMsionBean::default_instance_ = new TicketMsionBean();
  TicketBean::default_instance_ = new TicketBean();
  TicketActBean::default_instance_ = new TicketActBean();
  UserBean::default_instance_->InitAsDefaultInstance();
  UserRoleBean::default_instance_->InitAsDefaultInstance();
  StationRuleBean::default_instance_->InitAsDefaultInstance();
  CircleQueryBean::default_instance_->InitAsDefaultInstance();
  SignQueryBean::default_instance_->InitAsDefaultInstance();
  GswitchQueryBean::default_instance_->InitAsDefaultInstance();
  MsetQueryBean::default_instance_->InitAsDefaultInstance();
  EventQueryBean::default_instance_->InitAsDefaultInstance();
  StateBean::default_instance_->InitAsDefaultInstance();
  StationTypeBean::default_instance_->InitAsDefaultInstance();
  StationBean::default_instance_->InitAsDefaultInstance();
  UnitsBean::default_instance_->InitAsDefaultInstance();
  SavingBean::default_instance_->InitAsDefaultInstance();
  RuleBean::default_instance_->InitAsDefaultInstance();
  TicketMsionBean::default_instance_->InitAsDefaultInstance();
  TicketBean::default_instance_->InitAsDefaultInstance();
  TicketActBean::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_msgbean_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_msgbean_2eproto {
  StaticDescriptorInitializer_msgbean_2eproto() {
    protobuf_AddDesc_msgbean_2eproto();
  }
} static_descriptor_initializer_msgbean_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int UserBean::kUseridFieldNumber;
const int UserBean::kUsernameFieldNumber;
const int UserBean::kUserpwdFieldNumber;
const int UserBean::kUserroleFieldNumber;
const int UserBean::kRolenameFieldNumber;
const int UserBean::kRealnameFieldNumber;
#endif  // !_MSC_VER

UserBean::UserBean()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserBean::InitAsDefaultInstance() {
}

UserBean::UserBean(const UserBean& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserBean::SharedCtor() {
  _cached_size_ = 0;
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userpwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userrole_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  realname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserBean::~UserBean() {
  SharedDtor();
}

void UserBean::SharedDtor() {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (userpwd_ != &::google::protobuf::internal::kEmptyString) {
    delete userpwd_;
  }
  if (userrole_ != &::google::protobuf::internal::kEmptyString) {
    delete userrole_;
  }
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (realname_ != &::google::protobuf::internal::kEmptyString) {
    delete realname_;
  }
  if (this != default_instance_) {
  }
}

void UserBean::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserBean::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserBean_descriptor_;
}

const UserBean& UserBean::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbean_2eproto();
  return *default_instance_;
}

UserBean* UserBean::default_instance_ = NULL;

UserBean* UserBean::New() const {
  return new UserBean;
}

void UserBean::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    if (has_userpwd()) {
      if (userpwd_ != &::google::protobuf::internal::kEmptyString) {
        userpwd_->clear();
      }
    }
    if (has_userrole()) {
      if (userrole_ != &::google::protobuf::internal::kEmptyString) {
        userrole_->clear();
      }
    }
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
    if (has_realname()) {
      if (realname_ != &::google::protobuf::internal::kEmptyString) {
        realname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserBean::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_userid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_username;
        break;
      }

      // optional bytes username = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_username()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_userpwd;
        break;
      }

      // optional bytes userpwd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userpwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_userpwd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_userrole;
        break;
      }

      // optional bytes userrole = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userrole:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_userrole()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_rolename;
        break;
      }

      // optional bytes rolename = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rolename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_rolename()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_realname;
        break;
      }

      // optional bytes realname = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_realname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_realname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserBean::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->userid(), output);
  }

  // optional bytes username = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->username(), output);
  }

  // optional bytes userpwd = 3;
  if (has_userpwd()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->userpwd(), output);
  }

  // optional bytes userrole = 4;
  if (has_userrole()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->userrole(), output);
  }

  // optional bytes rolename = 5;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->rolename(), output);
  }

  // optional bytes realname = 6;
  if (has_realname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->realname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserBean::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes userid = 1;
  if (has_userid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->userid(), target);
  }

  // optional bytes username = 2;
  if (has_username()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->username(), target);
  }

  // optional bytes userpwd = 3;
  if (has_userpwd()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->userpwd(), target);
  }

  // optional bytes userrole = 4;
  if (has_userrole()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->userrole(), target);
  }

  // optional bytes rolename = 5;
  if (has_rolename()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->rolename(), target);
  }

  // optional bytes realname = 6;
  if (has_realname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->realname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserBean::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->userid());
    }

    // optional bytes username = 2;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->username());
    }

    // optional bytes userpwd = 3;
    if (has_userpwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->userpwd());
    }

    // optional bytes userrole = 4;
    if (has_userrole()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->userrole());
    }

    // optional bytes rolename = 5;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->rolename());
    }

    // optional bytes realname = 6;
    if (has_realname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->realname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserBean::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserBean* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserBean*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserBean::MergeFrom(const UserBean& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_userpwd()) {
      set_userpwd(from.userpwd());
    }
    if (from.has_userrole()) {
      set_userrole(from.userrole());
    }
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
    if (from.has_realname()) {
      set_realname(from.realname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserBean::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserBean::CopyFrom(const UserBean& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserBean::IsInitialized() const {

  return true;
}

void UserBean::Swap(UserBean* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(username_, other->username_);
    std::swap(userpwd_, other->userpwd_);
    std::swap(userrole_, other->userrole_);
    std::swap(rolename_, other->rolename_);
    std::swap(realname_, other->realname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserBean::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserBean_descriptor_;
  metadata.reflection = UserBean_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserRoleBean::kUserroleidFieldNumber;
const int UserRoleBean::kUserrolenameFieldNumber;
#endif  // !_MSC_VER

UserRoleBean::UserRoleBean()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserRoleBean::InitAsDefaultInstance() {
}

UserRoleBean::UserRoleBean(const UserRoleBean& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserRoleBean::SharedCtor() {
  _cached_size_ = 0;
  userroleid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userrolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserRoleBean::~UserRoleBean() {
  SharedDtor();
}

void UserRoleBean::SharedDtor() {
  if (userroleid_ != &::google::protobuf::internal::kEmptyString) {
    delete userroleid_;
  }
  if (userrolename_ != &::google::protobuf::internal::kEmptyString) {
    delete userrolename_;
  }
  if (this != default_instance_) {
  }
}

void UserRoleBean::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserRoleBean::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserRoleBean_descriptor_;
}

const UserRoleBean& UserRoleBean::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbean_2eproto();
  return *default_instance_;
}

UserRoleBean* UserRoleBean::default_instance_ = NULL;

UserRoleBean* UserRoleBean::New() const {
  return new UserRoleBean;
}

void UserRoleBean::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_userroleid()) {
      if (userroleid_ != &::google::protobuf::internal::kEmptyString) {
        userroleid_->clear();
      }
    }
    if (has_userrolename()) {
      if (userrolename_ != &::google::protobuf::internal::kEmptyString) {
        userrolename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserRoleBean::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes userroleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_userroleid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_userrolename;
        break;
      }

      // optional bytes userrolename = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userrolename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_userrolename()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserRoleBean::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes userroleid = 1;
  if (has_userroleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->userroleid(), output);
  }

  // optional bytes userrolename = 2;
  if (has_userrolename()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->userrolename(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserRoleBean::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes userroleid = 1;
  if (has_userroleid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->userroleid(), target);
  }

  // optional bytes userrolename = 2;
  if (has_userrolename()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->userrolename(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserRoleBean::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes userroleid = 1;
    if (has_userroleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->userroleid());
    }

    // optional bytes userrolename = 2;
    if (has_userrolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->userrolename());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserRoleBean::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserRoleBean* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserRoleBean*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserRoleBean::MergeFrom(const UserRoleBean& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userroleid()) {
      set_userroleid(from.userroleid());
    }
    if (from.has_userrolename()) {
      set_userrolename(from.userrolename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserRoleBean::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserRoleBean::CopyFrom(const UserRoleBean& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserRoleBean::IsInitialized() const {

  return true;
}

void UserRoleBean::Swap(UserRoleBean* other) {
  if (other != this) {
    std::swap(userroleid_, other->userroleid_);
    std::swap(userrolename_, other->userrolename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserRoleBean::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserRoleBean_descriptor_;
  metadata.reflection = UserRoleBean_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StationRuleBean::kStationCimFieldNumber;
const int StationRuleBean::kStationNameFieldNumber;
const int StationRuleBean::kRuleIdFieldNumber;
const int StationRuleBean::kRuleNameFieldNumber;
const int StationRuleBean::kIsUseFieldNumber;
const int StationRuleBean::kIsUseNameFieldNumber;
#endif  // !_MSC_VER

StationRuleBean::StationRuleBean()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StationRuleBean::InitAsDefaultInstance() {
}

StationRuleBean::StationRuleBean(const StationRuleBean& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StationRuleBean::SharedCtor() {
  _cached_size_ = 0;
  stationcim_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  stationname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ruleid_ = 0u;
  rulename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isuse_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isusename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StationRuleBean::~StationRuleBean() {
  SharedDtor();
}

void StationRuleBean::SharedDtor() {
  if (stationcim_ != &::google::protobuf::internal::kEmptyString) {
    delete stationcim_;
  }
  if (stationname_ != &::google::protobuf::internal::kEmptyString) {
    delete stationname_;
  }
  if (rulename_ != &::google::protobuf::internal::kEmptyString) {
    delete rulename_;
  }
  if (isuse_ != &::google::protobuf::internal::kEmptyString) {
    delete isuse_;
  }
  if (isusename_ != &::google::protobuf::internal::kEmptyString) {
    delete isusename_;
  }
  if (this != default_instance_) {
  }
}

void StationRuleBean::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StationRuleBean::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StationRuleBean_descriptor_;
}

const StationRuleBean& StationRuleBean::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbean_2eproto();
  return *default_instance_;
}

StationRuleBean* StationRuleBean::default_instance_ = NULL;

StationRuleBean* StationRuleBean::New() const {
  return new StationRuleBean;
}

void StationRuleBean::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_stationcim()) {
      if (stationcim_ != &::google::protobuf::internal::kEmptyString) {
        stationcim_->clear();
      }
    }
    if (has_stationname()) {
      if (stationname_ != &::google::protobuf::internal::kEmptyString) {
        stationname_->clear();
      }
    }
    ruleid_ = 0u;
    if (has_rulename()) {
      if (rulename_ != &::google::protobuf::internal::kEmptyString) {
        rulename_->clear();
      }
    }
    if (has_isuse()) {
      if (isuse_ != &::google::protobuf::internal::kEmptyString) {
        isuse_->clear();
      }
    }
    if (has_isusename()) {
      if (isusename_ != &::google::protobuf::internal::kEmptyString) {
        isusename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StationRuleBean::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes stationCim = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_stationcim()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stationName;
        break;
      }

      // optional bytes stationName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stationName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_stationname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ruleId;
        break;
      }

      // optional uint32 ruleId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ruleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ruleid_)));
          set_has_ruleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ruleName;
        break;
      }

      // optional bytes ruleName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ruleName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_rulename()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_isUse;
        break;
      }

      // optional bytes isUse = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_isUse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_isuse()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_isUseName;
        break;
      }

      // optional bytes isUseName = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_isUseName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_isusename()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StationRuleBean::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes stationCim = 1;
  if (has_stationcim()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->stationcim(), output);
  }

  // optional bytes stationName = 2;
  if (has_stationname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->stationname(), output);
  }

  // optional uint32 ruleId = 3;
  if (has_ruleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ruleid(), output);
  }

  // optional bytes ruleName = 4;
  if (has_rulename()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->rulename(), output);
  }

  // optional bytes isUse = 5;
  if (has_isuse()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->isuse(), output);
  }

  // optional bytes isUseName = 6;
  if (has_isusename()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->isusename(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StationRuleBean::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes stationCim = 1;
  if (has_stationcim()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->stationcim(), target);
  }

  // optional bytes stationName = 2;
  if (has_stationname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->stationname(), target);
  }

  // optional uint32 ruleId = 3;
  if (has_ruleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ruleid(), target);
  }

  // optional bytes ruleName = 4;
  if (has_rulename()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->rulename(), target);
  }

  // optional bytes isUse = 5;
  if (has_isuse()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->isuse(), target);
  }

  // optional bytes isUseName = 6;
  if (has_isusename()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->isusename(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StationRuleBean::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes stationCim = 1;
    if (has_stationcim()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->stationcim());
    }

    // optional bytes stationName = 2;
    if (has_stationname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->stationname());
    }

    // optional uint32 ruleId = 3;
    if (has_ruleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ruleid());
    }

    // optional bytes ruleName = 4;
    if (has_rulename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->rulename());
    }

    // optional bytes isUse = 5;
    if (has_isuse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->isuse());
    }

    // optional bytes isUseName = 6;
    if (has_isusename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->isusename());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StationRuleBean::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StationRuleBean* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StationRuleBean*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StationRuleBean::MergeFrom(const StationRuleBean& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stationcim()) {
      set_stationcim(from.stationcim());
    }
    if (from.has_stationname()) {
      set_stationname(from.stationname());
    }
    if (from.has_ruleid()) {
      set_ruleid(from.ruleid());
    }
    if (from.has_rulename()) {
      set_rulename(from.rulename());
    }
    if (from.has_isuse()) {
      set_isuse(from.isuse());
    }
    if (from.has_isusename()) {
      set_isusename(from.isusename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StationRuleBean::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StationRuleBean::CopyFrom(const StationRuleBean& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StationRuleBean::IsInitialized() const {

  return true;
}

void StationRuleBean::Swap(StationRuleBean* other) {
  if (other != this) {
    std::swap(stationcim_, other->stationcim_);
    std::swap(stationname_, other->stationname_);
    std::swap(ruleid_, other->ruleid_);
    std::swap(rulename_, other->rulename_);
    std::swap(isuse_, other->isuse_);
    std::swap(isusename_, other->isusename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StationRuleBean::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StationRuleBean_descriptor_;
  metadata.reflection = StationRuleBean_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CircleQueryBean::kUnitCimFieldNumber;
const int CircleQueryBean::kNameFieldNumber;
const int CircleQueryBean::kStationCimFieldNumber;
const int CircleQueryBean::kStationNameFieldNumber;
#endif  // !_MSC_VER

CircleQueryBean::CircleQueryBean()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CircleQueryBean::InitAsDefaultInstance() {
}

CircleQueryBean::CircleQueryBean(const CircleQueryBean& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CircleQueryBean::SharedCtor() {
  _cached_size_ = 0;
  unitcim_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  stationcim_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  stationname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CircleQueryBean::~CircleQueryBean() {
  SharedDtor();
}

void CircleQueryBean::SharedDtor() {
  if (unitcim_ != &::google::protobuf::internal::kEmptyString) {
    delete unitcim_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (stationcim_ != &::google::protobuf::internal::kEmptyString) {
    delete stationcim_;
  }
  if (stationname_ != &::google::protobuf::internal::kEmptyString) {
    delete stationname_;
  }
  if (this != default_instance_) {
  }
}

void CircleQueryBean::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CircleQueryBean::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CircleQueryBean_descriptor_;
}

const CircleQueryBean& CircleQueryBean::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbean_2eproto();
  return *default_instance_;
}

CircleQueryBean* CircleQueryBean::default_instance_ = NULL;

CircleQueryBean* CircleQueryBean::New() const {
  return new CircleQueryBean;
}

void CircleQueryBean::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_unitcim()) {
      if (unitcim_ != &::google::protobuf::internal::kEmptyString) {
        unitcim_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_stationcim()) {
      if (stationcim_ != &::google::protobuf::internal::kEmptyString) {
        stationcim_->clear();
      }
    }
    if (has_stationname()) {
      if (stationname_ != &::google::protobuf::internal::kEmptyString) {
        stationname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CircleQueryBean::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes unitCim = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_unitcim()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Name;
        break;
      }

      // optional bytes Name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stationCim;
        break;
      }

      // optional bytes stationCim = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stationCim:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_stationcim()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_stationName;
        break;
      }

      // optional bytes stationName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stationName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_stationname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CircleQueryBean::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes unitCim = 1;
  if (has_unitcim()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->unitcim(), output);
  }

  // optional bytes Name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // optional bytes stationCim = 3;
  if (has_stationcim()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->stationcim(), output);
  }

  // optional bytes stationName = 4;
  if (has_stationname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->stationname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CircleQueryBean::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes unitCim = 1;
  if (has_unitcim()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->unitcim(), target);
  }

  // optional bytes Name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // optional bytes stationCim = 3;
  if (has_stationcim()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->stationcim(), target);
  }

  // optional bytes stationName = 4;
  if (has_stationname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->stationname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CircleQueryBean::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes unitCim = 1;
    if (has_unitcim()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->unitcim());
    }

    // optional bytes Name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional bytes stationCim = 3;
    if (has_stationcim()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->stationcim());
    }

    // optional bytes stationName = 4;
    if (has_stationname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->stationname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CircleQueryBean::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CircleQueryBean* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CircleQueryBean*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CircleQueryBean::MergeFrom(const CircleQueryBean& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unitcim()) {
      set_unitcim(from.unitcim());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_stationcim()) {
      set_stationcim(from.stationcim());
    }
    if (from.has_stationname()) {
      set_stationname(from.stationname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CircleQueryBean::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CircleQueryBean::CopyFrom(const CircleQueryBean& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CircleQueryBean::IsInitialized() const {

  return true;
}

void CircleQueryBean::Swap(CircleQueryBean* other) {
  if (other != this) {
    std::swap(unitcim_, other->unitcim_);
    std::swap(name_, other->name_);
    std::swap(stationcim_, other->stationcim_);
    std::swap(stationname_, other->stationname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CircleQueryBean::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CircleQueryBean_descriptor_;
  metadata.reflection = CircleQueryBean_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SignQueryBean::kUnitCimFieldNumber;
const int SignQueryBean::kUnitCimNameFieldNumber;
const int SignQueryBean::kStationCimFieldNumber;
const int SignQueryBean::kStationNameFieldNumber;
const int SignQueryBean::kUnitTypeFieldNumber;
#endif  // !_MSC_VER

SignQueryBean::SignQueryBean()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SignQueryBean::InitAsDefaultInstance() {
}

SignQueryBean::SignQueryBean(const SignQueryBean& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SignQueryBean::SharedCtor() {
  _cached_size_ = 0;
  unitcim_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  unitcimname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  stationcim_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  stationname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  unittype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SignQueryBean::~SignQueryBean() {
  SharedDtor();
}

void SignQueryBean::SharedDtor() {
  if (unitcim_ != &::google::protobuf::internal::kEmptyString) {
    delete unitcim_;
  }
  if (unitcimname_ != &::google::protobuf::internal::kEmptyString) {
    delete unitcimname_;
  }
  if (stationcim_ != &::google::protobuf::internal::kEmptyString) {
    delete stationcim_;
  }
  if (stationname_ != &::google::protobuf::internal::kEmptyString) {
    delete stationname_;
  }
  if (unittype_ != &::google::protobuf::internal::kEmptyString) {
    delete unittype_;
  }
  if (this != default_instance_) {
  }
}

void SignQueryBean::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignQueryBean::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignQueryBean_descriptor_;
}

const SignQueryBean& SignQueryBean::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbean_2eproto();
  return *default_instance_;
}

SignQueryBean* SignQueryBean::default_instance_ = NULL;

SignQueryBean* SignQueryBean::New() const {
  return new SignQueryBean;
}

void SignQueryBean::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_unitcim()) {
      if (unitcim_ != &::google::protobuf::internal::kEmptyString) {
        unitcim_->clear();
      }
    }
    if (has_unitcimname()) {
      if (unitcimname_ != &::google::protobuf::internal::kEmptyString) {
        unitcimname_->clear();
      }
    }
    if (has_stationcim()) {
      if (stationcim_ != &::google::protobuf::internal::kEmptyString) {
        stationcim_->clear();
      }
    }
    if (has_stationname()) {
      if (stationname_ != &::google::protobuf::internal::kEmptyString) {
        stationname_->clear();
      }
    }
    if (has_unittype()) {
      if (unittype_ != &::google::protobuf::internal::kEmptyString) {
        unittype_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SignQueryBean::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes unitCim = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_unitcim()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_unitCimName;
        break;
      }

      // optional bytes unitCimName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unitCimName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_unitcimname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stationCim;
        break;
      }

      // optional bytes stationCim = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stationCim:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_stationcim()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_stationName;
        break;
      }

      // optional bytes stationName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stationName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_stationname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_unitType;
        break;
      }

      // optional bytes unitType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unitType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_unittype()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SignQueryBean::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes unitCim = 1;
  if (has_unitcim()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->unitcim(), output);
  }

  // optional bytes unitCimName = 2;
  if (has_unitcimname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->unitcimname(), output);
  }

  // optional bytes stationCim = 3;
  if (has_stationcim()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->stationcim(), output);
  }

  // optional bytes stationName = 4;
  if (has_stationname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->stationname(), output);
  }

  // optional bytes unitType = 5;
  if (has_unittype()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->unittype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SignQueryBean::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes unitCim = 1;
  if (has_unitcim()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->unitcim(), target);
  }

  // optional bytes unitCimName = 2;
  if (has_unitcimname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->unitcimname(), target);
  }

  // optional bytes stationCim = 3;
  if (has_stationcim()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->stationcim(), target);
  }

  // optional bytes stationName = 4;
  if (has_stationname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->stationname(), target);
  }

  // optional bytes unitType = 5;
  if (has_unittype()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->unittype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SignQueryBean::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes unitCim = 1;
    if (has_unitcim()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->unitcim());
    }

    // optional bytes unitCimName = 2;
    if (has_unitcimname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->unitcimname());
    }

    // optional bytes stationCim = 3;
    if (has_stationcim()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->stationcim());
    }

    // optional bytes stationName = 4;
    if (has_stationname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->stationname());
    }

    // optional bytes unitType = 5;
    if (has_unittype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->unittype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignQueryBean::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SignQueryBean* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SignQueryBean*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SignQueryBean::MergeFrom(const SignQueryBean& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unitcim()) {
      set_unitcim(from.unitcim());
    }
    if (from.has_unitcimname()) {
      set_unitcimname(from.unitcimname());
    }
    if (from.has_stationcim()) {
      set_stationcim(from.stationcim());
    }
    if (from.has_stationname()) {
      set_stationname(from.stationname());
    }
    if (from.has_unittype()) {
      set_unittype(from.unittype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SignQueryBean::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignQueryBean::CopyFrom(const SignQueryBean& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignQueryBean::IsInitialized() const {

  return true;
}

void SignQueryBean::Swap(SignQueryBean* other) {
  if (other != this) {
    std::swap(unitcim_, other->unitcim_);
    std::swap(unitcimname_, other->unitcimname_);
    std::swap(stationcim_, other->stationcim_);
    std::swap(stationname_, other->stationname_);
    std::swap(unittype_, other->unittype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SignQueryBean::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SignQueryBean_descriptor_;
  metadata.reflection = SignQueryBean_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GswitchQueryBean::kUnitCimFieldNumber;
const int GswitchQueryBean::kUnitCimNameFieldNumber;
const int GswitchQueryBean::kStationCimFieldNumber;
const int GswitchQueryBean::kStationNameFieldNumber;
const int GswitchQueryBean::kUnitTypeFieldNumber;
#endif  // !_MSC_VER

GswitchQueryBean::GswitchQueryBean()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GswitchQueryBean::InitAsDefaultInstance() {
}

GswitchQueryBean::GswitchQueryBean(const GswitchQueryBean& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GswitchQueryBean::SharedCtor() {
  _cached_size_ = 0;
  unitcim_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  unitcimname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  stationcim_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  stationname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  unittype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GswitchQueryBean::~GswitchQueryBean() {
  SharedDtor();
}

void GswitchQueryBean::SharedDtor() {
  if (unitcim_ != &::google::protobuf::internal::kEmptyString) {
    delete unitcim_;
  }
  if (unitcimname_ != &::google::protobuf::internal::kEmptyString) {
    delete unitcimname_;
  }
  if (stationcim_ != &::google::protobuf::internal::kEmptyString) {
    delete stationcim_;
  }
  if (stationname_ != &::google::protobuf::internal::kEmptyString) {
    delete stationname_;
  }
  if (unittype_ != &::google::protobuf::internal::kEmptyString) {
    delete unittype_;
  }
  if (this != default_instance_) {
  }
}

void GswitchQueryBean::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GswitchQueryBean::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GswitchQueryBean_descriptor_;
}

const GswitchQueryBean& GswitchQueryBean::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbean_2eproto();
  return *default_instance_;
}

GswitchQueryBean* GswitchQueryBean::default_instance_ = NULL;

GswitchQueryBean* GswitchQueryBean::New() const {
  return new GswitchQueryBean;
}

void GswitchQueryBean::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_unitcim()) {
      if (unitcim_ != &::google::protobuf::internal::kEmptyString) {
        unitcim_->clear();
      }
    }
    if (has_unitcimname()) {
      if (unitcimname_ != &::google::protobuf::internal::kEmptyString) {
        unitcimname_->clear();
      }
    }
    if (has_stationcim()) {
      if (stationcim_ != &::google::protobuf::internal::kEmptyString) {
        stationcim_->clear();
      }
    }
    if (has_stationname()) {
      if (stationname_ != &::google::protobuf::internal::kEmptyString) {
        stationname_->clear();
      }
    }
    if (has_unittype()) {
      if (unittype_ != &::google::protobuf::internal::kEmptyString) {
        unittype_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GswitchQueryBean::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes unitCim = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_unitcim()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_unitCimName;
        break;
      }

      // optional bytes unitCimName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unitCimName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_unitcimname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stationCim;
        break;
      }

      // optional bytes stationCim = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stationCim:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_stationcim()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_stationName;
        break;
      }

      // optional bytes stationName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stationName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_stationname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_unitType;
        break;
      }

      // optional bytes unitType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unitType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_unittype()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GswitchQueryBean::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes unitCim = 1;
  if (has_unitcim()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->unitcim(), output);
  }

  // optional bytes unitCimName = 2;
  if (has_unitcimname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->unitcimname(), output);
  }

  // optional bytes stationCim = 3;
  if (has_stationcim()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->stationcim(), output);
  }

  // optional bytes stationName = 4;
  if (has_stationname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->stationname(), output);
  }

  // optional bytes unitType = 5;
  if (has_unittype()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->unittype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GswitchQueryBean::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes unitCim = 1;
  if (has_unitcim()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->unitcim(), target);
  }

  // optional bytes unitCimName = 2;
  if (has_unitcimname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->unitcimname(), target);
  }

  // optional bytes stationCim = 3;
  if (has_stationcim()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->stationcim(), target);
  }

  // optional bytes stationName = 4;
  if (has_stationname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->stationname(), target);
  }

  // optional bytes unitType = 5;
  if (has_unittype()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->unittype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GswitchQueryBean::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes unitCim = 1;
    if (has_unitcim()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->unitcim());
    }

    // optional bytes unitCimName = 2;
    if (has_unitcimname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->unitcimname());
    }

    // optional bytes stationCim = 3;
    if (has_stationcim()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->stationcim());
    }

    // optional bytes stationName = 4;
    if (has_stationname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->stationname());
    }

    // optional bytes unitType = 5;
    if (has_unittype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->unittype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GswitchQueryBean::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GswitchQueryBean* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GswitchQueryBean*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GswitchQueryBean::MergeFrom(const GswitchQueryBean& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unitcim()) {
      set_unitcim(from.unitcim());
    }
    if (from.has_unitcimname()) {
      set_unitcimname(from.unitcimname());
    }
    if (from.has_stationcim()) {
      set_stationcim(from.stationcim());
    }
    if (from.has_stationname()) {
      set_stationname(from.stationname());
    }
    if (from.has_unittype()) {
      set_unittype(from.unittype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GswitchQueryBean::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GswitchQueryBean::CopyFrom(const GswitchQueryBean& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GswitchQueryBean::IsInitialized() const {

  return true;
}

void GswitchQueryBean::Swap(GswitchQueryBean* other) {
  if (other != this) {
    std::swap(unitcim_, other->unitcim_);
    std::swap(unitcimname_, other->unitcimname_);
    std::swap(stationcim_, other->stationcim_);
    std::swap(stationname_, other->stationname_);
    std::swap(unittype_, other->unittype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GswitchQueryBean::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GswitchQueryBean_descriptor_;
  metadata.reflection = GswitchQueryBean_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsetQueryBean::kUnitCimFieldNumber;
const int MsetQueryBean::kUnitCimNameFieldNumber;
const int MsetQueryBean::kStationCimFieldNumber;
const int MsetQueryBean::kStationNameFieldNumber;
const int MsetQueryBean::kUnitTypeFieldNumber;
#endif  // !_MSC_VER

MsetQueryBean::MsetQueryBean()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsetQueryBean::InitAsDefaultInstance() {
}

MsetQueryBean::MsetQueryBean(const MsetQueryBean& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsetQueryBean::SharedCtor() {
  _cached_size_ = 0;
  unitcim_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  unitcimname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  stationcim_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  stationname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  unittype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsetQueryBean::~MsetQueryBean() {
  SharedDtor();
}

void MsetQueryBean::SharedDtor() {
  if (unitcim_ != &::google::protobuf::internal::kEmptyString) {
    delete unitcim_;
  }
  if (unitcimname_ != &::google::protobuf::internal::kEmptyString) {
    delete unitcimname_;
  }
  if (stationcim_ != &::google::protobuf::internal::kEmptyString) {
    delete stationcim_;
  }
  if (stationname_ != &::google::protobuf::internal::kEmptyString) {
    delete stationname_;
  }
  if (unittype_ != &::google::protobuf::internal::kEmptyString) {
    delete unittype_;
  }
  if (this != default_instance_) {
  }
}

void MsetQueryBean::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsetQueryBean::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsetQueryBean_descriptor_;
}

const MsetQueryBean& MsetQueryBean::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbean_2eproto();
  return *default_instance_;
}

MsetQueryBean* MsetQueryBean::default_instance_ = NULL;

MsetQueryBean* MsetQueryBean::New() const {
  return new MsetQueryBean;
}

void MsetQueryBean::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_unitcim()) {
      if (unitcim_ != &::google::protobuf::internal::kEmptyString) {
        unitcim_->clear();
      }
    }
    if (has_unitcimname()) {
      if (unitcimname_ != &::google::protobuf::internal::kEmptyString) {
        unitcimname_->clear();
      }
    }
    if (has_stationcim()) {
      if (stationcim_ != &::google::protobuf::internal::kEmptyString) {
        stationcim_->clear();
      }
    }
    if (has_stationname()) {
      if (stationname_ != &::google::protobuf::internal::kEmptyString) {
        stationname_->clear();
      }
    }
    if (has_unittype()) {
      if (unittype_ != &::google::protobuf::internal::kEmptyString) {
        unittype_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsetQueryBean::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes unitCim = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_unitcim()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_unitCimName;
        break;
      }

      // optional bytes unitCimName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unitCimName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_unitcimname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stationCim;
        break;
      }

      // optional bytes stationCim = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stationCim:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_stationcim()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_stationName;
        break;
      }

      // optional bytes stationName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stationName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_stationname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_unitType;
        break;
      }

      // optional bytes unitType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unitType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_unittype()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsetQueryBean::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes unitCim = 1;
  if (has_unitcim()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->unitcim(), output);
  }

  // optional bytes unitCimName = 2;
  if (has_unitcimname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->unitcimname(), output);
  }

  // optional bytes stationCim = 3;
  if (has_stationcim()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->stationcim(), output);
  }

  // optional bytes stationName = 4;
  if (has_stationname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->stationname(), output);
  }

  // optional bytes unitType = 5;
  if (has_unittype()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->unittype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsetQueryBean::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes unitCim = 1;
  if (has_unitcim()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->unitcim(), target);
  }

  // optional bytes unitCimName = 2;
  if (has_unitcimname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->unitcimname(), target);
  }

  // optional bytes stationCim = 3;
  if (has_stationcim()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->stationcim(), target);
  }

  // optional bytes stationName = 4;
  if (has_stationname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->stationname(), target);
  }

  // optional bytes unitType = 5;
  if (has_unittype()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->unittype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsetQueryBean::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes unitCim = 1;
    if (has_unitcim()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->unitcim());
    }

    // optional bytes unitCimName = 2;
    if (has_unitcimname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->unitcimname());
    }

    // optional bytes stationCim = 3;
    if (has_stationcim()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->stationcim());
    }

    // optional bytes stationName = 4;
    if (has_stationname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->stationname());
    }

    // optional bytes unitType = 5;
    if (has_unittype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->unittype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsetQueryBean::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsetQueryBean* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsetQueryBean*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsetQueryBean::MergeFrom(const MsetQueryBean& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unitcim()) {
      set_unitcim(from.unitcim());
    }
    if (from.has_unitcimname()) {
      set_unitcimname(from.unitcimname());
    }
    if (from.has_stationcim()) {
      set_stationcim(from.stationcim());
    }
    if (from.has_stationname()) {
      set_stationname(from.stationname());
    }
    if (from.has_unittype()) {
      set_unittype(from.unittype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsetQueryBean::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsetQueryBean::CopyFrom(const MsetQueryBean& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsetQueryBean::IsInitialized() const {

  return true;
}

void MsetQueryBean::Swap(MsetQueryBean* other) {
  if (other != this) {
    std::swap(unitcim_, other->unitcim_);
    std::swap(unitcimname_, other->unitcimname_);
    std::swap(stationcim_, other->stationcim_);
    std::swap(stationname_, other->stationname_);
    std::swap(unittype_, other->unittype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsetQueryBean::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsetQueryBean_descriptor_;
  metadata.reflection = MsetQueryBean_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EventQueryBean::kUnitCimFieldNumber;
const int EventQueryBean::kUnitCimNameFieldNumber;
const int EventQueryBean::kStationCimFieldNumber;
const int EventQueryBean::kStationNameFieldNumber;
const int EventQueryBean::kUnitTypeFieldNumber;
const int EventQueryBean::kEventvalueFieldNumber;
const int EventQueryBean::kEventtimeFieldNumber;
#endif  // !_MSC_VER

EventQueryBean::EventQueryBean()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EventQueryBean::InitAsDefaultInstance() {
}

EventQueryBean::EventQueryBean(const EventQueryBean& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EventQueryBean::SharedCtor() {
  _cached_size_ = 0;
  unitcim_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  unitcimname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  stationcim_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  stationname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  unittype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  eventvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  eventtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EventQueryBean::~EventQueryBean() {
  SharedDtor();
}

void EventQueryBean::SharedDtor() {
  if (unitcim_ != &::google::protobuf::internal::kEmptyString) {
    delete unitcim_;
  }
  if (unitcimname_ != &::google::protobuf::internal::kEmptyString) {
    delete unitcimname_;
  }
  if (stationcim_ != &::google::protobuf::internal::kEmptyString) {
    delete stationcim_;
  }
  if (stationname_ != &::google::protobuf::internal::kEmptyString) {
    delete stationname_;
  }
  if (unittype_ != &::google::protobuf::internal::kEmptyString) {
    delete unittype_;
  }
  if (eventvalue_ != &::google::protobuf::internal::kEmptyString) {
    delete eventvalue_;
  }
  if (eventtime_ != &::google::protobuf::internal::kEmptyString) {
    delete eventtime_;
  }
  if (this != default_instance_) {
  }
}

void EventQueryBean::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventQueryBean::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventQueryBean_descriptor_;
}

const EventQueryBean& EventQueryBean::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbean_2eproto();
  return *default_instance_;
}

EventQueryBean* EventQueryBean::default_instance_ = NULL;

EventQueryBean* EventQueryBean::New() const {
  return new EventQueryBean;
}

void EventQueryBean::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_unitcim()) {
      if (unitcim_ != &::google::protobuf::internal::kEmptyString) {
        unitcim_->clear();
      }
    }
    if (has_unitcimname()) {
      if (unitcimname_ != &::google::protobuf::internal::kEmptyString) {
        unitcimname_->clear();
      }
    }
    if (has_stationcim()) {
      if (stationcim_ != &::google::protobuf::internal::kEmptyString) {
        stationcim_->clear();
      }
    }
    if (has_stationname()) {
      if (stationname_ != &::google::protobuf::internal::kEmptyString) {
        stationname_->clear();
      }
    }
    if (has_unittype()) {
      if (unittype_ != &::google::protobuf::internal::kEmptyString) {
        unittype_->clear();
      }
    }
    if (has_eventvalue()) {
      if (eventvalue_ != &::google::protobuf::internal::kEmptyString) {
        eventvalue_->clear();
      }
    }
    if (has_eventtime()) {
      if (eventtime_ != &::google::protobuf::internal::kEmptyString) {
        eventtime_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EventQueryBean::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes unitCim = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_unitcim()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_unitCimName;
        break;
      }

      // optional bytes unitCimName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unitCimName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_unitcimname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stationCim;
        break;
      }

      // optional bytes stationCim = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stationCim:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_stationcim()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_stationName;
        break;
      }

      // optional bytes stationName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stationName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_stationname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_unitType;
        break;
      }

      // optional bytes unitType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unitType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_unittype()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_eventvalue;
        break;
      }

      // optional bytes eventvalue = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_eventvalue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_eventvalue()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_eventtime;
        break;
      }

      // optional bytes eventtime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_eventtime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_eventtime()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EventQueryBean::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes unitCim = 1;
  if (has_unitcim()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->unitcim(), output);
  }

  // optional bytes unitCimName = 2;
  if (has_unitcimname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->unitcimname(), output);
  }

  // optional bytes stationCim = 3;
  if (has_stationcim()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->stationcim(), output);
  }

  // optional bytes stationName = 4;
  if (has_stationname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->stationname(), output);
  }

  // optional bytes unitType = 5;
  if (has_unittype()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->unittype(), output);
  }

  // optional bytes eventvalue = 6;
  if (has_eventvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->eventvalue(), output);
  }

  // optional bytes eventtime = 7;
  if (has_eventtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->eventtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EventQueryBean::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes unitCim = 1;
  if (has_unitcim()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->unitcim(), target);
  }

  // optional bytes unitCimName = 2;
  if (has_unitcimname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->unitcimname(), target);
  }

  // optional bytes stationCim = 3;
  if (has_stationcim()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->stationcim(), target);
  }

  // optional bytes stationName = 4;
  if (has_stationname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->stationname(), target);
  }

  // optional bytes unitType = 5;
  if (has_unittype()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->unittype(), target);
  }

  // optional bytes eventvalue = 6;
  if (has_eventvalue()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->eventvalue(), target);
  }

  // optional bytes eventtime = 7;
  if (has_eventtime()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->eventtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EventQueryBean::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes unitCim = 1;
    if (has_unitcim()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->unitcim());
    }

    // optional bytes unitCimName = 2;
    if (has_unitcimname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->unitcimname());
    }

    // optional bytes stationCim = 3;
    if (has_stationcim()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->stationcim());
    }

    // optional bytes stationName = 4;
    if (has_stationname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->stationname());
    }

    // optional bytes unitType = 5;
    if (has_unittype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->unittype());
    }

    // optional bytes eventvalue = 6;
    if (has_eventvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->eventvalue());
    }

    // optional bytes eventtime = 7;
    if (has_eventtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->eventtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventQueryBean::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EventQueryBean* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EventQueryBean*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EventQueryBean::MergeFrom(const EventQueryBean& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unitcim()) {
      set_unitcim(from.unitcim());
    }
    if (from.has_unitcimname()) {
      set_unitcimname(from.unitcimname());
    }
    if (from.has_stationcim()) {
      set_stationcim(from.stationcim());
    }
    if (from.has_stationname()) {
      set_stationname(from.stationname());
    }
    if (from.has_unittype()) {
      set_unittype(from.unittype());
    }
    if (from.has_eventvalue()) {
      set_eventvalue(from.eventvalue());
    }
    if (from.has_eventtime()) {
      set_eventtime(from.eventtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EventQueryBean::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventQueryBean::CopyFrom(const EventQueryBean& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventQueryBean::IsInitialized() const {

  return true;
}

void EventQueryBean::Swap(EventQueryBean* other) {
  if (other != this) {
    std::swap(unitcim_, other->unitcim_);
    std::swap(unitcimname_, other->unitcimname_);
    std::swap(stationcim_, other->stationcim_);
    std::swap(stationname_, other->stationname_);
    std::swap(unittype_, other->unittype_);
    std::swap(eventvalue_, other->eventvalue_);
    std::swap(eventtime_, other->eventtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EventQueryBean::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EventQueryBean_descriptor_;
  metadata.reflection = EventQueryBean_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StateBean::kCimIdFieldNumber;
const int StateBean::kStateFieldNumber;
const int StateBean::kIsBoardFieldNumber;
const int StateBean::kIsElectricFieldNumber;
const int StateBean::kVolColorFieldNumber;
const int StateBean::kUnitTypeFieldNumber;
const int StateBean::kStationCimFieldNumber;
const int StateBean::kIsPowerFieldNumber;
const int StateBean::kIsGroundFieldNumber;
const int StateBean::kIsOpFieldNumber;
#endif  // !_MSC_VER

StateBean::StateBean()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StateBean::InitAsDefaultInstance() {
}

StateBean::StateBean(const StateBean& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StateBean::SharedCtor() {
  _cached_size_ = 0;
  cimid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  state_ = 0u;
  isboard_ = 0u;
  iselectric_ = 0u;
  volcolor_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  unittype_ = 0u;
  stationcim_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ispower_ = 0u;
  isground_ = 0u;
  isop_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StateBean::~StateBean() {
  SharedDtor();
}

void StateBean::SharedDtor() {
  if (cimid_ != &::google::protobuf::internal::kEmptyString) {
    delete cimid_;
  }
  if (volcolor_ != &::google::protobuf::internal::kEmptyString) {
    delete volcolor_;
  }
  if (stationcim_ != &::google::protobuf::internal::kEmptyString) {
    delete stationcim_;
  }
  if (this != default_instance_) {
  }
}

void StateBean::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StateBean::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StateBean_descriptor_;
}

const StateBean& StateBean::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbean_2eproto();
  return *default_instance_;
}

StateBean* StateBean::default_instance_ = NULL;

StateBean* StateBean::New() const {
  return new StateBean;
}

void StateBean::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cimid()) {
      if (cimid_ != &::google::protobuf::internal::kEmptyString) {
        cimid_->clear();
      }
    }
    state_ = 0u;
    isboard_ = 0u;
    iselectric_ = 0u;
    if (has_volcolor()) {
      if (volcolor_ != &::google::protobuf::internal::kEmptyString) {
        volcolor_->clear();
      }
    }
    unittype_ = 0u;
    if (has_stationcim()) {
      if (stationcim_ != &::google::protobuf::internal::kEmptyString) {
        stationcim_->clear();
      }
    }
    ispower_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    isground_ = 0u;
    isop_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StateBean::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes cimId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cimid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional uint32 state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isBoard;
        break;
      }

      // optional uint32 isBoard = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isBoard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isboard_)));
          set_has_isboard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isElectric;
        break;
      }

      // optional uint32 isElectric = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isElectric:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &iselectric_)));
          set_has_iselectric();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_volColor;
        break;
      }

      // optional bytes volColor = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_volColor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_volcolor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_unitType;
        break;
      }

      // optional uint32 unitType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unitType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unittype_)));
          set_has_unittype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_stationCim;
        break;
      }

      // optional bytes stationCim = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stationCim:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_stationcim()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_isPower;
        break;
      }

      // optional uint32 isPower = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isPower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ispower_)));
          set_has_ispower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_isGround;
        break;
      }

      // optional uint32 isGround = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isGround:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isground_)));
          set_has_isground();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_isOp;
        break;
      }

      // optional uint32 isOp = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isOp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isop_)));
          set_has_isop();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StateBean::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes cimId = 1;
  if (has_cimid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->cimid(), output);
  }

  // optional uint32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->state(), output);
  }

  // optional uint32 isBoard = 3;
  if (has_isboard()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->isboard(), output);
  }

  // optional uint32 isElectric = 4;
  if (has_iselectric()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->iselectric(), output);
  }

  // optional bytes volColor = 5;
  if (has_volcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->volcolor(), output);
  }

  // optional uint32 unitType = 6;
  if (has_unittype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->unittype(), output);
  }

  // optional bytes stationCim = 7;
  if (has_stationcim()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->stationcim(), output);
  }

  // optional uint32 isPower = 8;
  if (has_ispower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->ispower(), output);
  }

  // optional uint32 isGround = 9;
  if (has_isground()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->isground(), output);
  }

  // optional uint32 isOp = 10;
  if (has_isop()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->isop(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StateBean::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes cimId = 1;
  if (has_cimid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->cimid(), target);
  }

  // optional uint32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->state(), target);
  }

  // optional uint32 isBoard = 3;
  if (has_isboard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->isboard(), target);
  }

  // optional uint32 isElectric = 4;
  if (has_iselectric()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->iselectric(), target);
  }

  // optional bytes volColor = 5;
  if (has_volcolor()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->volcolor(), target);
  }

  // optional uint32 unitType = 6;
  if (has_unittype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->unittype(), target);
  }

  // optional bytes stationCim = 7;
  if (has_stationcim()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->stationcim(), target);
  }

  // optional uint32 isPower = 8;
  if (has_ispower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->ispower(), target);
  }

  // optional uint32 isGround = 9;
  if (has_isground()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->isground(), target);
  }

  // optional uint32 isOp = 10;
  if (has_isop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->isop(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StateBean::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes cimId = 1;
    if (has_cimid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cimid());
    }

    // optional uint32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

    // optional uint32 isBoard = 3;
    if (has_isboard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isboard());
    }

    // optional uint32 isElectric = 4;
    if (has_iselectric()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->iselectric());
    }

    // optional bytes volColor = 5;
    if (has_volcolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->volcolor());
    }

    // optional uint32 unitType = 6;
    if (has_unittype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unittype());
    }

    // optional bytes stationCim = 7;
    if (has_stationcim()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->stationcim());
    }

    // optional uint32 isPower = 8;
    if (has_ispower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ispower());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 isGround = 9;
    if (has_isground()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isground());
    }

    // optional uint32 isOp = 10;
    if (has_isop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isop());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StateBean::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StateBean* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StateBean*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StateBean::MergeFrom(const StateBean& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cimid()) {
      set_cimid(from.cimid());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_isboard()) {
      set_isboard(from.isboard());
    }
    if (from.has_iselectric()) {
      set_iselectric(from.iselectric());
    }
    if (from.has_volcolor()) {
      set_volcolor(from.volcolor());
    }
    if (from.has_unittype()) {
      set_unittype(from.unittype());
    }
    if (from.has_stationcim()) {
      set_stationcim(from.stationcim());
    }
    if (from.has_ispower()) {
      set_ispower(from.ispower());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_isground()) {
      set_isground(from.isground());
    }
    if (from.has_isop()) {
      set_isop(from.isop());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StateBean::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateBean::CopyFrom(const StateBean& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateBean::IsInitialized() const {

  return true;
}

void StateBean::Swap(StateBean* other) {
  if (other != this) {
    std::swap(cimid_, other->cimid_);
    std::swap(state_, other->state_);
    std::swap(isboard_, other->isboard_);
    std::swap(iselectric_, other->iselectric_);
    std::swap(volcolor_, other->volcolor_);
    std::swap(unittype_, other->unittype_);
    std::swap(stationcim_, other->stationcim_);
    std::swap(ispower_, other->ispower_);
    std::swap(isground_, other->isground_);
    std::swap(isop_, other->isop_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StateBean::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StateBean_descriptor_;
  metadata.reflection = StateBean_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StationTypeBean::kIdFieldNumber;
const int StationTypeBean::kOrdernumFieldNumber;
const int StationTypeBean::kNameFieldNumber;
const int StationTypeBean::kStationListFieldNumber;
#endif  // !_MSC_VER

StationTypeBean::StationTypeBean()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StationTypeBean::InitAsDefaultInstance() {
}

StationTypeBean::StationTypeBean(const StationTypeBean& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StationTypeBean::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ordernum_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StationTypeBean::~StationTypeBean() {
  SharedDtor();
}

void StationTypeBean::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void StationTypeBean::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StationTypeBean::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StationTypeBean_descriptor_;
}

const StationTypeBean& StationTypeBean::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbean_2eproto();
  return *default_instance_;
}

StationTypeBean* StationTypeBean::default_instance_ = NULL;

StationTypeBean* StationTypeBean::New() const {
  return new StationTypeBean;
}

void StationTypeBean::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    ordernum_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  stationlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StationTypeBean::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ordernum;
        break;
      }

      // optional uint32 ordernum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ordernum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ordernum_)));
          set_has_ordernum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Name;
        break;
      }

      // optional bytes Name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_StationList;
        break;
      }

      // repeated .com.spplus.buff.StationBean StationList = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_StationList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stationlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_StationList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StationTypeBean::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 ordernum = 2;
  if (has_ordernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ordernum(), output);
  }

  // optional bytes Name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->name(), output);
  }

  // repeated .com.spplus.buff.StationBean StationList = 4;
  for (int i = 0; i < this->stationlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->stationlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StationTypeBean::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 ordernum = 2;
  if (has_ordernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ordernum(), target);
  }

  // optional bytes Name = 3;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  // repeated .com.spplus.buff.StationBean StationList = 4;
  for (int i = 0; i < this->stationlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->stationlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StationTypeBean::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 ordernum = 2;
    if (has_ordernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ordernum());
    }

    // optional bytes Name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

  }
  // repeated .com.spplus.buff.StationBean StationList = 4;
  total_size += 1 * this->stationlist_size();
  for (int i = 0; i < this->stationlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stationlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StationTypeBean::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StationTypeBean* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StationTypeBean*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StationTypeBean::MergeFrom(const StationTypeBean& from) {
  GOOGLE_CHECK_NE(&from, this);
  stationlist_.MergeFrom(from.stationlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_ordernum()) {
      set_ordernum(from.ordernum());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StationTypeBean::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StationTypeBean::CopyFrom(const StationTypeBean& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StationTypeBean::IsInitialized() const {

  return true;
}

void StationTypeBean::Swap(StationTypeBean* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(ordernum_, other->ordernum_);
    std::swap(name_, other->name_);
    stationlist_.Swap(&other->stationlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StationTypeBean::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StationTypeBean_descriptor_;
  metadata.reflection = StationTypeBean_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StationBean::kIdFieldNumber;
const int StationBean::kCategoryIdFieldNumber;
const int StationBean::kNameFieldNumber;
const int StationBean::kCimIdFieldNumber;
const int StationBean::kCurrentNameFieldNumber;
const int StationBean::kPathFieldNumber;
#endif  // !_MSC_VER

StationBean::StationBean()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StationBean::InitAsDefaultInstance() {
}

StationBean::StationBean(const StationBean& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StationBean::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  categoryid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cimid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  currentname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StationBean::~StationBean() {
  SharedDtor();
}

void StationBean::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (cimid_ != &::google::protobuf::internal::kEmptyString) {
    delete cimid_;
  }
  if (currentname_ != &::google::protobuf::internal::kEmptyString) {
    delete currentname_;
  }
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void StationBean::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StationBean::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StationBean_descriptor_;
}

const StationBean& StationBean::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbean_2eproto();
  return *default_instance_;
}

StationBean* StationBean::default_instance_ = NULL;

StationBean* StationBean::New() const {
  return new StationBean;
}

void StationBean::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    categoryid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_cimid()) {
      if (cimid_ != &::google::protobuf::internal::kEmptyString) {
        cimid_->clear();
      }
    }
    if (has_currentname()) {
      if (currentname_ != &::google::protobuf::internal::kEmptyString) {
        currentname_->clear();
      }
    }
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StationBean::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CategoryId;
        break;
      }

      // optional uint32 CategoryId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CategoryId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &categoryid_)));
          set_has_categoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Name;
        break;
      }

      // optional bytes Name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_CimId;
        break;
      }

      // optional bytes CimId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CimId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cimid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_CurrentName;
        break;
      }

      // optional bytes CurrentName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CurrentName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_currentname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_Path;
        break;
      }

      // optional bytes Path = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_path()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StationBean::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 CategoryId = 2;
  if (has_categoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->categoryid(), output);
  }

  // optional bytes Name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->name(), output);
  }

  // optional bytes CimId = 4;
  if (has_cimid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->cimid(), output);
  }

  // optional bytes CurrentName = 5;
  if (has_currentname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->currentname(), output);
  }

  // optional bytes Path = 6;
  if (has_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->path(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StationBean::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 CategoryId = 2;
  if (has_categoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->categoryid(), target);
  }

  // optional bytes Name = 3;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  // optional bytes CimId = 4;
  if (has_cimid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->cimid(), target);
  }

  // optional bytes CurrentName = 5;
  if (has_currentname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->currentname(), target);
  }

  // optional bytes Path = 6;
  if (has_path()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->path(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StationBean::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 CategoryId = 2;
    if (has_categoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->categoryid());
    }

    // optional bytes Name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional bytes CimId = 4;
    if (has_cimid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cimid());
    }

    // optional bytes CurrentName = 5;
    if (has_currentname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->currentname());
    }

    // optional bytes Path = 6;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->path());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StationBean::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StationBean* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StationBean*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StationBean::MergeFrom(const StationBean& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_categoryid()) {
      set_categoryid(from.categoryid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_cimid()) {
      set_cimid(from.cimid());
    }
    if (from.has_currentname()) {
      set_currentname(from.currentname());
    }
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StationBean::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StationBean::CopyFrom(const StationBean& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StationBean::IsInitialized() const {

  return true;
}

void StationBean::Swap(StationBean* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(categoryid_, other->categoryid_);
    std::swap(name_, other->name_);
    std::swap(cimid_, other->cimid_);
    std::swap(currentname_, other->currentname_);
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StationBean::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StationBean_descriptor_;
  metadata.reflection = StationBean_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnitsBean::kIdFieldNumber;
const int UnitsBean::kStationIdFieldNumber;
const int UnitsBean::kNameFieldNumber;
const int UnitsBean::kCimIdFieldNumber;
const int UnitsBean::kVolIdFieldNumber;
const int UnitsBean::kUnitTypeFieldNumber;
const int UnitsBean::kSelfTypeFieldNumber;
#endif  // !_MSC_VER

UnitsBean::UnitsBean()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UnitsBean::InitAsDefaultInstance() {
}

UnitsBean::UnitsBean(const UnitsBean& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UnitsBean::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  stationid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cimid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  volid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  unittype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  selftype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnitsBean::~UnitsBean() {
  SharedDtor();
}

void UnitsBean::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (cimid_ != &::google::protobuf::internal::kEmptyString) {
    delete cimid_;
  }
  if (volid_ != &::google::protobuf::internal::kEmptyString) {
    delete volid_;
  }
  if (unittype_ != &::google::protobuf::internal::kEmptyString) {
    delete unittype_;
  }
  if (selftype_ != &::google::protobuf::internal::kEmptyString) {
    delete selftype_;
  }
  if (this != default_instance_) {
  }
}

void UnitsBean::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnitsBean::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnitsBean_descriptor_;
}

const UnitsBean& UnitsBean::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbean_2eproto();
  return *default_instance_;
}

UnitsBean* UnitsBean::default_instance_ = NULL;

UnitsBean* UnitsBean::New() const {
  return new UnitsBean;
}

void UnitsBean::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    stationid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_cimid()) {
      if (cimid_ != &::google::protobuf::internal::kEmptyString) {
        cimid_->clear();
      }
    }
    if (has_volid()) {
      if (volid_ != &::google::protobuf::internal::kEmptyString) {
        volid_->clear();
      }
    }
    if (has_unittype()) {
      if (unittype_ != &::google::protobuf::internal::kEmptyString) {
        unittype_->clear();
      }
    }
    if (has_selftype()) {
      if (selftype_ != &::google::protobuf::internal::kEmptyString) {
        selftype_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnitsBean::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_StationId;
        break;
      }

      // optional uint32 StationId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_StationId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stationid_)));
          set_has_stationid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Name;
        break;
      }

      // optional bytes Name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_CimId;
        break;
      }

      // optional bytes CimId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CimId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cimid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_VolId;
        break;
      }

      // optional bytes VolId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_VolId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_volid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_UnitType;
        break;
      }

      // optional bytes UnitType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UnitType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_unittype()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_SelfType;
        break;
      }

      // optional bytes SelfType = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SelfType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_selftype()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UnitsBean::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 StationId = 2;
  if (has_stationid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->stationid(), output);
  }

  // optional bytes Name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->name(), output);
  }

  // optional bytes CimId = 4;
  if (has_cimid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->cimid(), output);
  }

  // optional bytes VolId = 5;
  if (has_volid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->volid(), output);
  }

  // optional bytes UnitType = 6;
  if (has_unittype()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->unittype(), output);
  }

  // optional bytes SelfType = 7;
  if (has_selftype()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->selftype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UnitsBean::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 StationId = 2;
  if (has_stationid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->stationid(), target);
  }

  // optional bytes Name = 3;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  // optional bytes CimId = 4;
  if (has_cimid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->cimid(), target);
  }

  // optional bytes VolId = 5;
  if (has_volid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->volid(), target);
  }

  // optional bytes UnitType = 6;
  if (has_unittype()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->unittype(), target);
  }

  // optional bytes SelfType = 7;
  if (has_selftype()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->selftype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UnitsBean::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 StationId = 2;
    if (has_stationid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stationid());
    }

    // optional bytes Name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional bytes CimId = 4;
    if (has_cimid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cimid());
    }

    // optional bytes VolId = 5;
    if (has_volid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->volid());
    }

    // optional bytes UnitType = 6;
    if (has_unittype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->unittype());
    }

    // optional bytes SelfType = 7;
    if (has_selftype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->selftype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnitsBean::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnitsBean* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnitsBean*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnitsBean::MergeFrom(const UnitsBean& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_stationid()) {
      set_stationid(from.stationid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_cimid()) {
      set_cimid(from.cimid());
    }
    if (from.has_volid()) {
      set_volid(from.volid());
    }
    if (from.has_unittype()) {
      set_unittype(from.unittype());
    }
    if (from.has_selftype()) {
      set_selftype(from.selftype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnitsBean::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnitsBean::CopyFrom(const UnitsBean& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnitsBean::IsInitialized() const {

  return true;
}

void UnitsBean::Swap(UnitsBean* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(stationid_, other->stationid_);
    std::swap(name_, other->name_);
    std::swap(cimid_, other->cimid_);
    std::swap(volid_, other->volid_);
    std::swap(unittype_, other->unittype_);
    std::swap(selftype_, other->selftype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnitsBean::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnitsBean_descriptor_;
  metadata.reflection = UnitsBean_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SavingBean::kIdFieldNumber;
const int SavingBean::kNameFieldNumber;
const int SavingBean::kSaveTimeFieldNumber;
#endif  // !_MSC_VER

SavingBean::SavingBean()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SavingBean::InitAsDefaultInstance() {
}

SavingBean::SavingBean(const SavingBean& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SavingBean::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  savetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SavingBean::~SavingBean() {
  SharedDtor();
}

void SavingBean::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (savetime_ != &::google::protobuf::internal::kEmptyString) {
    delete savetime_;
  }
  if (this != default_instance_) {
  }
}

void SavingBean::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SavingBean::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SavingBean_descriptor_;
}

const SavingBean& SavingBean::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbean_2eproto();
  return *default_instance_;
}

SavingBean* SavingBean::default_instance_ = NULL;

SavingBean* SavingBean::New() const {
  return new SavingBean;
}

void SavingBean::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_savetime()) {
      if (savetime_ != &::google::protobuf::internal::kEmptyString) {
        savetime_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SavingBean::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Name;
        break;
      }

      // optional bytes Name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_SaveTime;
        break;
      }

      // optional bytes SaveTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SaveTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_savetime()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SavingBean::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional bytes Name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // optional bytes SaveTime = 3;
  if (has_savetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->savetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SavingBean::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional bytes Name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // optional bytes SaveTime = 3;
  if (has_savetime()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->savetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SavingBean::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional bytes Name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional bytes SaveTime = 3;
    if (has_savetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->savetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SavingBean::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SavingBean* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SavingBean*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SavingBean::MergeFrom(const SavingBean& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_savetime()) {
      set_savetime(from.savetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SavingBean::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SavingBean::CopyFrom(const SavingBean& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SavingBean::IsInitialized() const {

  return true;
}

void SavingBean::Swap(SavingBean* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(savetime_, other->savetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SavingBean::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SavingBean_descriptor_;
  metadata.reflection = SavingBean_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RuleBean::kIdFieldNumber;
const int RuleBean::kNameFieldNumber;
const int RuleBean::kAlarmLevelFieldNumber;
const int RuleBean::kDescriptionFieldNumber;
#endif  // !_MSC_VER

RuleBean::RuleBean()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RuleBean::InitAsDefaultInstance() {
}

RuleBean::RuleBean(const RuleBean& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RuleBean::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  alarmlevel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RuleBean::~RuleBean() {
  SharedDtor();
}

void RuleBean::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (alarmlevel_ != &::google::protobuf::internal::kEmptyString) {
    delete alarmlevel_;
  }
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (this != default_instance_) {
  }
}

void RuleBean::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RuleBean::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RuleBean_descriptor_;
}

const RuleBean& RuleBean::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbean_2eproto();
  return *default_instance_;
}

RuleBean* RuleBean::default_instance_ = NULL;

RuleBean* RuleBean::New() const {
  return new RuleBean;
}

void RuleBean::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_alarmlevel()) {
      if (alarmlevel_ != &::google::protobuf::internal::kEmptyString) {
        alarmlevel_->clear();
      }
    }
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::kEmptyString) {
        description_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RuleBean::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Name;
        break;
      }

      // optional bytes Name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_AlarmLevel;
        break;
      }

      // optional bytes AlarmLevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AlarmLevel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_alarmlevel()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Description;
        break;
      }

      // optional bytes Description = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_description()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RuleBean::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional bytes Name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // optional bytes AlarmLevel = 3;
  if (has_alarmlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->alarmlevel(), output);
  }

  // optional bytes Description = 4;
  if (has_description()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->description(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RuleBean::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional bytes Name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // optional bytes AlarmLevel = 3;
  if (has_alarmlevel()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->alarmlevel(), target);
  }

  // optional bytes Description = 4;
  if (has_description()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->description(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RuleBean::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional bytes Name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional bytes AlarmLevel = 3;
    if (has_alarmlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->alarmlevel());
    }

    // optional bytes Description = 4;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->description());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RuleBean::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RuleBean* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RuleBean*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RuleBean::MergeFrom(const RuleBean& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_alarmlevel()) {
      set_alarmlevel(from.alarmlevel());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RuleBean::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RuleBean::CopyFrom(const RuleBean& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RuleBean::IsInitialized() const {

  return true;
}

void RuleBean::Swap(RuleBean* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(alarmlevel_, other->alarmlevel_);
    std::swap(description_, other->description_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RuleBean::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RuleBean_descriptor_;
  metadata.reflection = RuleBean_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TicketMsionBean::kIdFieldNumber;
const int TicketMsionBean::kUserIdFieldNumber;
const int TicketMsionBean::kUserNameFieldNumber;
const int TicketMsionBean::kActUserIdFieldNumber;
const int TicketMsionBean::kActUserNameFieldNumber;
const int TicketMsionBean::kNameFieldNumber;
const int TicketMsionBean::kPublishTimeFieldNumber;
#endif  // !_MSC_VER

TicketMsionBean::TicketMsionBean()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TicketMsionBean::InitAsDefaultInstance() {
}

TicketMsionBean::TicketMsionBean(const TicketMsionBean& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TicketMsionBean::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  userid_ = 0u;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  actuserid_ = 0u;
  actusername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  publishtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TicketMsionBean::~TicketMsionBean() {
  SharedDtor();
}

void TicketMsionBean::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (actusername_ != &::google::protobuf::internal::kEmptyString) {
    delete actusername_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (publishtime_ != &::google::protobuf::internal::kEmptyString) {
    delete publishtime_;
  }
  if (this != default_instance_) {
  }
}

void TicketMsionBean::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TicketMsionBean::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TicketMsionBean_descriptor_;
}

const TicketMsionBean& TicketMsionBean::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbean_2eproto();
  return *default_instance_;
}

TicketMsionBean* TicketMsionBean::default_instance_ = NULL;

TicketMsionBean* TicketMsionBean::New() const {
  return new TicketMsionBean;
}

void TicketMsionBean::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    userid_ = 0u;
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    actuserid_ = 0u;
    if (has_actusername()) {
      if (actusername_ != &::google::protobuf::internal::kEmptyString) {
        actusername_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_publishtime()) {
      if (publishtime_ != &::google::protobuf::internal::kEmptyString) {
        publishtime_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TicketMsionBean::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_UserId;
        break;
      }

      // optional uint32 UserId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UserId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_UserName;
        break;
      }

      // optional bytes UserName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UserName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_username()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ActUserId;
        break;
      }

      // optional uint32 ActUserId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ActUserId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &actuserid_)));
          set_has_actuserid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ActUserName;
        break;
      }

      // optional bytes ActUserName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ActUserName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_actusername()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_Name;
        break;
      }

      // optional bytes Name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_PublishTime;
        break;
      }

      // optional bytes PublishTime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PublishTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_publishtime()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TicketMsionBean::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 UserId = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->userid(), output);
  }

  // optional bytes UserName = 3;
  if (has_username()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->username(), output);
  }

  // optional uint32 ActUserId = 4;
  if (has_actuserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->actuserid(), output);
  }

  // optional bytes ActUserName = 5;
  if (has_actusername()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->actusername(), output);
  }

  // optional bytes Name = 6;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->name(), output);
  }

  // optional bytes PublishTime = 7;
  if (has_publishtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->publishtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TicketMsionBean::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 UserId = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->userid(), target);
  }

  // optional bytes UserName = 3;
  if (has_username()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->username(), target);
  }

  // optional uint32 ActUserId = 4;
  if (has_actuserid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->actuserid(), target);
  }

  // optional bytes ActUserName = 5;
  if (has_actusername()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->actusername(), target);
  }

  // optional bytes Name = 6;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->name(), target);
  }

  // optional bytes PublishTime = 7;
  if (has_publishtime()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->publishtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TicketMsionBean::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 UserId = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }

    // optional bytes UserName = 3;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->username());
    }

    // optional uint32 ActUserId = 4;
    if (has_actuserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->actuserid());
    }

    // optional bytes ActUserName = 5;
    if (has_actusername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->actusername());
    }

    // optional bytes Name = 6;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional bytes PublishTime = 7;
    if (has_publishtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->publishtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TicketMsionBean::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TicketMsionBean* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TicketMsionBean*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TicketMsionBean::MergeFrom(const TicketMsionBean& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_actuserid()) {
      set_actuserid(from.actuserid());
    }
    if (from.has_actusername()) {
      set_actusername(from.actusername());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_publishtime()) {
      set_publishtime(from.publishtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TicketMsionBean::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TicketMsionBean::CopyFrom(const TicketMsionBean& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TicketMsionBean::IsInitialized() const {

  return true;
}

void TicketMsionBean::Swap(TicketMsionBean* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(userid_, other->userid_);
    std::swap(username_, other->username_);
    std::swap(actuserid_, other->actuserid_);
    std::swap(actusername_, other->actusername_);
    std::swap(name_, other->name_);
    std::swap(publishtime_, other->publishtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TicketMsionBean::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TicketMsionBean_descriptor_;
  metadata.reflection = TicketMsionBean_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TicketBean::kIdFieldNumber;
const int TicketBean::kCuserIdFieldNumber;
const int TicketBean::kCuserNameFieldNumber;
const int TicketBean::kAuserIdFieldNumber;
const int TicketBean::kAuserNameFieldNumber;
const int TicketBean::kMissionIdFieldNumber;
const int TicketBean::kMissionNameFieldNumber;
const int TicketBean::kNoFieldNumber;
const int TicketBean::kActionTypeFieldNumber;
const int TicketBean::kInfoFieldNumber;
const int TicketBean::kActionPersonFieldNumber;
const int TicketBean::kProtectPersonFieldNumber;
const int TicketBean::kChargePersonFieldNumber;
const int TicketBean::kStartTimeFieldNumber;
const int TicketBean::kEndTimeFieldNumber;
const int TicketBean::kPublishTimeFieldNumber;
#endif  // !_MSC_VER

TicketBean::TicketBean()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TicketBean::InitAsDefaultInstance() {
}

TicketBean::TicketBean(const TicketBean& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TicketBean::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  cuserid_ = 0u;
  cusername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  auserid_ = 0u;
  ausername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  missionid_ = 0u;
  missionname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  no_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  actiontype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  actionperson_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  protectperson_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  chargeperson_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  starttime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  endtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  publishtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TicketBean::~TicketBean() {
  SharedDtor();
}

void TicketBean::SharedDtor() {
  if (cusername_ != &::google::protobuf::internal::kEmptyString) {
    delete cusername_;
  }
  if (ausername_ != &::google::protobuf::internal::kEmptyString) {
    delete ausername_;
  }
  if (missionname_ != &::google::protobuf::internal::kEmptyString) {
    delete missionname_;
  }
  if (no_ != &::google::protobuf::internal::kEmptyString) {
    delete no_;
  }
  if (actiontype_ != &::google::protobuf::internal::kEmptyString) {
    delete actiontype_;
  }
  if (info_ != &::google::protobuf::internal::kEmptyString) {
    delete info_;
  }
  if (actionperson_ != &::google::protobuf::internal::kEmptyString) {
    delete actionperson_;
  }
  if (protectperson_ != &::google::protobuf::internal::kEmptyString) {
    delete protectperson_;
  }
  if (chargeperson_ != &::google::protobuf::internal::kEmptyString) {
    delete chargeperson_;
  }
  if (starttime_ != &::google::protobuf::internal::kEmptyString) {
    delete starttime_;
  }
  if (endtime_ != &::google::protobuf::internal::kEmptyString) {
    delete endtime_;
  }
  if (publishtime_ != &::google::protobuf::internal::kEmptyString) {
    delete publishtime_;
  }
  if (this != default_instance_) {
  }
}

void TicketBean::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TicketBean::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TicketBean_descriptor_;
}

const TicketBean& TicketBean::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbean_2eproto();
  return *default_instance_;
}

TicketBean* TicketBean::default_instance_ = NULL;

TicketBean* TicketBean::New() const {
  return new TicketBean;
}

void TicketBean::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    cuserid_ = 0u;
    if (has_cusername()) {
      if (cusername_ != &::google::protobuf::internal::kEmptyString) {
        cusername_->clear();
      }
    }
    auserid_ = 0u;
    if (has_ausername()) {
      if (ausername_ != &::google::protobuf::internal::kEmptyString) {
        ausername_->clear();
      }
    }
    missionid_ = 0u;
    if (has_missionname()) {
      if (missionname_ != &::google::protobuf::internal::kEmptyString) {
        missionname_->clear();
      }
    }
    if (has_no()) {
      if (no_ != &::google::protobuf::internal::kEmptyString) {
        no_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_actiontype()) {
      if (actiontype_ != &::google::protobuf::internal::kEmptyString) {
        actiontype_->clear();
      }
    }
    if (has_info()) {
      if (info_ != &::google::protobuf::internal::kEmptyString) {
        info_->clear();
      }
    }
    if (has_actionperson()) {
      if (actionperson_ != &::google::protobuf::internal::kEmptyString) {
        actionperson_->clear();
      }
    }
    if (has_protectperson()) {
      if (protectperson_ != &::google::protobuf::internal::kEmptyString) {
        protectperson_->clear();
      }
    }
    if (has_chargeperson()) {
      if (chargeperson_ != &::google::protobuf::internal::kEmptyString) {
        chargeperson_->clear();
      }
    }
    if (has_starttime()) {
      if (starttime_ != &::google::protobuf::internal::kEmptyString) {
        starttime_->clear();
      }
    }
    if (has_endtime()) {
      if (endtime_ != &::google::protobuf::internal::kEmptyString) {
        endtime_->clear();
      }
    }
    if (has_publishtime()) {
      if (publishtime_ != &::google::protobuf::internal::kEmptyString) {
        publishtime_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TicketBean::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CuserId;
        break;
      }

      // optional uint32 CuserId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CuserId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cuserid_)));
          set_has_cuserid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_CuserName;
        break;
      }

      // optional bytes CuserName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CuserName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cusername()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_AuserId;
        break;
      }

      // optional uint32 AuserId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AuserId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &auserid_)));
          set_has_auserid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_AuserName;
        break;
      }

      // optional bytes AuserName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AuserName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ausername()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_MissionId;
        break;
      }

      // optional uint32 MissionId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MissionId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &missionid_)));
          set_has_missionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_MissionName;
        break;
      }

      // optional bytes MissionName = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MissionName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_missionname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_No;
        break;
      }

      // optional bytes No = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_No:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_no()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_ActionType;
        break;
      }

      // optional bytes ActionType = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ActionType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_actiontype()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_info;
        break;
      }

      // optional bytes info = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_ActionPerson;
        break;
      }

      // optional bytes ActionPerson = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ActionPerson:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_actionperson()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_ProtectPerson;
        break;
      }

      // optional bytes ProtectPerson = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ProtectPerson:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_protectperson()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_ChargePerson;
        break;
      }

      // optional bytes ChargePerson = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ChargePerson:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_chargeperson()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_StartTime;
        break;
      }

      // optional bytes StartTime = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_StartTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_starttime()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_EndTime;
        break;
      }

      // optional bytes EndTime = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_EndTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_endtime()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_PublishTime;
        break;
      }

      // optional bytes PublishTime = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PublishTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_publishtime()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TicketBean::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 CuserId = 2;
  if (has_cuserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cuserid(), output);
  }

  // optional bytes CuserName = 3;
  if (has_cusername()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->cusername(), output);
  }

  // optional uint32 AuserId = 4;
  if (has_auserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->auserid(), output);
  }

  // optional bytes AuserName = 5;
  if (has_ausername()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->ausername(), output);
  }

  // optional uint32 MissionId = 6;
  if (has_missionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->missionid(), output);
  }

  // optional bytes MissionName = 7;
  if (has_missionname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->missionname(), output);
  }

  // optional bytes No = 8;
  if (has_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->no(), output);
  }

  // optional bytes ActionType = 9;
  if (has_actiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      9, this->actiontype(), output);
  }

  // optional bytes info = 10;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      10, this->info(), output);
  }

  // optional bytes ActionPerson = 11;
  if (has_actionperson()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      11, this->actionperson(), output);
  }

  // optional bytes ProtectPerson = 12;
  if (has_protectperson()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      12, this->protectperson(), output);
  }

  // optional bytes ChargePerson = 13;
  if (has_chargeperson()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      13, this->chargeperson(), output);
  }

  // optional bytes StartTime = 14;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      14, this->starttime(), output);
  }

  // optional bytes EndTime = 15;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      15, this->endtime(), output);
  }

  // optional bytes PublishTime = 16;
  if (has_publishtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      16, this->publishtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TicketBean::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 CuserId = 2;
  if (has_cuserid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cuserid(), target);
  }

  // optional bytes CuserName = 3;
  if (has_cusername()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->cusername(), target);
  }

  // optional uint32 AuserId = 4;
  if (has_auserid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->auserid(), target);
  }

  // optional bytes AuserName = 5;
  if (has_ausername()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->ausername(), target);
  }

  // optional uint32 MissionId = 6;
  if (has_missionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->missionid(), target);
  }

  // optional bytes MissionName = 7;
  if (has_missionname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->missionname(), target);
  }

  // optional bytes No = 8;
  if (has_no()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->no(), target);
  }

  // optional bytes ActionType = 9;
  if (has_actiontype()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->actiontype(), target);
  }

  // optional bytes info = 10;
  if (has_info()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->info(), target);
  }

  // optional bytes ActionPerson = 11;
  if (has_actionperson()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->actionperson(), target);
  }

  // optional bytes ProtectPerson = 12;
  if (has_protectperson()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->protectperson(), target);
  }

  // optional bytes ChargePerson = 13;
  if (has_chargeperson()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->chargeperson(), target);
  }

  // optional bytes StartTime = 14;
  if (has_starttime()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        14, this->starttime(), target);
  }

  // optional bytes EndTime = 15;
  if (has_endtime()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        15, this->endtime(), target);
  }

  // optional bytes PublishTime = 16;
  if (has_publishtime()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        16, this->publishtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TicketBean::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 CuserId = 2;
    if (has_cuserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cuserid());
    }

    // optional bytes CuserName = 3;
    if (has_cusername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cusername());
    }

    // optional uint32 AuserId = 4;
    if (has_auserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->auserid());
    }

    // optional bytes AuserName = 5;
    if (has_ausername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ausername());
    }

    // optional uint32 MissionId = 6;
    if (has_missionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->missionid());
    }

    // optional bytes MissionName = 7;
    if (has_missionname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->missionname());
    }

    // optional bytes No = 8;
    if (has_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->no());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes ActionType = 9;
    if (has_actiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->actiontype());
    }

    // optional bytes info = 10;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->info());
    }

    // optional bytes ActionPerson = 11;
    if (has_actionperson()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->actionperson());
    }

    // optional bytes ProtectPerson = 12;
    if (has_protectperson()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->protectperson());
    }

    // optional bytes ChargePerson = 13;
    if (has_chargeperson()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->chargeperson());
    }

    // optional bytes StartTime = 14;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->starttime());
    }

    // optional bytes EndTime = 15;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->endtime());
    }

    // optional bytes PublishTime = 16;
    if (has_publishtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->publishtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TicketBean::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TicketBean* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TicketBean*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TicketBean::MergeFrom(const TicketBean& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_cuserid()) {
      set_cuserid(from.cuserid());
    }
    if (from.has_cusername()) {
      set_cusername(from.cusername());
    }
    if (from.has_auserid()) {
      set_auserid(from.auserid());
    }
    if (from.has_ausername()) {
      set_ausername(from.ausername());
    }
    if (from.has_missionid()) {
      set_missionid(from.missionid());
    }
    if (from.has_missionname()) {
      set_missionname(from.missionname());
    }
    if (from.has_no()) {
      set_no(from.no());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_actiontype()) {
      set_actiontype(from.actiontype());
    }
    if (from.has_info()) {
      set_info(from.info());
    }
    if (from.has_actionperson()) {
      set_actionperson(from.actionperson());
    }
    if (from.has_protectperson()) {
      set_protectperson(from.protectperson());
    }
    if (from.has_chargeperson()) {
      set_chargeperson(from.chargeperson());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_publishtime()) {
      set_publishtime(from.publishtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TicketBean::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TicketBean::CopyFrom(const TicketBean& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TicketBean::IsInitialized() const {

  return true;
}

void TicketBean::Swap(TicketBean* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(cuserid_, other->cuserid_);
    std::swap(cusername_, other->cusername_);
    std::swap(auserid_, other->auserid_);
    std::swap(ausername_, other->ausername_);
    std::swap(missionid_, other->missionid_);
    std::swap(missionname_, other->missionname_);
    std::swap(no_, other->no_);
    std::swap(actiontype_, other->actiontype_);
    std::swap(info_, other->info_);
    std::swap(actionperson_, other->actionperson_);
    std::swap(protectperson_, other->protectperson_);
    std::swap(chargeperson_, other->chargeperson_);
    std::swap(starttime_, other->starttime_);
    std::swap(endtime_, other->endtime_);
    std::swap(publishtime_, other->publishtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TicketBean::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TicketBean_descriptor_;
  metadata.reflection = TicketBean_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TicketActBean::kTicketidFieldNumber;
const int TicketActBean::kOrderNumFieldNumber;
const int TicketActBean::kSystemContentFieldNumber;
const int TicketActBean::kContentFieldNumber;
#endif  // !_MSC_VER

TicketActBean::TicketActBean()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TicketActBean::InitAsDefaultInstance() {
}

TicketActBean::TicketActBean(const TicketActBean& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TicketActBean::SharedCtor() {
  _cached_size_ = 0;
  ticketid_ = 0u;
  ordernum_ = 0u;
  systemcontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TicketActBean::~TicketActBean() {
  SharedDtor();
}

void TicketActBean::SharedDtor() {
  if (systemcontent_ != &::google::protobuf::internal::kEmptyString) {
    delete systemcontent_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void TicketActBean::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TicketActBean::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TicketActBean_descriptor_;
}

const TicketActBean& TicketActBean::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbean_2eproto();
  return *default_instance_;
}

TicketActBean* TicketActBean::default_instance_ = NULL;

TicketActBean* TicketActBean::New() const {
  return new TicketActBean;
}

void TicketActBean::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ticketid_ = 0u;
    ordernum_ = 0u;
    if (has_systemcontent()) {
      if (systemcontent_ != &::google::protobuf::internal::kEmptyString) {
        systemcontent_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TicketActBean::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Ticketid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ticketid_)));
          set_has_ticketid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_OrderNum;
        break;
      }

      // optional uint32 OrderNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ordernum_)));
          set_has_ordernum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_SystemContent;
        break;
      }

      // optional bytes SystemContent = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SystemContent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_systemcontent()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Content;
        break;
      }

      // optional bytes Content = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TicketActBean::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 Ticketid = 1;
  if (has_ticketid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ticketid(), output);
  }

  // optional uint32 OrderNum = 2;
  if (has_ordernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ordernum(), output);
  }

  // optional bytes SystemContent = 3;
  if (has_systemcontent()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->systemcontent(), output);
  }

  // optional bytes Content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TicketActBean::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Ticketid = 1;
  if (has_ticketid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ticketid(), target);
  }

  // optional uint32 OrderNum = 2;
  if (has_ordernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ordernum(), target);
  }

  // optional bytes SystemContent = 3;
  if (has_systemcontent()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->systemcontent(), target);
  }

  // optional bytes Content = 4;
  if (has_content()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TicketActBean::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Ticketid = 1;
    if (has_ticketid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ticketid());
    }

    // optional uint32 OrderNum = 2;
    if (has_ordernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ordernum());
    }

    // optional bytes SystemContent = 3;
    if (has_systemcontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->systemcontent());
    }

    // optional bytes Content = 4;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TicketActBean::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TicketActBean* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TicketActBean*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TicketActBean::MergeFrom(const TicketActBean& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ticketid()) {
      set_ticketid(from.ticketid());
    }
    if (from.has_ordernum()) {
      set_ordernum(from.ordernum());
    }
    if (from.has_systemcontent()) {
      set_systemcontent(from.systemcontent());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TicketActBean::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TicketActBean::CopyFrom(const TicketActBean& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TicketActBean::IsInitialized() const {

  return true;
}

void TicketActBean::Swap(TicketActBean* other) {
  if (other != this) {
    std::swap(ticketid_, other->ticketid_);
    std::swap(ordernum_, other->ordernum_);
    std::swap(systemcontent_, other->systemcontent_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TicketActBean::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TicketActBean_descriptor_;
  metadata.reflection = TicketActBean_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace buff
}  // namespace spplus
}  // namespace com

// @@protoc_insertion_point(global_scope)
