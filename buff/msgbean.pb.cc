// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msgbean.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "msgbean.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace spplus {
namespace buff {

namespace {

const ::google::protobuf::Descriptor* UserBean_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserBean_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserRoleBean_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserRoleBean_reflection_ = NULL;
const ::google::protobuf::Descriptor* StationRuleBean_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StationRuleBean_reflection_ = NULL;
const ::google::protobuf::Descriptor* SignQueryBean_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SignQueryBean_reflection_ = NULL;
const ::google::protobuf::Descriptor* GswitchQueryBean_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GswitchQueryBean_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsetQueryBean_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsetQueryBean_reflection_ = NULL;
const ::google::protobuf::Descriptor* StateBean_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StateBean_reflection_ = NULL;
const ::google::protobuf::Descriptor* StationTypeBean_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StationTypeBean_reflection_ = NULL;
const ::google::protobuf::Descriptor* StationBean_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StationBean_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnitsBean_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnitsBean_reflection_ = NULL;
const ::google::protobuf::Descriptor* SavingBean_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SavingBean_reflection_ = NULL;
const ::google::protobuf::Descriptor* RuleBean_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RuleBean_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_msgbean_2eproto() {
  protobuf_AddDesc_msgbean_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "msgbean.proto");
  GOOGLE_CHECK(file != NULL);
  UserBean_descriptor_ = file->message_type(0);
  static const int UserBean_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBean, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBean, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBean, userpwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBean, userrole_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBean, rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBean, realname_),
  };
  UserBean_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserBean_descriptor_,
      UserBean::default_instance_,
      UserBean_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBean, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBean, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserBean));
  UserRoleBean_descriptor_ = file->message_type(1);
  static const int UserRoleBean_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRoleBean, userroleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRoleBean, userrolename_),
  };
  UserRoleBean_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserRoleBean_descriptor_,
      UserRoleBean::default_instance_,
      UserRoleBean_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRoleBean, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRoleBean, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserRoleBean));
  StationRuleBean_descriptor_ = file->message_type(2);
  static const int StationRuleBean_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationRuleBean, stationcim_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationRuleBean, stationname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationRuleBean, ruleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationRuleBean, rulename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationRuleBean, isuse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationRuleBean, isusename_),
  };
  StationRuleBean_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StationRuleBean_descriptor_,
      StationRuleBean::default_instance_,
      StationRuleBean_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationRuleBean, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationRuleBean, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StationRuleBean));
  SignQueryBean_descriptor_ = file->message_type(3);
  static const int SignQueryBean_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignQueryBean, unitcim_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignQueryBean, unitcimname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignQueryBean, stationcim_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignQueryBean, stationname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignQueryBean, unittype_),
  };
  SignQueryBean_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SignQueryBean_descriptor_,
      SignQueryBean::default_instance_,
      SignQueryBean_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignQueryBean, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignQueryBean, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SignQueryBean));
  GswitchQueryBean_descriptor_ = file->message_type(4);
  static const int GswitchQueryBean_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GswitchQueryBean, unitcim_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GswitchQueryBean, unitcimname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GswitchQueryBean, stationcim_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GswitchQueryBean, stationname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GswitchQueryBean, unittype_),
  };
  GswitchQueryBean_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GswitchQueryBean_descriptor_,
      GswitchQueryBean::default_instance_,
      GswitchQueryBean_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GswitchQueryBean, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GswitchQueryBean, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GswitchQueryBean));
  MsetQueryBean_descriptor_ = file->message_type(5);
  static const int MsetQueryBean_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsetQueryBean, unitcim_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsetQueryBean, unitcimname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsetQueryBean, stationcim_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsetQueryBean, stationname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsetQueryBean, unittype_),
  };
  MsetQueryBean_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsetQueryBean_descriptor_,
      MsetQueryBean::default_instance_,
      MsetQueryBean_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsetQueryBean, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsetQueryBean, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsetQueryBean));
  StateBean_descriptor_ = file->message_type(6);
  static const int StateBean_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateBean, cimid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateBean, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateBean, isboard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateBean, iselectric_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateBean, volvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateBean, unittype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateBean, stationcim_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateBean, ispower_),
  };
  StateBean_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StateBean_descriptor_,
      StateBean::default_instance_,
      StateBean_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateBean, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateBean, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StateBean));
  StationTypeBean_descriptor_ = file->message_type(7);
  static const int StationTypeBean_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationTypeBean, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationTypeBean, ordernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationTypeBean, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationTypeBean, stationlist_),
  };
  StationTypeBean_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StationTypeBean_descriptor_,
      StationTypeBean::default_instance_,
      StationTypeBean_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationTypeBean, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationTypeBean, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StationTypeBean));
  StationBean_descriptor_ = file->message_type(8);
  static const int StationBean_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationBean, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationBean, categoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationBean, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationBean, cimid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationBean, currentname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationBean, path_),
  };
  StationBean_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StationBean_descriptor_,
      StationBean::default_instance_,
      StationBean_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationBean, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationBean, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StationBean));
  UnitsBean_descriptor_ = file->message_type(9);
  static const int UnitsBean_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitsBean, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitsBean, stationid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitsBean, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitsBean, cimid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitsBean, volid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitsBean, unittype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitsBean, selftype_),
  };
  UnitsBean_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnitsBean_descriptor_,
      UnitsBean::default_instance_,
      UnitsBean_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitsBean, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitsBean, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnitsBean));
  SavingBean_descriptor_ = file->message_type(10);
  static const int SavingBean_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavingBean, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavingBean, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavingBean, savetime_),
  };
  SavingBean_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SavingBean_descriptor_,
      SavingBean::default_instance_,
      SavingBean_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavingBean, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavingBean, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SavingBean));
  RuleBean_descriptor_ = file->message_type(11);
  static const int RuleBean_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuleBean, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuleBean, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuleBean, alarmlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuleBean, description_),
  };
  RuleBean_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RuleBean_descriptor_,
      RuleBean::default_instance_,
      RuleBean_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuleBean, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuleBean, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RuleBean));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_msgbean_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserBean_descriptor_, &UserBean::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserRoleBean_descriptor_, &UserRoleBean::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StationRuleBean_descriptor_, &StationRuleBean::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SignQueryBean_descriptor_, &SignQueryBean::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GswitchQueryBean_descriptor_, &GswitchQueryBean::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsetQueryBean_descriptor_, &MsetQueryBean::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StateBean_descriptor_, &StateBean::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StationTypeBean_descriptor_, &StationTypeBean::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StationBean_descriptor_, &StationBean::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnitsBean_descriptor_, &UnitsBean::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SavingBean_descriptor_, &SavingBean::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RuleBean_descriptor_, &RuleBean::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_msgbean_2eproto() {
  delete UserBean::default_instance_;
  delete UserBean_reflection_;
  delete UserRoleBean::default_instance_;
  delete UserRoleBean_reflection_;
  delete StationRuleBean::default_instance_;
  delete StationRuleBean_reflection_;
  delete SignQueryBean::default_instance_;
  delete SignQueryBean_reflection_;
  delete GswitchQueryBean::default_instance_;
  delete GswitchQueryBean_reflection_;
  delete MsetQueryBean::default_instance_;
  delete MsetQueryBean_reflection_;
  delete StateBean::default_instance_;
  delete StateBean_reflection_;
  delete StationTypeBean::default_instance_;
  delete StationTypeBean_reflection_;
  delete StationBean::default_instance_;
  delete StationBean_reflection_;
  delete UnitsBean::default_instance_;
  delete UnitsBean_reflection_;
  delete SavingBean::default_instance_;
  delete SavingBean_reflection_;
  delete RuleBean::default_instance_;
  delete RuleBean_reflection_;
}

void protobuf_AddDesc_msgbean_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rmsgbean.proto\022\017com.spplus.buff\"s\n\010User"
    "Bean\022\016\n\006userid\030\001 \001(\014\022\020\n\010username\030\002 \001(\014\022\017"
    "\n\007userpwd\030\003 \001(\014\022\020\n\010userrole\030\004 \001(\014\022\020\n\010rol"
    "ename\030\005 \001(\014\022\020\n\010realname\030\006 \001(\014\"8\n\014UserRol"
    "eBean\022\022\n\nuserroleid\030\001 \001(\014\022\024\n\014userrolenam"
    "e\030\002 \001(\014\"~\n\017StationRuleBean\022\022\n\nstationCim"
    "\030\001 \001(\014\022\023\n\013stationName\030\002 \001(\014\022\016\n\006ruleId\030\003 "
    "\001(\r\022\020\n\010ruleName\030\004 \001(\014\022\r\n\005isUse\030\005 \001(\014\022\021\n\t"
    "isUseName\030\006 \001(\014\"p\n\rSignQueryBean\022\017\n\007unit"
    "Cim\030\001 \001(\014\022\023\n\013unitCimName\030\002 \001(\014\022\022\n\nstatio"
    "nCim\030\003 \001(\014\022\023\n\013stationName\030\004 \001(\014\022\020\n\010unitT"
    "ype\030\005 \001(\014\"s\n\020GswitchQueryBean\022\017\n\007unitCim"
    "\030\001 \001(\014\022\023\n\013unitCimName\030\002 \001(\014\022\022\n\nstationCi"
    "m\030\003 \001(\014\022\023\n\013stationName\030\004 \001(\014\022\020\n\010unitType"
    "\030\005 \001(\014\"p\n\rMsetQueryBean\022\017\n\007unitCim\030\001 \001(\014"
    "\022\023\n\013unitCimName\030\002 \001(\014\022\022\n\nstationCim\030\003 \001("
    "\014\022\023\n\013stationName\030\004 \001(\014\022\020\n\010unitType\030\005 \001(\014"
    "\"\227\001\n\tStateBean\022\r\n\005cimId\030\001 \001(\014\022\r\n\005state\030\002"
    " \001(\r\022\017\n\007isBoard\030\003 \001(\r\022\022\n\nisElectric\030\004 \001("
    "\r\022\020\n\010volValue\030\005 \001(\014\022\020\n\010unitType\030\006 \001(\r\022\022\n"
    "\nstationCim\030\007 \001(\014\022\017\n\007isPower\030\010 \001(\r\"p\n\017St"
    "ationTypeBean\022\n\n\002Id\030\001 \001(\r\022\020\n\010ordernum\030\002 "
    "\001(\r\022\014\n\004Name\030\003 \001(\014\0221\n\013StationList\030\004 \003(\0132\034"
    ".com.spplus.buff.StationBean\"m\n\013StationB"
    "ean\022\n\n\002Id\030\001 \001(\r\022\022\n\nCategoryId\030\002 \001(\r\022\014\n\004N"
    "ame\030\003 \001(\014\022\r\n\005CimId\030\004 \001(\014\022\023\n\013CurrentName\030"
    "\005 \001(\014\022\014\n\004Path\030\006 \001(\014\"z\n\tUnitsBean\022\n\n\002Id\030\001"
    " \001(\r\022\021\n\tStationId\030\002 \001(\r\022\014\n\004Name\030\003 \001(\014\022\r\n"
    "\005CimId\030\004 \001(\014\022\r\n\005VolId\030\005 \001(\014\022\020\n\010UnitType\030"
    "\006 \001(\014\022\020\n\010SelfType\030\007 \001(\014\"8\n\nSavingBean\022\n\n"
    "\002Id\030\001 \001(\r\022\014\n\004Name\030\002 \001(\014\022\020\n\010SaveTime\030\003 \001("
    "\014\"M\n\010RuleBean\022\n\n\002Id\030\001 \001(\r\022\014\n\004Name\030\002 \001(\014\022"
    "\022\n\nAlarmLevel\030\003 \001(\014\022\023\n\013Description\030\004 \001(\014", 1320);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "msgbean.proto", &protobuf_RegisterTypes);
  UserBean::default_instance_ = new UserBean();
  UserRoleBean::default_instance_ = new UserRoleBean();
  StationRuleBean::default_instance_ = new StationRuleBean();
  SignQueryBean::default_instance_ = new SignQueryBean();
  GswitchQueryBean::default_instance_ = new GswitchQueryBean();
  MsetQueryBean::default_instance_ = new MsetQueryBean();
  StateBean::default_instance_ = new StateBean();
  StationTypeBean::default_instance_ = new StationTypeBean();
  StationBean::default_instance_ = new StationBean();
  UnitsBean::default_instance_ = new UnitsBean();
  SavingBean::default_instance_ = new SavingBean();
  RuleBean::default_instance_ = new RuleBean();
  UserBean::default_instance_->InitAsDefaultInstance();
  UserRoleBean::default_instance_->InitAsDefaultInstance();
  StationRuleBean::default_instance_->InitAsDefaultInstance();
  SignQueryBean::default_instance_->InitAsDefaultInstance();
  GswitchQueryBean::default_instance_->InitAsDefaultInstance();
  MsetQueryBean::default_instance_->InitAsDefaultInstance();
  StateBean::default_instance_->InitAsDefaultInstance();
  StationTypeBean::default_instance_->InitAsDefaultInstance();
  StationBean::default_instance_->InitAsDefaultInstance();
  UnitsBean::default_instance_->InitAsDefaultInstance();
  SavingBean::default_instance_->InitAsDefaultInstance();
  RuleBean::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_msgbean_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_msgbean_2eproto {
  StaticDescriptorInitializer_msgbean_2eproto() {
    protobuf_AddDesc_msgbean_2eproto();
  }
} static_descriptor_initializer_msgbean_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int UserBean::kUseridFieldNumber;
const int UserBean::kUsernameFieldNumber;
const int UserBean::kUserpwdFieldNumber;
const int UserBean::kUserroleFieldNumber;
const int UserBean::kRolenameFieldNumber;
const int UserBean::kRealnameFieldNumber;
#endif  // !_MSC_VER

UserBean::UserBean()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserBean::InitAsDefaultInstance() {
}

UserBean::UserBean(const UserBean& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserBean::SharedCtor() {
  _cached_size_ = 0;
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userpwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userrole_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  realname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserBean::~UserBean() {
  SharedDtor();
}

void UserBean::SharedDtor() {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (userpwd_ != &::google::protobuf::internal::kEmptyString) {
    delete userpwd_;
  }
  if (userrole_ != &::google::protobuf::internal::kEmptyString) {
    delete userrole_;
  }
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (realname_ != &::google::protobuf::internal::kEmptyString) {
    delete realname_;
  }
  if (this != default_instance_) {
  }
}

void UserBean::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserBean::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserBean_descriptor_;
}

const UserBean& UserBean::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbean_2eproto();
  return *default_instance_;
}

UserBean* UserBean::default_instance_ = NULL;

UserBean* UserBean::New() const {
  return new UserBean;
}

void UserBean::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    if (has_userpwd()) {
      if (userpwd_ != &::google::protobuf::internal::kEmptyString) {
        userpwd_->clear();
      }
    }
    if (has_userrole()) {
      if (userrole_ != &::google::protobuf::internal::kEmptyString) {
        userrole_->clear();
      }
    }
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
    if (has_realname()) {
      if (realname_ != &::google::protobuf::internal::kEmptyString) {
        realname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserBean::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_userid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_username;
        break;
      }

      // optional bytes username = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_username()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_userpwd;
        break;
      }

      // optional bytes userpwd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userpwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_userpwd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_userrole;
        break;
      }

      // optional bytes userrole = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userrole:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_userrole()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_rolename;
        break;
      }

      // optional bytes rolename = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rolename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_rolename()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_realname;
        break;
      }

      // optional bytes realname = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_realname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_realname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserBean::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->userid(), output);
  }

  // optional bytes username = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->username(), output);
  }

  // optional bytes userpwd = 3;
  if (has_userpwd()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->userpwd(), output);
  }

  // optional bytes userrole = 4;
  if (has_userrole()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->userrole(), output);
  }

  // optional bytes rolename = 5;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->rolename(), output);
  }

  // optional bytes realname = 6;
  if (has_realname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->realname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserBean::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes userid = 1;
  if (has_userid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->userid(), target);
  }

  // optional bytes username = 2;
  if (has_username()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->username(), target);
  }

  // optional bytes userpwd = 3;
  if (has_userpwd()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->userpwd(), target);
  }

  // optional bytes userrole = 4;
  if (has_userrole()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->userrole(), target);
  }

  // optional bytes rolename = 5;
  if (has_rolename()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->rolename(), target);
  }

  // optional bytes realname = 6;
  if (has_realname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->realname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserBean::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->userid());
    }

    // optional bytes username = 2;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->username());
    }

    // optional bytes userpwd = 3;
    if (has_userpwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->userpwd());
    }

    // optional bytes userrole = 4;
    if (has_userrole()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->userrole());
    }

    // optional bytes rolename = 5;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->rolename());
    }

    // optional bytes realname = 6;
    if (has_realname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->realname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserBean::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserBean* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserBean*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserBean::MergeFrom(const UserBean& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_userpwd()) {
      set_userpwd(from.userpwd());
    }
    if (from.has_userrole()) {
      set_userrole(from.userrole());
    }
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
    if (from.has_realname()) {
      set_realname(from.realname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserBean::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserBean::CopyFrom(const UserBean& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserBean::IsInitialized() const {

  return true;
}

void UserBean::Swap(UserBean* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(username_, other->username_);
    std::swap(userpwd_, other->userpwd_);
    std::swap(userrole_, other->userrole_);
    std::swap(rolename_, other->rolename_);
    std::swap(realname_, other->realname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserBean::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserBean_descriptor_;
  metadata.reflection = UserBean_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserRoleBean::kUserroleidFieldNumber;
const int UserRoleBean::kUserrolenameFieldNumber;
#endif  // !_MSC_VER

UserRoleBean::UserRoleBean()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserRoleBean::InitAsDefaultInstance() {
}

UserRoleBean::UserRoleBean(const UserRoleBean& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserRoleBean::SharedCtor() {
  _cached_size_ = 0;
  userroleid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userrolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserRoleBean::~UserRoleBean() {
  SharedDtor();
}

void UserRoleBean::SharedDtor() {
  if (userroleid_ != &::google::protobuf::internal::kEmptyString) {
    delete userroleid_;
  }
  if (userrolename_ != &::google::protobuf::internal::kEmptyString) {
    delete userrolename_;
  }
  if (this != default_instance_) {
  }
}

void UserRoleBean::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserRoleBean::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserRoleBean_descriptor_;
}

const UserRoleBean& UserRoleBean::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbean_2eproto();
  return *default_instance_;
}

UserRoleBean* UserRoleBean::default_instance_ = NULL;

UserRoleBean* UserRoleBean::New() const {
  return new UserRoleBean;
}

void UserRoleBean::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_userroleid()) {
      if (userroleid_ != &::google::protobuf::internal::kEmptyString) {
        userroleid_->clear();
      }
    }
    if (has_userrolename()) {
      if (userrolename_ != &::google::protobuf::internal::kEmptyString) {
        userrolename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserRoleBean::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes userroleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_userroleid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_userrolename;
        break;
      }

      // optional bytes userrolename = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userrolename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_userrolename()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserRoleBean::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes userroleid = 1;
  if (has_userroleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->userroleid(), output);
  }

  // optional bytes userrolename = 2;
  if (has_userrolename()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->userrolename(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserRoleBean::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes userroleid = 1;
  if (has_userroleid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->userroleid(), target);
  }

  // optional bytes userrolename = 2;
  if (has_userrolename()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->userrolename(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserRoleBean::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes userroleid = 1;
    if (has_userroleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->userroleid());
    }

    // optional bytes userrolename = 2;
    if (has_userrolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->userrolename());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserRoleBean::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserRoleBean* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserRoleBean*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserRoleBean::MergeFrom(const UserRoleBean& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userroleid()) {
      set_userroleid(from.userroleid());
    }
    if (from.has_userrolename()) {
      set_userrolename(from.userrolename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserRoleBean::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserRoleBean::CopyFrom(const UserRoleBean& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserRoleBean::IsInitialized() const {

  return true;
}

void UserRoleBean::Swap(UserRoleBean* other) {
  if (other != this) {
    std::swap(userroleid_, other->userroleid_);
    std::swap(userrolename_, other->userrolename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserRoleBean::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserRoleBean_descriptor_;
  metadata.reflection = UserRoleBean_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StationRuleBean::kStationCimFieldNumber;
const int StationRuleBean::kStationNameFieldNumber;
const int StationRuleBean::kRuleIdFieldNumber;
const int StationRuleBean::kRuleNameFieldNumber;
const int StationRuleBean::kIsUseFieldNumber;
const int StationRuleBean::kIsUseNameFieldNumber;
#endif  // !_MSC_VER

StationRuleBean::StationRuleBean()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StationRuleBean::InitAsDefaultInstance() {
}

StationRuleBean::StationRuleBean(const StationRuleBean& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StationRuleBean::SharedCtor() {
  _cached_size_ = 0;
  stationcim_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  stationname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ruleid_ = 0u;
  rulename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isuse_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isusename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StationRuleBean::~StationRuleBean() {
  SharedDtor();
}

void StationRuleBean::SharedDtor() {
  if (stationcim_ != &::google::protobuf::internal::kEmptyString) {
    delete stationcim_;
  }
  if (stationname_ != &::google::protobuf::internal::kEmptyString) {
    delete stationname_;
  }
  if (rulename_ != &::google::protobuf::internal::kEmptyString) {
    delete rulename_;
  }
  if (isuse_ != &::google::protobuf::internal::kEmptyString) {
    delete isuse_;
  }
  if (isusename_ != &::google::protobuf::internal::kEmptyString) {
    delete isusename_;
  }
  if (this != default_instance_) {
  }
}

void StationRuleBean::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StationRuleBean::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StationRuleBean_descriptor_;
}

const StationRuleBean& StationRuleBean::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbean_2eproto();
  return *default_instance_;
}

StationRuleBean* StationRuleBean::default_instance_ = NULL;

StationRuleBean* StationRuleBean::New() const {
  return new StationRuleBean;
}

void StationRuleBean::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_stationcim()) {
      if (stationcim_ != &::google::protobuf::internal::kEmptyString) {
        stationcim_->clear();
      }
    }
    if (has_stationname()) {
      if (stationname_ != &::google::protobuf::internal::kEmptyString) {
        stationname_->clear();
      }
    }
    ruleid_ = 0u;
    if (has_rulename()) {
      if (rulename_ != &::google::protobuf::internal::kEmptyString) {
        rulename_->clear();
      }
    }
    if (has_isuse()) {
      if (isuse_ != &::google::protobuf::internal::kEmptyString) {
        isuse_->clear();
      }
    }
    if (has_isusename()) {
      if (isusename_ != &::google::protobuf::internal::kEmptyString) {
        isusename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StationRuleBean::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes stationCim = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_stationcim()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stationName;
        break;
      }

      // optional bytes stationName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stationName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_stationname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ruleId;
        break;
      }

      // optional uint32 ruleId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ruleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ruleid_)));
          set_has_ruleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ruleName;
        break;
      }

      // optional bytes ruleName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ruleName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_rulename()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_isUse;
        break;
      }

      // optional bytes isUse = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_isUse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_isuse()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_isUseName;
        break;
      }

      // optional bytes isUseName = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_isUseName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_isusename()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StationRuleBean::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes stationCim = 1;
  if (has_stationcim()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->stationcim(), output);
  }

  // optional bytes stationName = 2;
  if (has_stationname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->stationname(), output);
  }

  // optional uint32 ruleId = 3;
  if (has_ruleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ruleid(), output);
  }

  // optional bytes ruleName = 4;
  if (has_rulename()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->rulename(), output);
  }

  // optional bytes isUse = 5;
  if (has_isuse()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->isuse(), output);
  }

  // optional bytes isUseName = 6;
  if (has_isusename()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->isusename(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StationRuleBean::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes stationCim = 1;
  if (has_stationcim()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->stationcim(), target);
  }

  // optional bytes stationName = 2;
  if (has_stationname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->stationname(), target);
  }

  // optional uint32 ruleId = 3;
  if (has_ruleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ruleid(), target);
  }

  // optional bytes ruleName = 4;
  if (has_rulename()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->rulename(), target);
  }

  // optional bytes isUse = 5;
  if (has_isuse()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->isuse(), target);
  }

  // optional bytes isUseName = 6;
  if (has_isusename()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->isusename(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StationRuleBean::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes stationCim = 1;
    if (has_stationcim()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->stationcim());
    }

    // optional bytes stationName = 2;
    if (has_stationname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->stationname());
    }

    // optional uint32 ruleId = 3;
    if (has_ruleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ruleid());
    }

    // optional bytes ruleName = 4;
    if (has_rulename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->rulename());
    }

    // optional bytes isUse = 5;
    if (has_isuse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->isuse());
    }

    // optional bytes isUseName = 6;
    if (has_isusename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->isusename());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StationRuleBean::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StationRuleBean* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StationRuleBean*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StationRuleBean::MergeFrom(const StationRuleBean& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stationcim()) {
      set_stationcim(from.stationcim());
    }
    if (from.has_stationname()) {
      set_stationname(from.stationname());
    }
    if (from.has_ruleid()) {
      set_ruleid(from.ruleid());
    }
    if (from.has_rulename()) {
      set_rulename(from.rulename());
    }
    if (from.has_isuse()) {
      set_isuse(from.isuse());
    }
    if (from.has_isusename()) {
      set_isusename(from.isusename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StationRuleBean::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StationRuleBean::CopyFrom(const StationRuleBean& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StationRuleBean::IsInitialized() const {

  return true;
}

void StationRuleBean::Swap(StationRuleBean* other) {
  if (other != this) {
    std::swap(stationcim_, other->stationcim_);
    std::swap(stationname_, other->stationname_);
    std::swap(ruleid_, other->ruleid_);
    std::swap(rulename_, other->rulename_);
    std::swap(isuse_, other->isuse_);
    std::swap(isusename_, other->isusename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StationRuleBean::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StationRuleBean_descriptor_;
  metadata.reflection = StationRuleBean_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SignQueryBean::kUnitCimFieldNumber;
const int SignQueryBean::kUnitCimNameFieldNumber;
const int SignQueryBean::kStationCimFieldNumber;
const int SignQueryBean::kStationNameFieldNumber;
const int SignQueryBean::kUnitTypeFieldNumber;
#endif  // !_MSC_VER

SignQueryBean::SignQueryBean()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SignQueryBean::InitAsDefaultInstance() {
}

SignQueryBean::SignQueryBean(const SignQueryBean& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SignQueryBean::SharedCtor() {
  _cached_size_ = 0;
  unitcim_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  unitcimname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  stationcim_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  stationname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  unittype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SignQueryBean::~SignQueryBean() {
  SharedDtor();
}

void SignQueryBean::SharedDtor() {
  if (unitcim_ != &::google::protobuf::internal::kEmptyString) {
    delete unitcim_;
  }
  if (unitcimname_ != &::google::protobuf::internal::kEmptyString) {
    delete unitcimname_;
  }
  if (stationcim_ != &::google::protobuf::internal::kEmptyString) {
    delete stationcim_;
  }
  if (stationname_ != &::google::protobuf::internal::kEmptyString) {
    delete stationname_;
  }
  if (unittype_ != &::google::protobuf::internal::kEmptyString) {
    delete unittype_;
  }
  if (this != default_instance_) {
  }
}

void SignQueryBean::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignQueryBean::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignQueryBean_descriptor_;
}

const SignQueryBean& SignQueryBean::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbean_2eproto();
  return *default_instance_;
}

SignQueryBean* SignQueryBean::default_instance_ = NULL;

SignQueryBean* SignQueryBean::New() const {
  return new SignQueryBean;
}

void SignQueryBean::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_unitcim()) {
      if (unitcim_ != &::google::protobuf::internal::kEmptyString) {
        unitcim_->clear();
      }
    }
    if (has_unitcimname()) {
      if (unitcimname_ != &::google::protobuf::internal::kEmptyString) {
        unitcimname_->clear();
      }
    }
    if (has_stationcim()) {
      if (stationcim_ != &::google::protobuf::internal::kEmptyString) {
        stationcim_->clear();
      }
    }
    if (has_stationname()) {
      if (stationname_ != &::google::protobuf::internal::kEmptyString) {
        stationname_->clear();
      }
    }
    if (has_unittype()) {
      if (unittype_ != &::google::protobuf::internal::kEmptyString) {
        unittype_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SignQueryBean::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes unitCim = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_unitcim()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_unitCimName;
        break;
      }

      // optional bytes unitCimName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unitCimName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_unitcimname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stationCim;
        break;
      }

      // optional bytes stationCim = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stationCim:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_stationcim()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_stationName;
        break;
      }

      // optional bytes stationName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stationName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_stationname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_unitType;
        break;
      }

      // optional bytes unitType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unitType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_unittype()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SignQueryBean::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes unitCim = 1;
  if (has_unitcim()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->unitcim(), output);
  }

  // optional bytes unitCimName = 2;
  if (has_unitcimname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->unitcimname(), output);
  }

  // optional bytes stationCim = 3;
  if (has_stationcim()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->stationcim(), output);
  }

  // optional bytes stationName = 4;
  if (has_stationname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->stationname(), output);
  }

  // optional bytes unitType = 5;
  if (has_unittype()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->unittype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SignQueryBean::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes unitCim = 1;
  if (has_unitcim()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->unitcim(), target);
  }

  // optional bytes unitCimName = 2;
  if (has_unitcimname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->unitcimname(), target);
  }

  // optional bytes stationCim = 3;
  if (has_stationcim()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->stationcim(), target);
  }

  // optional bytes stationName = 4;
  if (has_stationname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->stationname(), target);
  }

  // optional bytes unitType = 5;
  if (has_unittype()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->unittype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SignQueryBean::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes unitCim = 1;
    if (has_unitcim()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->unitcim());
    }

    // optional bytes unitCimName = 2;
    if (has_unitcimname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->unitcimname());
    }

    // optional bytes stationCim = 3;
    if (has_stationcim()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->stationcim());
    }

    // optional bytes stationName = 4;
    if (has_stationname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->stationname());
    }

    // optional bytes unitType = 5;
    if (has_unittype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->unittype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignQueryBean::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SignQueryBean* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SignQueryBean*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SignQueryBean::MergeFrom(const SignQueryBean& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unitcim()) {
      set_unitcim(from.unitcim());
    }
    if (from.has_unitcimname()) {
      set_unitcimname(from.unitcimname());
    }
    if (from.has_stationcim()) {
      set_stationcim(from.stationcim());
    }
    if (from.has_stationname()) {
      set_stationname(from.stationname());
    }
    if (from.has_unittype()) {
      set_unittype(from.unittype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SignQueryBean::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignQueryBean::CopyFrom(const SignQueryBean& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignQueryBean::IsInitialized() const {

  return true;
}

void SignQueryBean::Swap(SignQueryBean* other) {
  if (other != this) {
    std::swap(unitcim_, other->unitcim_);
    std::swap(unitcimname_, other->unitcimname_);
    std::swap(stationcim_, other->stationcim_);
    std::swap(stationname_, other->stationname_);
    std::swap(unittype_, other->unittype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SignQueryBean::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SignQueryBean_descriptor_;
  metadata.reflection = SignQueryBean_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GswitchQueryBean::kUnitCimFieldNumber;
const int GswitchQueryBean::kUnitCimNameFieldNumber;
const int GswitchQueryBean::kStationCimFieldNumber;
const int GswitchQueryBean::kStationNameFieldNumber;
const int GswitchQueryBean::kUnitTypeFieldNumber;
#endif  // !_MSC_VER

GswitchQueryBean::GswitchQueryBean()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GswitchQueryBean::InitAsDefaultInstance() {
}

GswitchQueryBean::GswitchQueryBean(const GswitchQueryBean& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GswitchQueryBean::SharedCtor() {
  _cached_size_ = 0;
  unitcim_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  unitcimname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  stationcim_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  stationname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  unittype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GswitchQueryBean::~GswitchQueryBean() {
  SharedDtor();
}

void GswitchQueryBean::SharedDtor() {
  if (unitcim_ != &::google::protobuf::internal::kEmptyString) {
    delete unitcim_;
  }
  if (unitcimname_ != &::google::protobuf::internal::kEmptyString) {
    delete unitcimname_;
  }
  if (stationcim_ != &::google::protobuf::internal::kEmptyString) {
    delete stationcim_;
  }
  if (stationname_ != &::google::protobuf::internal::kEmptyString) {
    delete stationname_;
  }
  if (unittype_ != &::google::protobuf::internal::kEmptyString) {
    delete unittype_;
  }
  if (this != default_instance_) {
  }
}

void GswitchQueryBean::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GswitchQueryBean::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GswitchQueryBean_descriptor_;
}

const GswitchQueryBean& GswitchQueryBean::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbean_2eproto();
  return *default_instance_;
}

GswitchQueryBean* GswitchQueryBean::default_instance_ = NULL;

GswitchQueryBean* GswitchQueryBean::New() const {
  return new GswitchQueryBean;
}

void GswitchQueryBean::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_unitcim()) {
      if (unitcim_ != &::google::protobuf::internal::kEmptyString) {
        unitcim_->clear();
      }
    }
    if (has_unitcimname()) {
      if (unitcimname_ != &::google::protobuf::internal::kEmptyString) {
        unitcimname_->clear();
      }
    }
    if (has_stationcim()) {
      if (stationcim_ != &::google::protobuf::internal::kEmptyString) {
        stationcim_->clear();
      }
    }
    if (has_stationname()) {
      if (stationname_ != &::google::protobuf::internal::kEmptyString) {
        stationname_->clear();
      }
    }
    if (has_unittype()) {
      if (unittype_ != &::google::protobuf::internal::kEmptyString) {
        unittype_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GswitchQueryBean::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes unitCim = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_unitcim()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_unitCimName;
        break;
      }

      // optional bytes unitCimName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unitCimName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_unitcimname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stationCim;
        break;
      }

      // optional bytes stationCim = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stationCim:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_stationcim()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_stationName;
        break;
      }

      // optional bytes stationName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stationName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_stationname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_unitType;
        break;
      }

      // optional bytes unitType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unitType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_unittype()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GswitchQueryBean::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes unitCim = 1;
  if (has_unitcim()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->unitcim(), output);
  }

  // optional bytes unitCimName = 2;
  if (has_unitcimname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->unitcimname(), output);
  }

  // optional bytes stationCim = 3;
  if (has_stationcim()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->stationcim(), output);
  }

  // optional bytes stationName = 4;
  if (has_stationname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->stationname(), output);
  }

  // optional bytes unitType = 5;
  if (has_unittype()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->unittype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GswitchQueryBean::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes unitCim = 1;
  if (has_unitcim()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->unitcim(), target);
  }

  // optional bytes unitCimName = 2;
  if (has_unitcimname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->unitcimname(), target);
  }

  // optional bytes stationCim = 3;
  if (has_stationcim()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->stationcim(), target);
  }

  // optional bytes stationName = 4;
  if (has_stationname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->stationname(), target);
  }

  // optional bytes unitType = 5;
  if (has_unittype()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->unittype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GswitchQueryBean::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes unitCim = 1;
    if (has_unitcim()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->unitcim());
    }

    // optional bytes unitCimName = 2;
    if (has_unitcimname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->unitcimname());
    }

    // optional bytes stationCim = 3;
    if (has_stationcim()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->stationcim());
    }

    // optional bytes stationName = 4;
    if (has_stationname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->stationname());
    }

    // optional bytes unitType = 5;
    if (has_unittype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->unittype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GswitchQueryBean::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GswitchQueryBean* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GswitchQueryBean*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GswitchQueryBean::MergeFrom(const GswitchQueryBean& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unitcim()) {
      set_unitcim(from.unitcim());
    }
    if (from.has_unitcimname()) {
      set_unitcimname(from.unitcimname());
    }
    if (from.has_stationcim()) {
      set_stationcim(from.stationcim());
    }
    if (from.has_stationname()) {
      set_stationname(from.stationname());
    }
    if (from.has_unittype()) {
      set_unittype(from.unittype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GswitchQueryBean::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GswitchQueryBean::CopyFrom(const GswitchQueryBean& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GswitchQueryBean::IsInitialized() const {

  return true;
}

void GswitchQueryBean::Swap(GswitchQueryBean* other) {
  if (other != this) {
    std::swap(unitcim_, other->unitcim_);
    std::swap(unitcimname_, other->unitcimname_);
    std::swap(stationcim_, other->stationcim_);
    std::swap(stationname_, other->stationname_);
    std::swap(unittype_, other->unittype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GswitchQueryBean::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GswitchQueryBean_descriptor_;
  metadata.reflection = GswitchQueryBean_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsetQueryBean::kUnitCimFieldNumber;
const int MsetQueryBean::kUnitCimNameFieldNumber;
const int MsetQueryBean::kStationCimFieldNumber;
const int MsetQueryBean::kStationNameFieldNumber;
const int MsetQueryBean::kUnitTypeFieldNumber;
#endif  // !_MSC_VER

MsetQueryBean::MsetQueryBean()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsetQueryBean::InitAsDefaultInstance() {
}

MsetQueryBean::MsetQueryBean(const MsetQueryBean& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsetQueryBean::SharedCtor() {
  _cached_size_ = 0;
  unitcim_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  unitcimname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  stationcim_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  stationname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  unittype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsetQueryBean::~MsetQueryBean() {
  SharedDtor();
}

void MsetQueryBean::SharedDtor() {
  if (unitcim_ != &::google::protobuf::internal::kEmptyString) {
    delete unitcim_;
  }
  if (unitcimname_ != &::google::protobuf::internal::kEmptyString) {
    delete unitcimname_;
  }
  if (stationcim_ != &::google::protobuf::internal::kEmptyString) {
    delete stationcim_;
  }
  if (stationname_ != &::google::protobuf::internal::kEmptyString) {
    delete stationname_;
  }
  if (unittype_ != &::google::protobuf::internal::kEmptyString) {
    delete unittype_;
  }
  if (this != default_instance_) {
  }
}

void MsetQueryBean::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsetQueryBean::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsetQueryBean_descriptor_;
}

const MsetQueryBean& MsetQueryBean::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbean_2eproto();
  return *default_instance_;
}

MsetQueryBean* MsetQueryBean::default_instance_ = NULL;

MsetQueryBean* MsetQueryBean::New() const {
  return new MsetQueryBean;
}

void MsetQueryBean::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_unitcim()) {
      if (unitcim_ != &::google::protobuf::internal::kEmptyString) {
        unitcim_->clear();
      }
    }
    if (has_unitcimname()) {
      if (unitcimname_ != &::google::protobuf::internal::kEmptyString) {
        unitcimname_->clear();
      }
    }
    if (has_stationcim()) {
      if (stationcim_ != &::google::protobuf::internal::kEmptyString) {
        stationcim_->clear();
      }
    }
    if (has_stationname()) {
      if (stationname_ != &::google::protobuf::internal::kEmptyString) {
        stationname_->clear();
      }
    }
    if (has_unittype()) {
      if (unittype_ != &::google::protobuf::internal::kEmptyString) {
        unittype_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsetQueryBean::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes unitCim = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_unitcim()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_unitCimName;
        break;
      }

      // optional bytes unitCimName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unitCimName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_unitcimname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stationCim;
        break;
      }

      // optional bytes stationCim = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stationCim:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_stationcim()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_stationName;
        break;
      }

      // optional bytes stationName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stationName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_stationname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_unitType;
        break;
      }

      // optional bytes unitType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unitType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_unittype()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsetQueryBean::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes unitCim = 1;
  if (has_unitcim()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->unitcim(), output);
  }

  // optional bytes unitCimName = 2;
  if (has_unitcimname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->unitcimname(), output);
  }

  // optional bytes stationCim = 3;
  if (has_stationcim()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->stationcim(), output);
  }

  // optional bytes stationName = 4;
  if (has_stationname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->stationname(), output);
  }

  // optional bytes unitType = 5;
  if (has_unittype()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->unittype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsetQueryBean::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes unitCim = 1;
  if (has_unitcim()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->unitcim(), target);
  }

  // optional bytes unitCimName = 2;
  if (has_unitcimname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->unitcimname(), target);
  }

  // optional bytes stationCim = 3;
  if (has_stationcim()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->stationcim(), target);
  }

  // optional bytes stationName = 4;
  if (has_stationname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->stationname(), target);
  }

  // optional bytes unitType = 5;
  if (has_unittype()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->unittype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsetQueryBean::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes unitCim = 1;
    if (has_unitcim()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->unitcim());
    }

    // optional bytes unitCimName = 2;
    if (has_unitcimname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->unitcimname());
    }

    // optional bytes stationCim = 3;
    if (has_stationcim()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->stationcim());
    }

    // optional bytes stationName = 4;
    if (has_stationname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->stationname());
    }

    // optional bytes unitType = 5;
    if (has_unittype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->unittype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsetQueryBean::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsetQueryBean* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsetQueryBean*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsetQueryBean::MergeFrom(const MsetQueryBean& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unitcim()) {
      set_unitcim(from.unitcim());
    }
    if (from.has_unitcimname()) {
      set_unitcimname(from.unitcimname());
    }
    if (from.has_stationcim()) {
      set_stationcim(from.stationcim());
    }
    if (from.has_stationname()) {
      set_stationname(from.stationname());
    }
    if (from.has_unittype()) {
      set_unittype(from.unittype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsetQueryBean::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsetQueryBean::CopyFrom(const MsetQueryBean& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsetQueryBean::IsInitialized() const {

  return true;
}

void MsetQueryBean::Swap(MsetQueryBean* other) {
  if (other != this) {
    std::swap(unitcim_, other->unitcim_);
    std::swap(unitcimname_, other->unitcimname_);
    std::swap(stationcim_, other->stationcim_);
    std::swap(stationname_, other->stationname_);
    std::swap(unittype_, other->unittype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsetQueryBean::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsetQueryBean_descriptor_;
  metadata.reflection = MsetQueryBean_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StateBean::kCimIdFieldNumber;
const int StateBean::kStateFieldNumber;
const int StateBean::kIsBoardFieldNumber;
const int StateBean::kIsElectricFieldNumber;
const int StateBean::kVolValueFieldNumber;
const int StateBean::kUnitTypeFieldNumber;
const int StateBean::kStationCimFieldNumber;
const int StateBean::kIsPowerFieldNumber;
#endif  // !_MSC_VER

StateBean::StateBean()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StateBean::InitAsDefaultInstance() {
}

StateBean::StateBean(const StateBean& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StateBean::SharedCtor() {
  _cached_size_ = 0;
  cimid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  state_ = 0u;
  isboard_ = 0u;
  iselectric_ = 0u;
  volvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  unittype_ = 0u;
  stationcim_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ispower_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StateBean::~StateBean() {
  SharedDtor();
}

void StateBean::SharedDtor() {
  if (cimid_ != &::google::protobuf::internal::kEmptyString) {
    delete cimid_;
  }
  if (volvalue_ != &::google::protobuf::internal::kEmptyString) {
    delete volvalue_;
  }
  if (stationcim_ != &::google::protobuf::internal::kEmptyString) {
    delete stationcim_;
  }
  if (this != default_instance_) {
  }
}

void StateBean::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StateBean::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StateBean_descriptor_;
}

const StateBean& StateBean::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbean_2eproto();
  return *default_instance_;
}

StateBean* StateBean::default_instance_ = NULL;

StateBean* StateBean::New() const {
  return new StateBean;
}

void StateBean::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cimid()) {
      if (cimid_ != &::google::protobuf::internal::kEmptyString) {
        cimid_->clear();
      }
    }
    state_ = 0u;
    isboard_ = 0u;
    iselectric_ = 0u;
    if (has_volvalue()) {
      if (volvalue_ != &::google::protobuf::internal::kEmptyString) {
        volvalue_->clear();
      }
    }
    unittype_ = 0u;
    if (has_stationcim()) {
      if (stationcim_ != &::google::protobuf::internal::kEmptyString) {
        stationcim_->clear();
      }
    }
    ispower_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StateBean::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes cimId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cimid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional uint32 state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isBoard;
        break;
      }

      // optional uint32 isBoard = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isBoard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isboard_)));
          set_has_isboard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isElectric;
        break;
      }

      // optional uint32 isElectric = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isElectric:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &iselectric_)));
          set_has_iselectric();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_volValue;
        break;
      }

      // optional bytes volValue = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_volValue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_volvalue()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_unitType;
        break;
      }

      // optional uint32 unitType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unitType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unittype_)));
          set_has_unittype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_stationCim;
        break;
      }

      // optional bytes stationCim = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stationCim:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_stationcim()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_isPower;
        break;
      }

      // optional uint32 isPower = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isPower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ispower_)));
          set_has_ispower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StateBean::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes cimId = 1;
  if (has_cimid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->cimid(), output);
  }

  // optional uint32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->state(), output);
  }

  // optional uint32 isBoard = 3;
  if (has_isboard()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->isboard(), output);
  }

  // optional uint32 isElectric = 4;
  if (has_iselectric()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->iselectric(), output);
  }

  // optional bytes volValue = 5;
  if (has_volvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->volvalue(), output);
  }

  // optional uint32 unitType = 6;
  if (has_unittype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->unittype(), output);
  }

  // optional bytes stationCim = 7;
  if (has_stationcim()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->stationcim(), output);
  }

  // optional uint32 isPower = 8;
  if (has_ispower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->ispower(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StateBean::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes cimId = 1;
  if (has_cimid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->cimid(), target);
  }

  // optional uint32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->state(), target);
  }

  // optional uint32 isBoard = 3;
  if (has_isboard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->isboard(), target);
  }

  // optional uint32 isElectric = 4;
  if (has_iselectric()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->iselectric(), target);
  }

  // optional bytes volValue = 5;
  if (has_volvalue()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->volvalue(), target);
  }

  // optional uint32 unitType = 6;
  if (has_unittype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->unittype(), target);
  }

  // optional bytes stationCim = 7;
  if (has_stationcim()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->stationcim(), target);
  }

  // optional uint32 isPower = 8;
  if (has_ispower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->ispower(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StateBean::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes cimId = 1;
    if (has_cimid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cimid());
    }

    // optional uint32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

    // optional uint32 isBoard = 3;
    if (has_isboard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isboard());
    }

    // optional uint32 isElectric = 4;
    if (has_iselectric()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->iselectric());
    }

    // optional bytes volValue = 5;
    if (has_volvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->volvalue());
    }

    // optional uint32 unitType = 6;
    if (has_unittype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unittype());
    }

    // optional bytes stationCim = 7;
    if (has_stationcim()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->stationcim());
    }

    // optional uint32 isPower = 8;
    if (has_ispower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ispower());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StateBean::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StateBean* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StateBean*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StateBean::MergeFrom(const StateBean& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cimid()) {
      set_cimid(from.cimid());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_isboard()) {
      set_isboard(from.isboard());
    }
    if (from.has_iselectric()) {
      set_iselectric(from.iselectric());
    }
    if (from.has_volvalue()) {
      set_volvalue(from.volvalue());
    }
    if (from.has_unittype()) {
      set_unittype(from.unittype());
    }
    if (from.has_stationcim()) {
      set_stationcim(from.stationcim());
    }
    if (from.has_ispower()) {
      set_ispower(from.ispower());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StateBean::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateBean::CopyFrom(const StateBean& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateBean::IsInitialized() const {

  return true;
}

void StateBean::Swap(StateBean* other) {
  if (other != this) {
    std::swap(cimid_, other->cimid_);
    std::swap(state_, other->state_);
    std::swap(isboard_, other->isboard_);
    std::swap(iselectric_, other->iselectric_);
    std::swap(volvalue_, other->volvalue_);
    std::swap(unittype_, other->unittype_);
    std::swap(stationcim_, other->stationcim_);
    std::swap(ispower_, other->ispower_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StateBean::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StateBean_descriptor_;
  metadata.reflection = StateBean_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StationTypeBean::kIdFieldNumber;
const int StationTypeBean::kOrdernumFieldNumber;
const int StationTypeBean::kNameFieldNumber;
const int StationTypeBean::kStationListFieldNumber;
#endif  // !_MSC_VER

StationTypeBean::StationTypeBean()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StationTypeBean::InitAsDefaultInstance() {
}

StationTypeBean::StationTypeBean(const StationTypeBean& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StationTypeBean::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ordernum_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StationTypeBean::~StationTypeBean() {
  SharedDtor();
}

void StationTypeBean::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void StationTypeBean::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StationTypeBean::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StationTypeBean_descriptor_;
}

const StationTypeBean& StationTypeBean::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbean_2eproto();
  return *default_instance_;
}

StationTypeBean* StationTypeBean::default_instance_ = NULL;

StationTypeBean* StationTypeBean::New() const {
  return new StationTypeBean;
}

void StationTypeBean::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    ordernum_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  stationlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StationTypeBean::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ordernum;
        break;
      }

      // optional uint32 ordernum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ordernum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ordernum_)));
          set_has_ordernum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Name;
        break;
      }

      // optional bytes Name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_StationList;
        break;
      }

      // repeated .com.spplus.buff.StationBean StationList = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_StationList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stationlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_StationList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StationTypeBean::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 ordernum = 2;
  if (has_ordernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ordernum(), output);
  }

  // optional bytes Name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->name(), output);
  }

  // repeated .com.spplus.buff.StationBean StationList = 4;
  for (int i = 0; i < this->stationlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->stationlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StationTypeBean::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 ordernum = 2;
  if (has_ordernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ordernum(), target);
  }

  // optional bytes Name = 3;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  // repeated .com.spplus.buff.StationBean StationList = 4;
  for (int i = 0; i < this->stationlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->stationlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StationTypeBean::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 ordernum = 2;
    if (has_ordernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ordernum());
    }

    // optional bytes Name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

  }
  // repeated .com.spplus.buff.StationBean StationList = 4;
  total_size += 1 * this->stationlist_size();
  for (int i = 0; i < this->stationlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stationlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StationTypeBean::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StationTypeBean* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StationTypeBean*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StationTypeBean::MergeFrom(const StationTypeBean& from) {
  GOOGLE_CHECK_NE(&from, this);
  stationlist_.MergeFrom(from.stationlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_ordernum()) {
      set_ordernum(from.ordernum());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StationTypeBean::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StationTypeBean::CopyFrom(const StationTypeBean& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StationTypeBean::IsInitialized() const {

  return true;
}

void StationTypeBean::Swap(StationTypeBean* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(ordernum_, other->ordernum_);
    std::swap(name_, other->name_);
    stationlist_.Swap(&other->stationlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StationTypeBean::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StationTypeBean_descriptor_;
  metadata.reflection = StationTypeBean_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StationBean::kIdFieldNumber;
const int StationBean::kCategoryIdFieldNumber;
const int StationBean::kNameFieldNumber;
const int StationBean::kCimIdFieldNumber;
const int StationBean::kCurrentNameFieldNumber;
const int StationBean::kPathFieldNumber;
#endif  // !_MSC_VER

StationBean::StationBean()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StationBean::InitAsDefaultInstance() {
}

StationBean::StationBean(const StationBean& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StationBean::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  categoryid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cimid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  currentname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StationBean::~StationBean() {
  SharedDtor();
}

void StationBean::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (cimid_ != &::google::protobuf::internal::kEmptyString) {
    delete cimid_;
  }
  if (currentname_ != &::google::protobuf::internal::kEmptyString) {
    delete currentname_;
  }
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void StationBean::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StationBean::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StationBean_descriptor_;
}

const StationBean& StationBean::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbean_2eproto();
  return *default_instance_;
}

StationBean* StationBean::default_instance_ = NULL;

StationBean* StationBean::New() const {
  return new StationBean;
}

void StationBean::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    categoryid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_cimid()) {
      if (cimid_ != &::google::protobuf::internal::kEmptyString) {
        cimid_->clear();
      }
    }
    if (has_currentname()) {
      if (currentname_ != &::google::protobuf::internal::kEmptyString) {
        currentname_->clear();
      }
    }
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StationBean::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CategoryId;
        break;
      }

      // optional uint32 CategoryId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CategoryId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &categoryid_)));
          set_has_categoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Name;
        break;
      }

      // optional bytes Name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_CimId;
        break;
      }

      // optional bytes CimId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CimId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cimid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_CurrentName;
        break;
      }

      // optional bytes CurrentName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CurrentName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_currentname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_Path;
        break;
      }

      // optional bytes Path = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_path()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StationBean::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 CategoryId = 2;
  if (has_categoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->categoryid(), output);
  }

  // optional bytes Name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->name(), output);
  }

  // optional bytes CimId = 4;
  if (has_cimid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->cimid(), output);
  }

  // optional bytes CurrentName = 5;
  if (has_currentname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->currentname(), output);
  }

  // optional bytes Path = 6;
  if (has_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->path(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StationBean::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 CategoryId = 2;
  if (has_categoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->categoryid(), target);
  }

  // optional bytes Name = 3;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  // optional bytes CimId = 4;
  if (has_cimid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->cimid(), target);
  }

  // optional bytes CurrentName = 5;
  if (has_currentname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->currentname(), target);
  }

  // optional bytes Path = 6;
  if (has_path()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->path(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StationBean::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 CategoryId = 2;
    if (has_categoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->categoryid());
    }

    // optional bytes Name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional bytes CimId = 4;
    if (has_cimid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cimid());
    }

    // optional bytes CurrentName = 5;
    if (has_currentname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->currentname());
    }

    // optional bytes Path = 6;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->path());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StationBean::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StationBean* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StationBean*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StationBean::MergeFrom(const StationBean& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_categoryid()) {
      set_categoryid(from.categoryid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_cimid()) {
      set_cimid(from.cimid());
    }
    if (from.has_currentname()) {
      set_currentname(from.currentname());
    }
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StationBean::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StationBean::CopyFrom(const StationBean& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StationBean::IsInitialized() const {

  return true;
}

void StationBean::Swap(StationBean* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(categoryid_, other->categoryid_);
    std::swap(name_, other->name_);
    std::swap(cimid_, other->cimid_);
    std::swap(currentname_, other->currentname_);
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StationBean::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StationBean_descriptor_;
  metadata.reflection = StationBean_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnitsBean::kIdFieldNumber;
const int UnitsBean::kStationIdFieldNumber;
const int UnitsBean::kNameFieldNumber;
const int UnitsBean::kCimIdFieldNumber;
const int UnitsBean::kVolIdFieldNumber;
const int UnitsBean::kUnitTypeFieldNumber;
const int UnitsBean::kSelfTypeFieldNumber;
#endif  // !_MSC_VER

UnitsBean::UnitsBean()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UnitsBean::InitAsDefaultInstance() {
}

UnitsBean::UnitsBean(const UnitsBean& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UnitsBean::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  stationid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cimid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  volid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  unittype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  selftype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnitsBean::~UnitsBean() {
  SharedDtor();
}

void UnitsBean::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (cimid_ != &::google::protobuf::internal::kEmptyString) {
    delete cimid_;
  }
  if (volid_ != &::google::protobuf::internal::kEmptyString) {
    delete volid_;
  }
  if (unittype_ != &::google::protobuf::internal::kEmptyString) {
    delete unittype_;
  }
  if (selftype_ != &::google::protobuf::internal::kEmptyString) {
    delete selftype_;
  }
  if (this != default_instance_) {
  }
}

void UnitsBean::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnitsBean::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnitsBean_descriptor_;
}

const UnitsBean& UnitsBean::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbean_2eproto();
  return *default_instance_;
}

UnitsBean* UnitsBean::default_instance_ = NULL;

UnitsBean* UnitsBean::New() const {
  return new UnitsBean;
}

void UnitsBean::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    stationid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_cimid()) {
      if (cimid_ != &::google::protobuf::internal::kEmptyString) {
        cimid_->clear();
      }
    }
    if (has_volid()) {
      if (volid_ != &::google::protobuf::internal::kEmptyString) {
        volid_->clear();
      }
    }
    if (has_unittype()) {
      if (unittype_ != &::google::protobuf::internal::kEmptyString) {
        unittype_->clear();
      }
    }
    if (has_selftype()) {
      if (selftype_ != &::google::protobuf::internal::kEmptyString) {
        selftype_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnitsBean::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_StationId;
        break;
      }

      // optional uint32 StationId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_StationId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stationid_)));
          set_has_stationid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Name;
        break;
      }

      // optional bytes Name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_CimId;
        break;
      }

      // optional bytes CimId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CimId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cimid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_VolId;
        break;
      }

      // optional bytes VolId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_VolId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_volid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_UnitType;
        break;
      }

      // optional bytes UnitType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UnitType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_unittype()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_SelfType;
        break;
      }

      // optional bytes SelfType = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SelfType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_selftype()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UnitsBean::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 StationId = 2;
  if (has_stationid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->stationid(), output);
  }

  // optional bytes Name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->name(), output);
  }

  // optional bytes CimId = 4;
  if (has_cimid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->cimid(), output);
  }

  // optional bytes VolId = 5;
  if (has_volid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->volid(), output);
  }

  // optional bytes UnitType = 6;
  if (has_unittype()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->unittype(), output);
  }

  // optional bytes SelfType = 7;
  if (has_selftype()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->selftype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UnitsBean::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 StationId = 2;
  if (has_stationid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->stationid(), target);
  }

  // optional bytes Name = 3;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  // optional bytes CimId = 4;
  if (has_cimid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->cimid(), target);
  }

  // optional bytes VolId = 5;
  if (has_volid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->volid(), target);
  }

  // optional bytes UnitType = 6;
  if (has_unittype()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->unittype(), target);
  }

  // optional bytes SelfType = 7;
  if (has_selftype()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->selftype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UnitsBean::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 StationId = 2;
    if (has_stationid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stationid());
    }

    // optional bytes Name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional bytes CimId = 4;
    if (has_cimid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cimid());
    }

    // optional bytes VolId = 5;
    if (has_volid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->volid());
    }

    // optional bytes UnitType = 6;
    if (has_unittype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->unittype());
    }

    // optional bytes SelfType = 7;
    if (has_selftype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->selftype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnitsBean::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnitsBean* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnitsBean*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnitsBean::MergeFrom(const UnitsBean& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_stationid()) {
      set_stationid(from.stationid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_cimid()) {
      set_cimid(from.cimid());
    }
    if (from.has_volid()) {
      set_volid(from.volid());
    }
    if (from.has_unittype()) {
      set_unittype(from.unittype());
    }
    if (from.has_selftype()) {
      set_selftype(from.selftype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnitsBean::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnitsBean::CopyFrom(const UnitsBean& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnitsBean::IsInitialized() const {

  return true;
}

void UnitsBean::Swap(UnitsBean* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(stationid_, other->stationid_);
    std::swap(name_, other->name_);
    std::swap(cimid_, other->cimid_);
    std::swap(volid_, other->volid_);
    std::swap(unittype_, other->unittype_);
    std::swap(selftype_, other->selftype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnitsBean::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnitsBean_descriptor_;
  metadata.reflection = UnitsBean_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SavingBean::kIdFieldNumber;
const int SavingBean::kNameFieldNumber;
const int SavingBean::kSaveTimeFieldNumber;
#endif  // !_MSC_VER

SavingBean::SavingBean()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SavingBean::InitAsDefaultInstance() {
}

SavingBean::SavingBean(const SavingBean& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SavingBean::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  savetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SavingBean::~SavingBean() {
  SharedDtor();
}

void SavingBean::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (savetime_ != &::google::protobuf::internal::kEmptyString) {
    delete savetime_;
  }
  if (this != default_instance_) {
  }
}

void SavingBean::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SavingBean::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SavingBean_descriptor_;
}

const SavingBean& SavingBean::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbean_2eproto();
  return *default_instance_;
}

SavingBean* SavingBean::default_instance_ = NULL;

SavingBean* SavingBean::New() const {
  return new SavingBean;
}

void SavingBean::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_savetime()) {
      if (savetime_ != &::google::protobuf::internal::kEmptyString) {
        savetime_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SavingBean::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Name;
        break;
      }

      // optional bytes Name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_SaveTime;
        break;
      }

      // optional bytes SaveTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SaveTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_savetime()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SavingBean::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional bytes Name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // optional bytes SaveTime = 3;
  if (has_savetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->savetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SavingBean::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional bytes Name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // optional bytes SaveTime = 3;
  if (has_savetime()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->savetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SavingBean::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional bytes Name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional bytes SaveTime = 3;
    if (has_savetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->savetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SavingBean::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SavingBean* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SavingBean*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SavingBean::MergeFrom(const SavingBean& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_savetime()) {
      set_savetime(from.savetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SavingBean::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SavingBean::CopyFrom(const SavingBean& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SavingBean::IsInitialized() const {

  return true;
}

void SavingBean::Swap(SavingBean* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(savetime_, other->savetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SavingBean::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SavingBean_descriptor_;
  metadata.reflection = SavingBean_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RuleBean::kIdFieldNumber;
const int RuleBean::kNameFieldNumber;
const int RuleBean::kAlarmLevelFieldNumber;
const int RuleBean::kDescriptionFieldNumber;
#endif  // !_MSC_VER

RuleBean::RuleBean()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RuleBean::InitAsDefaultInstance() {
}

RuleBean::RuleBean(const RuleBean& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RuleBean::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  alarmlevel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RuleBean::~RuleBean() {
  SharedDtor();
}

void RuleBean::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (alarmlevel_ != &::google::protobuf::internal::kEmptyString) {
    delete alarmlevel_;
  }
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (this != default_instance_) {
  }
}

void RuleBean::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RuleBean::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RuleBean_descriptor_;
}

const RuleBean& RuleBean::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbean_2eproto();
  return *default_instance_;
}

RuleBean* RuleBean::default_instance_ = NULL;

RuleBean* RuleBean::New() const {
  return new RuleBean;
}

void RuleBean::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_alarmlevel()) {
      if (alarmlevel_ != &::google::protobuf::internal::kEmptyString) {
        alarmlevel_->clear();
      }
    }
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::kEmptyString) {
        description_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RuleBean::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Name;
        break;
      }

      // optional bytes Name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_AlarmLevel;
        break;
      }

      // optional bytes AlarmLevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AlarmLevel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_alarmlevel()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Description;
        break;
      }

      // optional bytes Description = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_description()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RuleBean::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional bytes Name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // optional bytes AlarmLevel = 3;
  if (has_alarmlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->alarmlevel(), output);
  }

  // optional bytes Description = 4;
  if (has_description()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->description(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RuleBean::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional bytes Name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // optional bytes AlarmLevel = 3;
  if (has_alarmlevel()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->alarmlevel(), target);
  }

  // optional bytes Description = 4;
  if (has_description()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->description(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RuleBean::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional bytes Name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional bytes AlarmLevel = 3;
    if (has_alarmlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->alarmlevel());
    }

    // optional bytes Description = 4;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->description());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RuleBean::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RuleBean* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RuleBean*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RuleBean::MergeFrom(const RuleBean& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_alarmlevel()) {
      set_alarmlevel(from.alarmlevel());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RuleBean::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RuleBean::CopyFrom(const RuleBean& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RuleBean::IsInitialized() const {

  return true;
}

void RuleBean::Swap(RuleBean* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(alarmlevel_, other->alarmlevel_);
    std::swap(description_, other->description_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RuleBean::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RuleBean_descriptor_;
  metadata.reflection = RuleBean_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace buff
}  // namespace spplus
}  // namespace com

// @@protoc_insertion_point(global_scope)
