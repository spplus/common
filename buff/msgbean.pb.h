// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msgbean.proto

#ifndef PROTOBUF_msgbean_2eproto__INCLUDED
#define PROTOBUF_msgbean_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace spplus {
namespace buff {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_msgbean_2eproto();
void protobuf_AssignDesc_msgbean_2eproto();
void protobuf_ShutdownFile_msgbean_2eproto();

class UserBean;
class UserRoleBean;
class StationRuleBean;
class CircleQueryBean;
class SignQueryBean;
class GswitchQueryBean;
class MsetQueryBean;
class EventQueryBean;
class StateBean;
class StationTypeBean;
class StationBean;
class UnitsBean;
class SavingBean;
class RuleBean;
class TicketMsionBean;
class TicketBean;
class TicketActBean;

// ===================================================================

class UserBean : public ::google::protobuf::Message {
 public:
  UserBean();
  virtual ~UserBean();

  UserBean(const UserBean& from);

  inline UserBean& operator=(const UserBean& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserBean& default_instance();

  void Swap(UserBean* other);

  // implements Message ----------------------------------------------

  UserBean* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserBean& from);
  void MergeFrom(const UserBean& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline const ::std::string& userid() const;
  inline void set_userid(const ::std::string& value);
  inline void set_userid(const char* value);
  inline void set_userid(const void* value, size_t size);
  inline ::std::string* mutable_userid();
  inline ::std::string* release_userid();
  inline void set_allocated_userid(::std::string* userid);

  // optional bytes username = 2;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 2;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const void* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // optional bytes userpwd = 3;
  inline bool has_userpwd() const;
  inline void clear_userpwd();
  static const int kUserpwdFieldNumber = 3;
  inline const ::std::string& userpwd() const;
  inline void set_userpwd(const ::std::string& value);
  inline void set_userpwd(const char* value);
  inline void set_userpwd(const void* value, size_t size);
  inline ::std::string* mutable_userpwd();
  inline ::std::string* release_userpwd();
  inline void set_allocated_userpwd(::std::string* userpwd);

  // optional bytes userrole = 4;
  inline bool has_userrole() const;
  inline void clear_userrole();
  static const int kUserroleFieldNumber = 4;
  inline const ::std::string& userrole() const;
  inline void set_userrole(const ::std::string& value);
  inline void set_userrole(const char* value);
  inline void set_userrole(const void* value, size_t size);
  inline ::std::string* mutable_userrole();
  inline ::std::string* release_userrole();
  inline void set_allocated_userrole(::std::string* userrole);

  // optional bytes rolename = 5;
  inline bool has_rolename() const;
  inline void clear_rolename();
  static const int kRolenameFieldNumber = 5;
  inline const ::std::string& rolename() const;
  inline void set_rolename(const ::std::string& value);
  inline void set_rolename(const char* value);
  inline void set_rolename(const void* value, size_t size);
  inline ::std::string* mutable_rolename();
  inline ::std::string* release_rolename();
  inline void set_allocated_rolename(::std::string* rolename);

  // optional bytes realname = 6;
  inline bool has_realname() const;
  inline void clear_realname();
  static const int kRealnameFieldNumber = 6;
  inline const ::std::string& realname() const;
  inline void set_realname(const ::std::string& value);
  inline void set_realname(const char* value);
  inline void set_realname(const void* value, size_t size);
  inline ::std::string* mutable_realname();
  inline ::std::string* release_realname();
  inline void set_allocated_realname(::std::string* realname);

  // @@protoc_insertion_point(class_scope:com.spplus.buff.UserBean)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_userpwd();
  inline void clear_has_userpwd();
  inline void set_has_userrole();
  inline void clear_has_userrole();
  inline void set_has_rolename();
  inline void clear_has_rolename();
  inline void set_has_realname();
  inline void clear_has_realname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* userid_;
  ::std::string* username_;
  ::std::string* userpwd_;
  ::std::string* userrole_;
  ::std::string* rolename_;
  ::std::string* realname_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_msgbean_2eproto();
  friend void protobuf_AssignDesc_msgbean_2eproto();
  friend void protobuf_ShutdownFile_msgbean_2eproto();

  void InitAsDefaultInstance();
  static UserBean* default_instance_;
};
// -------------------------------------------------------------------

class UserRoleBean : public ::google::protobuf::Message {
 public:
  UserRoleBean();
  virtual ~UserRoleBean();

  UserRoleBean(const UserRoleBean& from);

  inline UserRoleBean& operator=(const UserRoleBean& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserRoleBean& default_instance();

  void Swap(UserRoleBean* other);

  // implements Message ----------------------------------------------

  UserRoleBean* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserRoleBean& from);
  void MergeFrom(const UserRoleBean& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes userroleid = 1;
  inline bool has_userroleid() const;
  inline void clear_userroleid();
  static const int kUserroleidFieldNumber = 1;
  inline const ::std::string& userroleid() const;
  inline void set_userroleid(const ::std::string& value);
  inline void set_userroleid(const char* value);
  inline void set_userroleid(const void* value, size_t size);
  inline ::std::string* mutable_userroleid();
  inline ::std::string* release_userroleid();
  inline void set_allocated_userroleid(::std::string* userroleid);

  // optional bytes userrolename = 2;
  inline bool has_userrolename() const;
  inline void clear_userrolename();
  static const int kUserrolenameFieldNumber = 2;
  inline const ::std::string& userrolename() const;
  inline void set_userrolename(const ::std::string& value);
  inline void set_userrolename(const char* value);
  inline void set_userrolename(const void* value, size_t size);
  inline ::std::string* mutable_userrolename();
  inline ::std::string* release_userrolename();
  inline void set_allocated_userrolename(::std::string* userrolename);

  // @@protoc_insertion_point(class_scope:com.spplus.buff.UserRoleBean)
 private:
  inline void set_has_userroleid();
  inline void clear_has_userroleid();
  inline void set_has_userrolename();
  inline void clear_has_userrolename();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* userroleid_;
  ::std::string* userrolename_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_msgbean_2eproto();
  friend void protobuf_AssignDesc_msgbean_2eproto();
  friend void protobuf_ShutdownFile_msgbean_2eproto();

  void InitAsDefaultInstance();
  static UserRoleBean* default_instance_;
};
// -------------------------------------------------------------------

class StationRuleBean : public ::google::protobuf::Message {
 public:
  StationRuleBean();
  virtual ~StationRuleBean();

  StationRuleBean(const StationRuleBean& from);

  inline StationRuleBean& operator=(const StationRuleBean& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StationRuleBean& default_instance();

  void Swap(StationRuleBean* other);

  // implements Message ----------------------------------------------

  StationRuleBean* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StationRuleBean& from);
  void MergeFrom(const StationRuleBean& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes stationCim = 1;
  inline bool has_stationcim() const;
  inline void clear_stationcim();
  static const int kStationCimFieldNumber = 1;
  inline const ::std::string& stationcim() const;
  inline void set_stationcim(const ::std::string& value);
  inline void set_stationcim(const char* value);
  inline void set_stationcim(const void* value, size_t size);
  inline ::std::string* mutable_stationcim();
  inline ::std::string* release_stationcim();
  inline void set_allocated_stationcim(::std::string* stationcim);

  // optional bytes stationName = 2;
  inline bool has_stationname() const;
  inline void clear_stationname();
  static const int kStationNameFieldNumber = 2;
  inline const ::std::string& stationname() const;
  inline void set_stationname(const ::std::string& value);
  inline void set_stationname(const char* value);
  inline void set_stationname(const void* value, size_t size);
  inline ::std::string* mutable_stationname();
  inline ::std::string* release_stationname();
  inline void set_allocated_stationname(::std::string* stationname);

  // optional uint32 ruleId = 3;
  inline bool has_ruleid() const;
  inline void clear_ruleid();
  static const int kRuleIdFieldNumber = 3;
  inline ::google::protobuf::uint32 ruleid() const;
  inline void set_ruleid(::google::protobuf::uint32 value);

  // optional bytes ruleName = 4;
  inline bool has_rulename() const;
  inline void clear_rulename();
  static const int kRuleNameFieldNumber = 4;
  inline const ::std::string& rulename() const;
  inline void set_rulename(const ::std::string& value);
  inline void set_rulename(const char* value);
  inline void set_rulename(const void* value, size_t size);
  inline ::std::string* mutable_rulename();
  inline ::std::string* release_rulename();
  inline void set_allocated_rulename(::std::string* rulename);

  // optional bytes isUse = 5;
  inline bool has_isuse() const;
  inline void clear_isuse();
  static const int kIsUseFieldNumber = 5;
  inline const ::std::string& isuse() const;
  inline void set_isuse(const ::std::string& value);
  inline void set_isuse(const char* value);
  inline void set_isuse(const void* value, size_t size);
  inline ::std::string* mutable_isuse();
  inline ::std::string* release_isuse();
  inline void set_allocated_isuse(::std::string* isuse);

  // optional bytes isUseName = 6;
  inline bool has_isusename() const;
  inline void clear_isusename();
  static const int kIsUseNameFieldNumber = 6;
  inline const ::std::string& isusename() const;
  inline void set_isusename(const ::std::string& value);
  inline void set_isusename(const char* value);
  inline void set_isusename(const void* value, size_t size);
  inline ::std::string* mutable_isusename();
  inline ::std::string* release_isusename();
  inline void set_allocated_isusename(::std::string* isusename);

  // @@protoc_insertion_point(class_scope:com.spplus.buff.StationRuleBean)
 private:
  inline void set_has_stationcim();
  inline void clear_has_stationcim();
  inline void set_has_stationname();
  inline void clear_has_stationname();
  inline void set_has_ruleid();
  inline void clear_has_ruleid();
  inline void set_has_rulename();
  inline void clear_has_rulename();
  inline void set_has_isuse();
  inline void clear_has_isuse();
  inline void set_has_isusename();
  inline void clear_has_isusename();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* stationcim_;
  ::std::string* stationname_;
  ::std::string* rulename_;
  ::std::string* isuse_;
  ::std::string* isusename_;
  ::google::protobuf::uint32 ruleid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_msgbean_2eproto();
  friend void protobuf_AssignDesc_msgbean_2eproto();
  friend void protobuf_ShutdownFile_msgbean_2eproto();

  void InitAsDefaultInstance();
  static StationRuleBean* default_instance_;
};
// -------------------------------------------------------------------

class CircleQueryBean : public ::google::protobuf::Message {
 public:
  CircleQueryBean();
  virtual ~CircleQueryBean();

  CircleQueryBean(const CircleQueryBean& from);

  inline CircleQueryBean& operator=(const CircleQueryBean& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CircleQueryBean& default_instance();

  void Swap(CircleQueryBean* other);

  // implements Message ----------------------------------------------

  CircleQueryBean* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CircleQueryBean& from);
  void MergeFrom(const CircleQueryBean& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes unitCim = 1;
  inline bool has_unitcim() const;
  inline void clear_unitcim();
  static const int kUnitCimFieldNumber = 1;
  inline const ::std::string& unitcim() const;
  inline void set_unitcim(const ::std::string& value);
  inline void set_unitcim(const char* value);
  inline void set_unitcim(const void* value, size_t size);
  inline ::std::string* mutable_unitcim();
  inline ::std::string* release_unitcim();
  inline void set_allocated_unitcim(::std::string* unitcim);

  // optional bytes Name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional bytes stationCim = 3;
  inline bool has_stationcim() const;
  inline void clear_stationcim();
  static const int kStationCimFieldNumber = 3;
  inline const ::std::string& stationcim() const;
  inline void set_stationcim(const ::std::string& value);
  inline void set_stationcim(const char* value);
  inline void set_stationcim(const void* value, size_t size);
  inline ::std::string* mutable_stationcim();
  inline ::std::string* release_stationcim();
  inline void set_allocated_stationcim(::std::string* stationcim);

  // optional bytes stationName = 4;
  inline bool has_stationname() const;
  inline void clear_stationname();
  static const int kStationNameFieldNumber = 4;
  inline const ::std::string& stationname() const;
  inline void set_stationname(const ::std::string& value);
  inline void set_stationname(const char* value);
  inline void set_stationname(const void* value, size_t size);
  inline ::std::string* mutable_stationname();
  inline ::std::string* release_stationname();
  inline void set_allocated_stationname(::std::string* stationname);

  // @@protoc_insertion_point(class_scope:com.spplus.buff.CircleQueryBean)
 private:
  inline void set_has_unitcim();
  inline void clear_has_unitcim();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_stationcim();
  inline void clear_has_stationcim();
  inline void set_has_stationname();
  inline void clear_has_stationname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* unitcim_;
  ::std::string* name_;
  ::std::string* stationcim_;
  ::std::string* stationname_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_msgbean_2eproto();
  friend void protobuf_AssignDesc_msgbean_2eproto();
  friend void protobuf_ShutdownFile_msgbean_2eproto();

  void InitAsDefaultInstance();
  static CircleQueryBean* default_instance_;
};
// -------------------------------------------------------------------

class SignQueryBean : public ::google::protobuf::Message {
 public:
  SignQueryBean();
  virtual ~SignQueryBean();

  SignQueryBean(const SignQueryBean& from);

  inline SignQueryBean& operator=(const SignQueryBean& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SignQueryBean& default_instance();

  void Swap(SignQueryBean* other);

  // implements Message ----------------------------------------------

  SignQueryBean* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SignQueryBean& from);
  void MergeFrom(const SignQueryBean& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes unitCim = 1;
  inline bool has_unitcim() const;
  inline void clear_unitcim();
  static const int kUnitCimFieldNumber = 1;
  inline const ::std::string& unitcim() const;
  inline void set_unitcim(const ::std::string& value);
  inline void set_unitcim(const char* value);
  inline void set_unitcim(const void* value, size_t size);
  inline ::std::string* mutable_unitcim();
  inline ::std::string* release_unitcim();
  inline void set_allocated_unitcim(::std::string* unitcim);

  // optional bytes unitCimName = 2;
  inline bool has_unitcimname() const;
  inline void clear_unitcimname();
  static const int kUnitCimNameFieldNumber = 2;
  inline const ::std::string& unitcimname() const;
  inline void set_unitcimname(const ::std::string& value);
  inline void set_unitcimname(const char* value);
  inline void set_unitcimname(const void* value, size_t size);
  inline ::std::string* mutable_unitcimname();
  inline ::std::string* release_unitcimname();
  inline void set_allocated_unitcimname(::std::string* unitcimname);

  // optional bytes stationCim = 3;
  inline bool has_stationcim() const;
  inline void clear_stationcim();
  static const int kStationCimFieldNumber = 3;
  inline const ::std::string& stationcim() const;
  inline void set_stationcim(const ::std::string& value);
  inline void set_stationcim(const char* value);
  inline void set_stationcim(const void* value, size_t size);
  inline ::std::string* mutable_stationcim();
  inline ::std::string* release_stationcim();
  inline void set_allocated_stationcim(::std::string* stationcim);

  // optional bytes stationName = 4;
  inline bool has_stationname() const;
  inline void clear_stationname();
  static const int kStationNameFieldNumber = 4;
  inline const ::std::string& stationname() const;
  inline void set_stationname(const ::std::string& value);
  inline void set_stationname(const char* value);
  inline void set_stationname(const void* value, size_t size);
  inline ::std::string* mutable_stationname();
  inline ::std::string* release_stationname();
  inline void set_allocated_stationname(::std::string* stationname);

  // optional bytes unitType = 5;
  inline bool has_unittype() const;
  inline void clear_unittype();
  static const int kUnitTypeFieldNumber = 5;
  inline const ::std::string& unittype() const;
  inline void set_unittype(const ::std::string& value);
  inline void set_unittype(const char* value);
  inline void set_unittype(const void* value, size_t size);
  inline ::std::string* mutable_unittype();
  inline ::std::string* release_unittype();
  inline void set_allocated_unittype(::std::string* unittype);

  // @@protoc_insertion_point(class_scope:com.spplus.buff.SignQueryBean)
 private:
  inline void set_has_unitcim();
  inline void clear_has_unitcim();
  inline void set_has_unitcimname();
  inline void clear_has_unitcimname();
  inline void set_has_stationcim();
  inline void clear_has_stationcim();
  inline void set_has_stationname();
  inline void clear_has_stationname();
  inline void set_has_unittype();
  inline void clear_has_unittype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* unitcim_;
  ::std::string* unitcimname_;
  ::std::string* stationcim_;
  ::std::string* stationname_;
  ::std::string* unittype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_msgbean_2eproto();
  friend void protobuf_AssignDesc_msgbean_2eproto();
  friend void protobuf_ShutdownFile_msgbean_2eproto();

  void InitAsDefaultInstance();
  static SignQueryBean* default_instance_;
};
// -------------------------------------------------------------------

class GswitchQueryBean : public ::google::protobuf::Message {
 public:
  GswitchQueryBean();
  virtual ~GswitchQueryBean();

  GswitchQueryBean(const GswitchQueryBean& from);

  inline GswitchQueryBean& operator=(const GswitchQueryBean& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GswitchQueryBean& default_instance();

  void Swap(GswitchQueryBean* other);

  // implements Message ----------------------------------------------

  GswitchQueryBean* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GswitchQueryBean& from);
  void MergeFrom(const GswitchQueryBean& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes unitCim = 1;
  inline bool has_unitcim() const;
  inline void clear_unitcim();
  static const int kUnitCimFieldNumber = 1;
  inline const ::std::string& unitcim() const;
  inline void set_unitcim(const ::std::string& value);
  inline void set_unitcim(const char* value);
  inline void set_unitcim(const void* value, size_t size);
  inline ::std::string* mutable_unitcim();
  inline ::std::string* release_unitcim();
  inline void set_allocated_unitcim(::std::string* unitcim);

  // optional bytes unitCimName = 2;
  inline bool has_unitcimname() const;
  inline void clear_unitcimname();
  static const int kUnitCimNameFieldNumber = 2;
  inline const ::std::string& unitcimname() const;
  inline void set_unitcimname(const ::std::string& value);
  inline void set_unitcimname(const char* value);
  inline void set_unitcimname(const void* value, size_t size);
  inline ::std::string* mutable_unitcimname();
  inline ::std::string* release_unitcimname();
  inline void set_allocated_unitcimname(::std::string* unitcimname);

  // optional bytes stationCim = 3;
  inline bool has_stationcim() const;
  inline void clear_stationcim();
  static const int kStationCimFieldNumber = 3;
  inline const ::std::string& stationcim() const;
  inline void set_stationcim(const ::std::string& value);
  inline void set_stationcim(const char* value);
  inline void set_stationcim(const void* value, size_t size);
  inline ::std::string* mutable_stationcim();
  inline ::std::string* release_stationcim();
  inline void set_allocated_stationcim(::std::string* stationcim);

  // optional bytes stationName = 4;
  inline bool has_stationname() const;
  inline void clear_stationname();
  static const int kStationNameFieldNumber = 4;
  inline const ::std::string& stationname() const;
  inline void set_stationname(const ::std::string& value);
  inline void set_stationname(const char* value);
  inline void set_stationname(const void* value, size_t size);
  inline ::std::string* mutable_stationname();
  inline ::std::string* release_stationname();
  inline void set_allocated_stationname(::std::string* stationname);

  // optional bytes unitType = 5;
  inline bool has_unittype() const;
  inline void clear_unittype();
  static const int kUnitTypeFieldNumber = 5;
  inline const ::std::string& unittype() const;
  inline void set_unittype(const ::std::string& value);
  inline void set_unittype(const char* value);
  inline void set_unittype(const void* value, size_t size);
  inline ::std::string* mutable_unittype();
  inline ::std::string* release_unittype();
  inline void set_allocated_unittype(::std::string* unittype);

  // @@protoc_insertion_point(class_scope:com.spplus.buff.GswitchQueryBean)
 private:
  inline void set_has_unitcim();
  inline void clear_has_unitcim();
  inline void set_has_unitcimname();
  inline void clear_has_unitcimname();
  inline void set_has_stationcim();
  inline void clear_has_stationcim();
  inline void set_has_stationname();
  inline void clear_has_stationname();
  inline void set_has_unittype();
  inline void clear_has_unittype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* unitcim_;
  ::std::string* unitcimname_;
  ::std::string* stationcim_;
  ::std::string* stationname_;
  ::std::string* unittype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_msgbean_2eproto();
  friend void protobuf_AssignDesc_msgbean_2eproto();
  friend void protobuf_ShutdownFile_msgbean_2eproto();

  void InitAsDefaultInstance();
  static GswitchQueryBean* default_instance_;
};
// -------------------------------------------------------------------

class MsetQueryBean : public ::google::protobuf::Message {
 public:
  MsetQueryBean();
  virtual ~MsetQueryBean();

  MsetQueryBean(const MsetQueryBean& from);

  inline MsetQueryBean& operator=(const MsetQueryBean& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsetQueryBean& default_instance();

  void Swap(MsetQueryBean* other);

  // implements Message ----------------------------------------------

  MsetQueryBean* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsetQueryBean& from);
  void MergeFrom(const MsetQueryBean& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes unitCim = 1;
  inline bool has_unitcim() const;
  inline void clear_unitcim();
  static const int kUnitCimFieldNumber = 1;
  inline const ::std::string& unitcim() const;
  inline void set_unitcim(const ::std::string& value);
  inline void set_unitcim(const char* value);
  inline void set_unitcim(const void* value, size_t size);
  inline ::std::string* mutable_unitcim();
  inline ::std::string* release_unitcim();
  inline void set_allocated_unitcim(::std::string* unitcim);

  // optional bytes unitCimName = 2;
  inline bool has_unitcimname() const;
  inline void clear_unitcimname();
  static const int kUnitCimNameFieldNumber = 2;
  inline const ::std::string& unitcimname() const;
  inline void set_unitcimname(const ::std::string& value);
  inline void set_unitcimname(const char* value);
  inline void set_unitcimname(const void* value, size_t size);
  inline ::std::string* mutable_unitcimname();
  inline ::std::string* release_unitcimname();
  inline void set_allocated_unitcimname(::std::string* unitcimname);

  // optional bytes stationCim = 3;
  inline bool has_stationcim() const;
  inline void clear_stationcim();
  static const int kStationCimFieldNumber = 3;
  inline const ::std::string& stationcim() const;
  inline void set_stationcim(const ::std::string& value);
  inline void set_stationcim(const char* value);
  inline void set_stationcim(const void* value, size_t size);
  inline ::std::string* mutable_stationcim();
  inline ::std::string* release_stationcim();
  inline void set_allocated_stationcim(::std::string* stationcim);

  // optional bytes stationName = 4;
  inline bool has_stationname() const;
  inline void clear_stationname();
  static const int kStationNameFieldNumber = 4;
  inline const ::std::string& stationname() const;
  inline void set_stationname(const ::std::string& value);
  inline void set_stationname(const char* value);
  inline void set_stationname(const void* value, size_t size);
  inline ::std::string* mutable_stationname();
  inline ::std::string* release_stationname();
  inline void set_allocated_stationname(::std::string* stationname);

  // optional bytes unitType = 5;
  inline bool has_unittype() const;
  inline void clear_unittype();
  static const int kUnitTypeFieldNumber = 5;
  inline const ::std::string& unittype() const;
  inline void set_unittype(const ::std::string& value);
  inline void set_unittype(const char* value);
  inline void set_unittype(const void* value, size_t size);
  inline ::std::string* mutable_unittype();
  inline ::std::string* release_unittype();
  inline void set_allocated_unittype(::std::string* unittype);

  // @@protoc_insertion_point(class_scope:com.spplus.buff.MsetQueryBean)
 private:
  inline void set_has_unitcim();
  inline void clear_has_unitcim();
  inline void set_has_unitcimname();
  inline void clear_has_unitcimname();
  inline void set_has_stationcim();
  inline void clear_has_stationcim();
  inline void set_has_stationname();
  inline void clear_has_stationname();
  inline void set_has_unittype();
  inline void clear_has_unittype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* unitcim_;
  ::std::string* unitcimname_;
  ::std::string* stationcim_;
  ::std::string* stationname_;
  ::std::string* unittype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_msgbean_2eproto();
  friend void protobuf_AssignDesc_msgbean_2eproto();
  friend void protobuf_ShutdownFile_msgbean_2eproto();

  void InitAsDefaultInstance();
  static MsetQueryBean* default_instance_;
};
// -------------------------------------------------------------------

class EventQueryBean : public ::google::protobuf::Message {
 public:
  EventQueryBean();
  virtual ~EventQueryBean();

  EventQueryBean(const EventQueryBean& from);

  inline EventQueryBean& operator=(const EventQueryBean& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EventQueryBean& default_instance();

  void Swap(EventQueryBean* other);

  // implements Message ----------------------------------------------

  EventQueryBean* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EventQueryBean& from);
  void MergeFrom(const EventQueryBean& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes unitCim = 1;
  inline bool has_unitcim() const;
  inline void clear_unitcim();
  static const int kUnitCimFieldNumber = 1;
  inline const ::std::string& unitcim() const;
  inline void set_unitcim(const ::std::string& value);
  inline void set_unitcim(const char* value);
  inline void set_unitcim(const void* value, size_t size);
  inline ::std::string* mutable_unitcim();
  inline ::std::string* release_unitcim();
  inline void set_allocated_unitcim(::std::string* unitcim);

  // optional bytes unitCimName = 2;
  inline bool has_unitcimname() const;
  inline void clear_unitcimname();
  static const int kUnitCimNameFieldNumber = 2;
  inline const ::std::string& unitcimname() const;
  inline void set_unitcimname(const ::std::string& value);
  inline void set_unitcimname(const char* value);
  inline void set_unitcimname(const void* value, size_t size);
  inline ::std::string* mutable_unitcimname();
  inline ::std::string* release_unitcimname();
  inline void set_allocated_unitcimname(::std::string* unitcimname);

  // optional bytes stationCim = 3;
  inline bool has_stationcim() const;
  inline void clear_stationcim();
  static const int kStationCimFieldNumber = 3;
  inline const ::std::string& stationcim() const;
  inline void set_stationcim(const ::std::string& value);
  inline void set_stationcim(const char* value);
  inline void set_stationcim(const void* value, size_t size);
  inline ::std::string* mutable_stationcim();
  inline ::std::string* release_stationcim();
  inline void set_allocated_stationcim(::std::string* stationcim);

  // optional bytes stationName = 4;
  inline bool has_stationname() const;
  inline void clear_stationname();
  static const int kStationNameFieldNumber = 4;
  inline const ::std::string& stationname() const;
  inline void set_stationname(const ::std::string& value);
  inline void set_stationname(const char* value);
  inline void set_stationname(const void* value, size_t size);
  inline ::std::string* mutable_stationname();
  inline ::std::string* release_stationname();
  inline void set_allocated_stationname(::std::string* stationname);

  // optional bytes unitType = 5;
  inline bool has_unittype() const;
  inline void clear_unittype();
  static const int kUnitTypeFieldNumber = 5;
  inline const ::std::string& unittype() const;
  inline void set_unittype(const ::std::string& value);
  inline void set_unittype(const char* value);
  inline void set_unittype(const void* value, size_t size);
  inline ::std::string* mutable_unittype();
  inline ::std::string* release_unittype();
  inline void set_allocated_unittype(::std::string* unittype);

  // optional bytes eventvalue = 6;
  inline bool has_eventvalue() const;
  inline void clear_eventvalue();
  static const int kEventvalueFieldNumber = 6;
  inline const ::std::string& eventvalue() const;
  inline void set_eventvalue(const ::std::string& value);
  inline void set_eventvalue(const char* value);
  inline void set_eventvalue(const void* value, size_t size);
  inline ::std::string* mutable_eventvalue();
  inline ::std::string* release_eventvalue();
  inline void set_allocated_eventvalue(::std::string* eventvalue);

  // optional bytes eventtime = 7;
  inline bool has_eventtime() const;
  inline void clear_eventtime();
  static const int kEventtimeFieldNumber = 7;
  inline const ::std::string& eventtime() const;
  inline void set_eventtime(const ::std::string& value);
  inline void set_eventtime(const char* value);
  inline void set_eventtime(const void* value, size_t size);
  inline ::std::string* mutable_eventtime();
  inline ::std::string* release_eventtime();
  inline void set_allocated_eventtime(::std::string* eventtime);

  // @@protoc_insertion_point(class_scope:com.spplus.buff.EventQueryBean)
 private:
  inline void set_has_unitcim();
  inline void clear_has_unitcim();
  inline void set_has_unitcimname();
  inline void clear_has_unitcimname();
  inline void set_has_stationcim();
  inline void clear_has_stationcim();
  inline void set_has_stationname();
  inline void clear_has_stationname();
  inline void set_has_unittype();
  inline void clear_has_unittype();
  inline void set_has_eventvalue();
  inline void clear_has_eventvalue();
  inline void set_has_eventtime();
  inline void clear_has_eventtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* unitcim_;
  ::std::string* unitcimname_;
  ::std::string* stationcim_;
  ::std::string* stationname_;
  ::std::string* unittype_;
  ::std::string* eventvalue_;
  ::std::string* eventtime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_msgbean_2eproto();
  friend void protobuf_AssignDesc_msgbean_2eproto();
  friend void protobuf_ShutdownFile_msgbean_2eproto();

  void InitAsDefaultInstance();
  static EventQueryBean* default_instance_;
};
// -------------------------------------------------------------------

class StateBean : public ::google::protobuf::Message {
 public:
  StateBean();
  virtual ~StateBean();

  StateBean(const StateBean& from);

  inline StateBean& operator=(const StateBean& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StateBean& default_instance();

  void Swap(StateBean* other);

  // implements Message ----------------------------------------------

  StateBean* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StateBean& from);
  void MergeFrom(const StateBean& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes cimId = 1;
  inline bool has_cimid() const;
  inline void clear_cimid();
  static const int kCimIdFieldNumber = 1;
  inline const ::std::string& cimid() const;
  inline void set_cimid(const ::std::string& value);
  inline void set_cimid(const char* value);
  inline void set_cimid(const void* value, size_t size);
  inline ::std::string* mutable_cimid();
  inline ::std::string* release_cimid();
  inline void set_allocated_cimid(::std::string* cimid);

  // optional uint32 state = 2;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline ::google::protobuf::uint32 state() const;
  inline void set_state(::google::protobuf::uint32 value);

  // optional uint32 isBoard = 3;
  inline bool has_isboard() const;
  inline void clear_isboard();
  static const int kIsBoardFieldNumber = 3;
  inline ::google::protobuf::uint32 isboard() const;
  inline void set_isboard(::google::protobuf::uint32 value);

  // optional uint32 isElectric = 4;
  inline bool has_iselectric() const;
  inline void clear_iselectric();
  static const int kIsElectricFieldNumber = 4;
  inline ::google::protobuf::uint32 iselectric() const;
  inline void set_iselectric(::google::protobuf::uint32 value);

  // optional bytes volColor = 5;
  inline bool has_volcolor() const;
  inline void clear_volcolor();
  static const int kVolColorFieldNumber = 5;
  inline const ::std::string& volcolor() const;
  inline void set_volcolor(const ::std::string& value);
  inline void set_volcolor(const char* value);
  inline void set_volcolor(const void* value, size_t size);
  inline ::std::string* mutable_volcolor();
  inline ::std::string* release_volcolor();
  inline void set_allocated_volcolor(::std::string* volcolor);

  // optional uint32 unitType = 6;
  inline bool has_unittype() const;
  inline void clear_unittype();
  static const int kUnitTypeFieldNumber = 6;
  inline ::google::protobuf::uint32 unittype() const;
  inline void set_unittype(::google::protobuf::uint32 value);

  // optional bytes stationCim = 7;
  inline bool has_stationcim() const;
  inline void clear_stationcim();
  static const int kStationCimFieldNumber = 7;
  inline const ::std::string& stationcim() const;
  inline void set_stationcim(const ::std::string& value);
  inline void set_stationcim(const char* value);
  inline void set_stationcim(const void* value, size_t size);
  inline ::std::string* mutable_stationcim();
  inline ::std::string* release_stationcim();
  inline void set_allocated_stationcim(::std::string* stationcim);

  // optional uint32 isPower = 8;
  inline bool has_ispower() const;
  inline void clear_ispower();
  static const int kIsPowerFieldNumber = 8;
  inline ::google::protobuf::uint32 ispower() const;
  inline void set_ispower(::google::protobuf::uint32 value);

  // optional uint32 isGround = 9;
  inline bool has_isground() const;
  inline void clear_isground();
  static const int kIsGroundFieldNumber = 9;
  inline ::google::protobuf::uint32 isground() const;
  inline void set_isground(::google::protobuf::uint32 value);

  // optional uint32 isOp = 10;
  inline bool has_isop() const;
  inline void clear_isop();
  static const int kIsOpFieldNumber = 10;
  inline ::google::protobuf::uint32 isop() const;
  inline void set_isop(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:com.spplus.buff.StateBean)
 private:
  inline void set_has_cimid();
  inline void clear_has_cimid();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_isboard();
  inline void clear_has_isboard();
  inline void set_has_iselectric();
  inline void clear_has_iselectric();
  inline void set_has_volcolor();
  inline void clear_has_volcolor();
  inline void set_has_unittype();
  inline void clear_has_unittype();
  inline void set_has_stationcim();
  inline void clear_has_stationcim();
  inline void set_has_ispower();
  inline void clear_has_ispower();
  inline void set_has_isground();
  inline void clear_has_isground();
  inline void set_has_isop();
  inline void clear_has_isop();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* cimid_;
  ::google::protobuf::uint32 state_;
  ::google::protobuf::uint32 isboard_;
  ::std::string* volcolor_;
  ::google::protobuf::uint32 iselectric_;
  ::google::protobuf::uint32 unittype_;
  ::std::string* stationcim_;
  ::google::protobuf::uint32 ispower_;
  ::google::protobuf::uint32 isground_;
  ::google::protobuf::uint32 isop_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_msgbean_2eproto();
  friend void protobuf_AssignDesc_msgbean_2eproto();
  friend void protobuf_ShutdownFile_msgbean_2eproto();

  void InitAsDefaultInstance();
  static StateBean* default_instance_;
};
// -------------------------------------------------------------------

class StationTypeBean : public ::google::protobuf::Message {
 public:
  StationTypeBean();
  virtual ~StationTypeBean();

  StationTypeBean(const StationTypeBean& from);

  inline StationTypeBean& operator=(const StationTypeBean& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StationTypeBean& default_instance();

  void Swap(StationTypeBean* other);

  // implements Message ----------------------------------------------

  StationTypeBean* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StationTypeBean& from);
  void MergeFrom(const StationTypeBean& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 ordernum = 2;
  inline bool has_ordernum() const;
  inline void clear_ordernum();
  static const int kOrdernumFieldNumber = 2;
  inline ::google::protobuf::uint32 ordernum() const;
  inline void set_ordernum(::google::protobuf::uint32 value);

  // optional bytes Name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated .com.spplus.buff.StationBean StationList = 4;
  inline int stationlist_size() const;
  inline void clear_stationlist();
  static const int kStationListFieldNumber = 4;
  inline const ::com::spplus::buff::StationBean& stationlist(int index) const;
  inline ::com::spplus::buff::StationBean* mutable_stationlist(int index);
  inline ::com::spplus::buff::StationBean* add_stationlist();
  inline const ::google::protobuf::RepeatedPtrField< ::com::spplus::buff::StationBean >&
      stationlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::spplus::buff::StationBean >*
      mutable_stationlist();

  // @@protoc_insertion_point(class_scope:com.spplus.buff.StationTypeBean)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_ordernum();
  inline void clear_has_ordernum();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 ordernum_;
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::com::spplus::buff::StationBean > stationlist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_msgbean_2eproto();
  friend void protobuf_AssignDesc_msgbean_2eproto();
  friend void protobuf_ShutdownFile_msgbean_2eproto();

  void InitAsDefaultInstance();
  static StationTypeBean* default_instance_;
};
// -------------------------------------------------------------------

class StationBean : public ::google::protobuf::Message {
 public:
  StationBean();
  virtual ~StationBean();

  StationBean(const StationBean& from);

  inline StationBean& operator=(const StationBean& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StationBean& default_instance();

  void Swap(StationBean* other);

  // implements Message ----------------------------------------------

  StationBean* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StationBean& from);
  void MergeFrom(const StationBean& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 CategoryId = 2;
  inline bool has_categoryid() const;
  inline void clear_categoryid();
  static const int kCategoryIdFieldNumber = 2;
  inline ::google::protobuf::uint32 categoryid() const;
  inline void set_categoryid(::google::protobuf::uint32 value);

  // optional bytes Name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional bytes CimId = 4;
  inline bool has_cimid() const;
  inline void clear_cimid();
  static const int kCimIdFieldNumber = 4;
  inline const ::std::string& cimid() const;
  inline void set_cimid(const ::std::string& value);
  inline void set_cimid(const char* value);
  inline void set_cimid(const void* value, size_t size);
  inline ::std::string* mutable_cimid();
  inline ::std::string* release_cimid();
  inline void set_allocated_cimid(::std::string* cimid);

  // optional bytes CurrentName = 5;
  inline bool has_currentname() const;
  inline void clear_currentname();
  static const int kCurrentNameFieldNumber = 5;
  inline const ::std::string& currentname() const;
  inline void set_currentname(const ::std::string& value);
  inline void set_currentname(const char* value);
  inline void set_currentname(const void* value, size_t size);
  inline ::std::string* mutable_currentname();
  inline ::std::string* release_currentname();
  inline void set_allocated_currentname(::std::string* currentname);

  // optional bytes Path = 6;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 6;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const void* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  inline void set_allocated_path(::std::string* path);

  // @@protoc_insertion_point(class_scope:com.spplus.buff.StationBean)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_categoryid();
  inline void clear_has_categoryid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_cimid();
  inline void clear_has_cimid();
  inline void set_has_currentname();
  inline void clear_has_currentname();
  inline void set_has_path();
  inline void clear_has_path();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 categoryid_;
  ::std::string* name_;
  ::std::string* cimid_;
  ::std::string* currentname_;
  ::std::string* path_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_msgbean_2eproto();
  friend void protobuf_AssignDesc_msgbean_2eproto();
  friend void protobuf_ShutdownFile_msgbean_2eproto();

  void InitAsDefaultInstance();
  static StationBean* default_instance_;
};
// -------------------------------------------------------------------

class UnitsBean : public ::google::protobuf::Message {
 public:
  UnitsBean();
  virtual ~UnitsBean();

  UnitsBean(const UnitsBean& from);

  inline UnitsBean& operator=(const UnitsBean& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UnitsBean& default_instance();

  void Swap(UnitsBean* other);

  // implements Message ----------------------------------------------

  UnitsBean* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnitsBean& from);
  void MergeFrom(const UnitsBean& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 StationId = 2;
  inline bool has_stationid() const;
  inline void clear_stationid();
  static const int kStationIdFieldNumber = 2;
  inline ::google::protobuf::uint32 stationid() const;
  inline void set_stationid(::google::protobuf::uint32 value);

  // optional bytes Name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional bytes CimId = 4;
  inline bool has_cimid() const;
  inline void clear_cimid();
  static const int kCimIdFieldNumber = 4;
  inline const ::std::string& cimid() const;
  inline void set_cimid(const ::std::string& value);
  inline void set_cimid(const char* value);
  inline void set_cimid(const void* value, size_t size);
  inline ::std::string* mutable_cimid();
  inline ::std::string* release_cimid();
  inline void set_allocated_cimid(::std::string* cimid);

  // optional bytes VolId = 5;
  inline bool has_volid() const;
  inline void clear_volid();
  static const int kVolIdFieldNumber = 5;
  inline const ::std::string& volid() const;
  inline void set_volid(const ::std::string& value);
  inline void set_volid(const char* value);
  inline void set_volid(const void* value, size_t size);
  inline ::std::string* mutable_volid();
  inline ::std::string* release_volid();
  inline void set_allocated_volid(::std::string* volid);

  // optional bytes UnitType = 6;
  inline bool has_unittype() const;
  inline void clear_unittype();
  static const int kUnitTypeFieldNumber = 6;
  inline const ::std::string& unittype() const;
  inline void set_unittype(const ::std::string& value);
  inline void set_unittype(const char* value);
  inline void set_unittype(const void* value, size_t size);
  inline ::std::string* mutable_unittype();
  inline ::std::string* release_unittype();
  inline void set_allocated_unittype(::std::string* unittype);

  // optional bytes SelfType = 7;
  inline bool has_selftype() const;
  inline void clear_selftype();
  static const int kSelfTypeFieldNumber = 7;
  inline const ::std::string& selftype() const;
  inline void set_selftype(const ::std::string& value);
  inline void set_selftype(const char* value);
  inline void set_selftype(const void* value, size_t size);
  inline ::std::string* mutable_selftype();
  inline ::std::string* release_selftype();
  inline void set_allocated_selftype(::std::string* selftype);

  // @@protoc_insertion_point(class_scope:com.spplus.buff.UnitsBean)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_stationid();
  inline void clear_has_stationid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_cimid();
  inline void clear_has_cimid();
  inline void set_has_volid();
  inline void clear_has_volid();
  inline void set_has_unittype();
  inline void clear_has_unittype();
  inline void set_has_selftype();
  inline void clear_has_selftype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 stationid_;
  ::std::string* name_;
  ::std::string* cimid_;
  ::std::string* volid_;
  ::std::string* unittype_;
  ::std::string* selftype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_msgbean_2eproto();
  friend void protobuf_AssignDesc_msgbean_2eproto();
  friend void protobuf_ShutdownFile_msgbean_2eproto();

  void InitAsDefaultInstance();
  static UnitsBean* default_instance_;
};
// -------------------------------------------------------------------

class SavingBean : public ::google::protobuf::Message {
 public:
  SavingBean();
  virtual ~SavingBean();

  SavingBean(const SavingBean& from);

  inline SavingBean& operator=(const SavingBean& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SavingBean& default_instance();

  void Swap(SavingBean* other);

  // implements Message ----------------------------------------------

  SavingBean* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SavingBean& from);
  void MergeFrom(const SavingBean& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional bytes Name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional bytes SaveTime = 3;
  inline bool has_savetime() const;
  inline void clear_savetime();
  static const int kSaveTimeFieldNumber = 3;
  inline const ::std::string& savetime() const;
  inline void set_savetime(const ::std::string& value);
  inline void set_savetime(const char* value);
  inline void set_savetime(const void* value, size_t size);
  inline ::std::string* mutable_savetime();
  inline ::std::string* release_savetime();
  inline void set_allocated_savetime(::std::string* savetime);

  // @@protoc_insertion_point(class_scope:com.spplus.buff.SavingBean)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_savetime();
  inline void clear_has_savetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* savetime_;
  ::google::protobuf::uint32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_msgbean_2eproto();
  friend void protobuf_AssignDesc_msgbean_2eproto();
  friend void protobuf_ShutdownFile_msgbean_2eproto();

  void InitAsDefaultInstance();
  static SavingBean* default_instance_;
};
// -------------------------------------------------------------------

class RuleBean : public ::google::protobuf::Message {
 public:
  RuleBean();
  virtual ~RuleBean();

  RuleBean(const RuleBean& from);

  inline RuleBean& operator=(const RuleBean& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RuleBean& default_instance();

  void Swap(RuleBean* other);

  // implements Message ----------------------------------------------

  RuleBean* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RuleBean& from);
  void MergeFrom(const RuleBean& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional bytes Name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional bytes AlarmLevel = 3;
  inline bool has_alarmlevel() const;
  inline void clear_alarmlevel();
  static const int kAlarmLevelFieldNumber = 3;
  inline const ::std::string& alarmlevel() const;
  inline void set_alarmlevel(const ::std::string& value);
  inline void set_alarmlevel(const char* value);
  inline void set_alarmlevel(const void* value, size_t size);
  inline ::std::string* mutable_alarmlevel();
  inline ::std::string* release_alarmlevel();
  inline void set_allocated_alarmlevel(::std::string* alarmlevel);

  // optional bytes Description = 4;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 4;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const void* value, size_t size);
  inline ::std::string* mutable_description();
  inline ::std::string* release_description();
  inline void set_allocated_description(::std::string* description);

  // @@protoc_insertion_point(class_scope:com.spplus.buff.RuleBean)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_alarmlevel();
  inline void clear_has_alarmlevel();
  inline void set_has_description();
  inline void clear_has_description();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* alarmlevel_;
  ::std::string* description_;
  ::google::protobuf::uint32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_msgbean_2eproto();
  friend void protobuf_AssignDesc_msgbean_2eproto();
  friend void protobuf_ShutdownFile_msgbean_2eproto();

  void InitAsDefaultInstance();
  static RuleBean* default_instance_;
};
// -------------------------------------------------------------------

class TicketMsionBean : public ::google::protobuf::Message {
 public:
  TicketMsionBean();
  virtual ~TicketMsionBean();

  TicketMsionBean(const TicketMsionBean& from);

  inline TicketMsionBean& operator=(const TicketMsionBean& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TicketMsionBean& default_instance();

  void Swap(TicketMsionBean* other);

  // implements Message ----------------------------------------------

  TicketMsionBean* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TicketMsionBean& from);
  void MergeFrom(const TicketMsionBean& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 UserId = 2;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 userid() const;
  inline void set_userid(::google::protobuf::uint32 value);

  // optional bytes UserName = 3;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUserNameFieldNumber = 3;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const void* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // optional uint32 ActUserId = 4;
  inline bool has_actuserid() const;
  inline void clear_actuserid();
  static const int kActUserIdFieldNumber = 4;
  inline ::google::protobuf::uint32 actuserid() const;
  inline void set_actuserid(::google::protobuf::uint32 value);

  // optional bytes ActUserName = 5;
  inline bool has_actusername() const;
  inline void clear_actusername();
  static const int kActUserNameFieldNumber = 5;
  inline const ::std::string& actusername() const;
  inline void set_actusername(const ::std::string& value);
  inline void set_actusername(const char* value);
  inline void set_actusername(const void* value, size_t size);
  inline ::std::string* mutable_actusername();
  inline ::std::string* release_actusername();
  inline void set_allocated_actusername(::std::string* actusername);

  // optional bytes Name = 6;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 6;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional bytes PublishTime = 7;
  inline bool has_publishtime() const;
  inline void clear_publishtime();
  static const int kPublishTimeFieldNumber = 7;
  inline const ::std::string& publishtime() const;
  inline void set_publishtime(const ::std::string& value);
  inline void set_publishtime(const char* value);
  inline void set_publishtime(const void* value, size_t size);
  inline ::std::string* mutable_publishtime();
  inline ::std::string* release_publishtime();
  inline void set_allocated_publishtime(::std::string* publishtime);

  // @@protoc_insertion_point(class_scope:com.spplus.buff.TicketMsionBean)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_actuserid();
  inline void clear_has_actuserid();
  inline void set_has_actusername();
  inline void clear_has_actusername();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_publishtime();
  inline void clear_has_publishtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 userid_;
  ::std::string* username_;
  ::std::string* actusername_;
  ::std::string* name_;
  ::std::string* publishtime_;
  ::google::protobuf::uint32 actuserid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_msgbean_2eproto();
  friend void protobuf_AssignDesc_msgbean_2eproto();
  friend void protobuf_ShutdownFile_msgbean_2eproto();

  void InitAsDefaultInstance();
  static TicketMsionBean* default_instance_;
};
// -------------------------------------------------------------------

class TicketBean : public ::google::protobuf::Message {
 public:
  TicketBean();
  virtual ~TicketBean();

  TicketBean(const TicketBean& from);

  inline TicketBean& operator=(const TicketBean& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TicketBean& default_instance();

  void Swap(TicketBean* other);

  // implements Message ----------------------------------------------

  TicketBean* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TicketBean& from);
  void MergeFrom(const TicketBean& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 CuserId = 2;
  inline bool has_cuserid() const;
  inline void clear_cuserid();
  static const int kCuserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 cuserid() const;
  inline void set_cuserid(::google::protobuf::uint32 value);

  // optional bytes CuserName = 3;
  inline bool has_cusername() const;
  inline void clear_cusername();
  static const int kCuserNameFieldNumber = 3;
  inline const ::std::string& cusername() const;
  inline void set_cusername(const ::std::string& value);
  inline void set_cusername(const char* value);
  inline void set_cusername(const void* value, size_t size);
  inline ::std::string* mutable_cusername();
  inline ::std::string* release_cusername();
  inline void set_allocated_cusername(::std::string* cusername);

  // optional uint32 AuserId = 4;
  inline bool has_auserid() const;
  inline void clear_auserid();
  static const int kAuserIdFieldNumber = 4;
  inline ::google::protobuf::uint32 auserid() const;
  inline void set_auserid(::google::protobuf::uint32 value);

  // optional bytes AuserName = 5;
  inline bool has_ausername() const;
  inline void clear_ausername();
  static const int kAuserNameFieldNumber = 5;
  inline const ::std::string& ausername() const;
  inline void set_ausername(const ::std::string& value);
  inline void set_ausername(const char* value);
  inline void set_ausername(const void* value, size_t size);
  inline ::std::string* mutable_ausername();
  inline ::std::string* release_ausername();
  inline void set_allocated_ausername(::std::string* ausername);

  // optional uint32 MissionId = 6;
  inline bool has_missionid() const;
  inline void clear_missionid();
  static const int kMissionIdFieldNumber = 6;
  inline ::google::protobuf::uint32 missionid() const;
  inline void set_missionid(::google::protobuf::uint32 value);

  // optional bytes MissionName = 7;
  inline bool has_missionname() const;
  inline void clear_missionname();
  static const int kMissionNameFieldNumber = 7;
  inline const ::std::string& missionname() const;
  inline void set_missionname(const ::std::string& value);
  inline void set_missionname(const char* value);
  inline void set_missionname(const void* value, size_t size);
  inline ::std::string* mutable_missionname();
  inline ::std::string* release_missionname();
  inline void set_allocated_missionname(::std::string* missionname);

  // optional bytes No = 8;
  inline bool has_no() const;
  inline void clear_no();
  static const int kNoFieldNumber = 8;
  inline const ::std::string& no() const;
  inline void set_no(const ::std::string& value);
  inline void set_no(const char* value);
  inline void set_no(const void* value, size_t size);
  inline ::std::string* mutable_no();
  inline ::std::string* release_no();
  inline void set_allocated_no(::std::string* no);

  // optional bytes ActionType = 9;
  inline bool has_actiontype() const;
  inline void clear_actiontype();
  static const int kActionTypeFieldNumber = 9;
  inline const ::std::string& actiontype() const;
  inline void set_actiontype(const ::std::string& value);
  inline void set_actiontype(const char* value);
  inline void set_actiontype(const void* value, size_t size);
  inline ::std::string* mutable_actiontype();
  inline ::std::string* release_actiontype();
  inline void set_allocated_actiontype(::std::string* actiontype);

  // optional bytes info = 10;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 10;
  inline const ::std::string& info() const;
  inline void set_info(const ::std::string& value);
  inline void set_info(const char* value);
  inline void set_info(const void* value, size_t size);
  inline ::std::string* mutable_info();
  inline ::std::string* release_info();
  inline void set_allocated_info(::std::string* info);

  // optional bytes ActionPerson = 11;
  inline bool has_actionperson() const;
  inline void clear_actionperson();
  static const int kActionPersonFieldNumber = 11;
  inline const ::std::string& actionperson() const;
  inline void set_actionperson(const ::std::string& value);
  inline void set_actionperson(const char* value);
  inline void set_actionperson(const void* value, size_t size);
  inline ::std::string* mutable_actionperson();
  inline ::std::string* release_actionperson();
  inline void set_allocated_actionperson(::std::string* actionperson);

  // optional bytes ProtectPerson = 12;
  inline bool has_protectperson() const;
  inline void clear_protectperson();
  static const int kProtectPersonFieldNumber = 12;
  inline const ::std::string& protectperson() const;
  inline void set_protectperson(const ::std::string& value);
  inline void set_protectperson(const char* value);
  inline void set_protectperson(const void* value, size_t size);
  inline ::std::string* mutable_protectperson();
  inline ::std::string* release_protectperson();
  inline void set_allocated_protectperson(::std::string* protectperson);

  // optional bytes ChargePerson = 13;
  inline bool has_chargeperson() const;
  inline void clear_chargeperson();
  static const int kChargePersonFieldNumber = 13;
  inline const ::std::string& chargeperson() const;
  inline void set_chargeperson(const ::std::string& value);
  inline void set_chargeperson(const char* value);
  inline void set_chargeperson(const void* value, size_t size);
  inline ::std::string* mutable_chargeperson();
  inline ::std::string* release_chargeperson();
  inline void set_allocated_chargeperson(::std::string* chargeperson);

  // optional bytes StartTime = 14;
  inline bool has_starttime() const;
  inline void clear_starttime();
  static const int kStartTimeFieldNumber = 14;
  inline const ::std::string& starttime() const;
  inline void set_starttime(const ::std::string& value);
  inline void set_starttime(const char* value);
  inline void set_starttime(const void* value, size_t size);
  inline ::std::string* mutable_starttime();
  inline ::std::string* release_starttime();
  inline void set_allocated_starttime(::std::string* starttime);

  // optional bytes EndTime = 15;
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndTimeFieldNumber = 15;
  inline const ::std::string& endtime() const;
  inline void set_endtime(const ::std::string& value);
  inline void set_endtime(const char* value);
  inline void set_endtime(const void* value, size_t size);
  inline ::std::string* mutable_endtime();
  inline ::std::string* release_endtime();
  inline void set_allocated_endtime(::std::string* endtime);

  // optional bytes PublishTime = 16;
  inline bool has_publishtime() const;
  inline void clear_publishtime();
  static const int kPublishTimeFieldNumber = 16;
  inline const ::std::string& publishtime() const;
  inline void set_publishtime(const ::std::string& value);
  inline void set_publishtime(const char* value);
  inline void set_publishtime(const void* value, size_t size);
  inline ::std::string* mutable_publishtime();
  inline ::std::string* release_publishtime();
  inline void set_allocated_publishtime(::std::string* publishtime);

  // @@protoc_insertion_point(class_scope:com.spplus.buff.TicketBean)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_cuserid();
  inline void clear_has_cuserid();
  inline void set_has_cusername();
  inline void clear_has_cusername();
  inline void set_has_auserid();
  inline void clear_has_auserid();
  inline void set_has_ausername();
  inline void clear_has_ausername();
  inline void set_has_missionid();
  inline void clear_has_missionid();
  inline void set_has_missionname();
  inline void clear_has_missionname();
  inline void set_has_no();
  inline void clear_has_no();
  inline void set_has_actiontype();
  inline void clear_has_actiontype();
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_actionperson();
  inline void clear_has_actionperson();
  inline void set_has_protectperson();
  inline void clear_has_protectperson();
  inline void set_has_chargeperson();
  inline void clear_has_chargeperson();
  inline void set_has_starttime();
  inline void clear_has_starttime();
  inline void set_has_endtime();
  inline void clear_has_endtime();
  inline void set_has_publishtime();
  inline void clear_has_publishtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 cuserid_;
  ::std::string* cusername_;
  ::std::string* ausername_;
  ::google::protobuf::uint32 auserid_;
  ::google::protobuf::uint32 missionid_;
  ::std::string* missionname_;
  ::std::string* no_;
  ::std::string* actiontype_;
  ::std::string* info_;
  ::std::string* actionperson_;
  ::std::string* protectperson_;
  ::std::string* chargeperson_;
  ::std::string* starttime_;
  ::std::string* endtime_;
  ::std::string* publishtime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(16 + 31) / 32];

  friend void  protobuf_AddDesc_msgbean_2eproto();
  friend void protobuf_AssignDesc_msgbean_2eproto();
  friend void protobuf_ShutdownFile_msgbean_2eproto();

  void InitAsDefaultInstance();
  static TicketBean* default_instance_;
};
// -------------------------------------------------------------------

class TicketActBean : public ::google::protobuf::Message {
 public:
  TicketActBean();
  virtual ~TicketActBean();

  TicketActBean(const TicketActBean& from);

  inline TicketActBean& operator=(const TicketActBean& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TicketActBean& default_instance();

  void Swap(TicketActBean* other);

  // implements Message ----------------------------------------------

  TicketActBean* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TicketActBean& from);
  void MergeFrom(const TicketActBean& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Ticketid = 1;
  inline bool has_ticketid() const;
  inline void clear_ticketid();
  static const int kTicketidFieldNumber = 1;
  inline ::google::protobuf::uint32 ticketid() const;
  inline void set_ticketid(::google::protobuf::uint32 value);

  // optional uint32 OrderNum = 2;
  inline bool has_ordernum() const;
  inline void clear_ordernum();
  static const int kOrderNumFieldNumber = 2;
  inline ::google::protobuf::uint32 ordernum() const;
  inline void set_ordernum(::google::protobuf::uint32 value);

  // optional bytes SystemContent = 3;
  inline bool has_systemcontent() const;
  inline void clear_systemcontent();
  static const int kSystemContentFieldNumber = 3;
  inline const ::std::string& systemcontent() const;
  inline void set_systemcontent(const ::std::string& value);
  inline void set_systemcontent(const char* value);
  inline void set_systemcontent(const void* value, size_t size);
  inline ::std::string* mutable_systemcontent();
  inline ::std::string* release_systemcontent();
  inline void set_allocated_systemcontent(::std::string* systemcontent);

  // optional bytes Content = 4;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 4;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const void* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:com.spplus.buff.TicketActBean)
 private:
  inline void set_has_ticketid();
  inline void clear_has_ticketid();
  inline void set_has_ordernum();
  inline void clear_has_ordernum();
  inline void set_has_systemcontent();
  inline void clear_has_systemcontent();
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 ticketid_;
  ::google::protobuf::uint32 ordernum_;
  ::std::string* systemcontent_;
  ::std::string* content_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_msgbean_2eproto();
  friend void protobuf_AssignDesc_msgbean_2eproto();
  friend void protobuf_ShutdownFile_msgbean_2eproto();

  void InitAsDefaultInstance();
  static TicketActBean* default_instance_;
};
// ===================================================================


// ===================================================================

// UserBean

// optional bytes userid = 1;
inline bool UserBean::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserBean::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserBean::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserBean::clear_userid() {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    userid_->clear();
  }
  clear_has_userid();
}
inline const ::std::string& UserBean::userid() const {
  return *userid_;
}
inline void UserBean::set_userid(const ::std::string& value) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void UserBean::set_userid(const char* value) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void UserBean::set_userid(const void* value, size_t size) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  userid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserBean::mutable_userid() {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  return userid_;
}
inline ::std::string* UserBean::release_userid() {
  clear_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = userid_;
    userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserBean::set_allocated_userid(::std::string* userid) {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (userid) {
    set_has_userid();
    userid_ = userid;
  } else {
    clear_has_userid();
    userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes username = 2;
inline bool UserBean::has_username() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserBean::set_has_username() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserBean::clear_has_username() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserBean::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& UserBean::username() const {
  return *username_;
}
inline void UserBean::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void UserBean::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void UserBean::set_username(const void* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserBean::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* UserBean::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserBean::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes userpwd = 3;
inline bool UserBean::has_userpwd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserBean::set_has_userpwd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserBean::clear_has_userpwd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserBean::clear_userpwd() {
  if (userpwd_ != &::google::protobuf::internal::kEmptyString) {
    userpwd_->clear();
  }
  clear_has_userpwd();
}
inline const ::std::string& UserBean::userpwd() const {
  return *userpwd_;
}
inline void UserBean::set_userpwd(const ::std::string& value) {
  set_has_userpwd();
  if (userpwd_ == &::google::protobuf::internal::kEmptyString) {
    userpwd_ = new ::std::string;
  }
  userpwd_->assign(value);
}
inline void UserBean::set_userpwd(const char* value) {
  set_has_userpwd();
  if (userpwd_ == &::google::protobuf::internal::kEmptyString) {
    userpwd_ = new ::std::string;
  }
  userpwd_->assign(value);
}
inline void UserBean::set_userpwd(const void* value, size_t size) {
  set_has_userpwd();
  if (userpwd_ == &::google::protobuf::internal::kEmptyString) {
    userpwd_ = new ::std::string;
  }
  userpwd_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserBean::mutable_userpwd() {
  set_has_userpwd();
  if (userpwd_ == &::google::protobuf::internal::kEmptyString) {
    userpwd_ = new ::std::string;
  }
  return userpwd_;
}
inline ::std::string* UserBean::release_userpwd() {
  clear_has_userpwd();
  if (userpwd_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = userpwd_;
    userpwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserBean::set_allocated_userpwd(::std::string* userpwd) {
  if (userpwd_ != &::google::protobuf::internal::kEmptyString) {
    delete userpwd_;
  }
  if (userpwd) {
    set_has_userpwd();
    userpwd_ = userpwd;
  } else {
    clear_has_userpwd();
    userpwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes userrole = 4;
inline bool UserBean::has_userrole() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserBean::set_has_userrole() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserBean::clear_has_userrole() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserBean::clear_userrole() {
  if (userrole_ != &::google::protobuf::internal::kEmptyString) {
    userrole_->clear();
  }
  clear_has_userrole();
}
inline const ::std::string& UserBean::userrole() const {
  return *userrole_;
}
inline void UserBean::set_userrole(const ::std::string& value) {
  set_has_userrole();
  if (userrole_ == &::google::protobuf::internal::kEmptyString) {
    userrole_ = new ::std::string;
  }
  userrole_->assign(value);
}
inline void UserBean::set_userrole(const char* value) {
  set_has_userrole();
  if (userrole_ == &::google::protobuf::internal::kEmptyString) {
    userrole_ = new ::std::string;
  }
  userrole_->assign(value);
}
inline void UserBean::set_userrole(const void* value, size_t size) {
  set_has_userrole();
  if (userrole_ == &::google::protobuf::internal::kEmptyString) {
    userrole_ = new ::std::string;
  }
  userrole_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserBean::mutable_userrole() {
  set_has_userrole();
  if (userrole_ == &::google::protobuf::internal::kEmptyString) {
    userrole_ = new ::std::string;
  }
  return userrole_;
}
inline ::std::string* UserBean::release_userrole() {
  clear_has_userrole();
  if (userrole_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = userrole_;
    userrole_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserBean::set_allocated_userrole(::std::string* userrole) {
  if (userrole_ != &::google::protobuf::internal::kEmptyString) {
    delete userrole_;
  }
  if (userrole) {
    set_has_userrole();
    userrole_ = userrole;
  } else {
    clear_has_userrole();
    userrole_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes rolename = 5;
inline bool UserBean::has_rolename() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserBean::set_has_rolename() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserBean::clear_has_rolename() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserBean::clear_rolename() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    rolename_->clear();
  }
  clear_has_rolename();
}
inline const ::std::string& UserBean::rolename() const {
  return *rolename_;
}
inline void UserBean::set_rolename(const ::std::string& value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void UserBean::set_rolename(const char* value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void UserBean::set_rolename(const void* value, size_t size) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserBean::mutable_rolename() {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  return rolename_;
}
inline ::std::string* UserBean::release_rolename() {
  clear_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rolename_;
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserBean::set_allocated_rolename(::std::string* rolename) {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (rolename) {
    set_has_rolename();
    rolename_ = rolename;
  } else {
    clear_has_rolename();
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes realname = 6;
inline bool UserBean::has_realname() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserBean::set_has_realname() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserBean::clear_has_realname() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserBean::clear_realname() {
  if (realname_ != &::google::protobuf::internal::kEmptyString) {
    realname_->clear();
  }
  clear_has_realname();
}
inline const ::std::string& UserBean::realname() const {
  return *realname_;
}
inline void UserBean::set_realname(const ::std::string& value) {
  set_has_realname();
  if (realname_ == &::google::protobuf::internal::kEmptyString) {
    realname_ = new ::std::string;
  }
  realname_->assign(value);
}
inline void UserBean::set_realname(const char* value) {
  set_has_realname();
  if (realname_ == &::google::protobuf::internal::kEmptyString) {
    realname_ = new ::std::string;
  }
  realname_->assign(value);
}
inline void UserBean::set_realname(const void* value, size_t size) {
  set_has_realname();
  if (realname_ == &::google::protobuf::internal::kEmptyString) {
    realname_ = new ::std::string;
  }
  realname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserBean::mutable_realname() {
  set_has_realname();
  if (realname_ == &::google::protobuf::internal::kEmptyString) {
    realname_ = new ::std::string;
  }
  return realname_;
}
inline ::std::string* UserBean::release_realname() {
  clear_has_realname();
  if (realname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = realname_;
    realname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserBean::set_allocated_realname(::std::string* realname) {
  if (realname_ != &::google::protobuf::internal::kEmptyString) {
    delete realname_;
  }
  if (realname) {
    set_has_realname();
    realname_ = realname;
  } else {
    clear_has_realname();
    realname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// UserRoleBean

// optional bytes userroleid = 1;
inline bool UserRoleBean::has_userroleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserRoleBean::set_has_userroleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserRoleBean::clear_has_userroleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserRoleBean::clear_userroleid() {
  if (userroleid_ != &::google::protobuf::internal::kEmptyString) {
    userroleid_->clear();
  }
  clear_has_userroleid();
}
inline const ::std::string& UserRoleBean::userroleid() const {
  return *userroleid_;
}
inline void UserRoleBean::set_userroleid(const ::std::string& value) {
  set_has_userroleid();
  if (userroleid_ == &::google::protobuf::internal::kEmptyString) {
    userroleid_ = new ::std::string;
  }
  userroleid_->assign(value);
}
inline void UserRoleBean::set_userroleid(const char* value) {
  set_has_userroleid();
  if (userroleid_ == &::google::protobuf::internal::kEmptyString) {
    userroleid_ = new ::std::string;
  }
  userroleid_->assign(value);
}
inline void UserRoleBean::set_userroleid(const void* value, size_t size) {
  set_has_userroleid();
  if (userroleid_ == &::google::protobuf::internal::kEmptyString) {
    userroleid_ = new ::std::string;
  }
  userroleid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserRoleBean::mutable_userroleid() {
  set_has_userroleid();
  if (userroleid_ == &::google::protobuf::internal::kEmptyString) {
    userroleid_ = new ::std::string;
  }
  return userroleid_;
}
inline ::std::string* UserRoleBean::release_userroleid() {
  clear_has_userroleid();
  if (userroleid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = userroleid_;
    userroleid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserRoleBean::set_allocated_userroleid(::std::string* userroleid) {
  if (userroleid_ != &::google::protobuf::internal::kEmptyString) {
    delete userroleid_;
  }
  if (userroleid) {
    set_has_userroleid();
    userroleid_ = userroleid;
  } else {
    clear_has_userroleid();
    userroleid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes userrolename = 2;
inline bool UserRoleBean::has_userrolename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserRoleBean::set_has_userrolename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserRoleBean::clear_has_userrolename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserRoleBean::clear_userrolename() {
  if (userrolename_ != &::google::protobuf::internal::kEmptyString) {
    userrolename_->clear();
  }
  clear_has_userrolename();
}
inline const ::std::string& UserRoleBean::userrolename() const {
  return *userrolename_;
}
inline void UserRoleBean::set_userrolename(const ::std::string& value) {
  set_has_userrolename();
  if (userrolename_ == &::google::protobuf::internal::kEmptyString) {
    userrolename_ = new ::std::string;
  }
  userrolename_->assign(value);
}
inline void UserRoleBean::set_userrolename(const char* value) {
  set_has_userrolename();
  if (userrolename_ == &::google::protobuf::internal::kEmptyString) {
    userrolename_ = new ::std::string;
  }
  userrolename_->assign(value);
}
inline void UserRoleBean::set_userrolename(const void* value, size_t size) {
  set_has_userrolename();
  if (userrolename_ == &::google::protobuf::internal::kEmptyString) {
    userrolename_ = new ::std::string;
  }
  userrolename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserRoleBean::mutable_userrolename() {
  set_has_userrolename();
  if (userrolename_ == &::google::protobuf::internal::kEmptyString) {
    userrolename_ = new ::std::string;
  }
  return userrolename_;
}
inline ::std::string* UserRoleBean::release_userrolename() {
  clear_has_userrolename();
  if (userrolename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = userrolename_;
    userrolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserRoleBean::set_allocated_userrolename(::std::string* userrolename) {
  if (userrolename_ != &::google::protobuf::internal::kEmptyString) {
    delete userrolename_;
  }
  if (userrolename) {
    set_has_userrolename();
    userrolename_ = userrolename;
  } else {
    clear_has_userrolename();
    userrolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// StationRuleBean

// optional bytes stationCim = 1;
inline bool StationRuleBean::has_stationcim() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StationRuleBean::set_has_stationcim() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StationRuleBean::clear_has_stationcim() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StationRuleBean::clear_stationcim() {
  if (stationcim_ != &::google::protobuf::internal::kEmptyString) {
    stationcim_->clear();
  }
  clear_has_stationcim();
}
inline const ::std::string& StationRuleBean::stationcim() const {
  return *stationcim_;
}
inline void StationRuleBean::set_stationcim(const ::std::string& value) {
  set_has_stationcim();
  if (stationcim_ == &::google::protobuf::internal::kEmptyString) {
    stationcim_ = new ::std::string;
  }
  stationcim_->assign(value);
}
inline void StationRuleBean::set_stationcim(const char* value) {
  set_has_stationcim();
  if (stationcim_ == &::google::protobuf::internal::kEmptyString) {
    stationcim_ = new ::std::string;
  }
  stationcim_->assign(value);
}
inline void StationRuleBean::set_stationcim(const void* value, size_t size) {
  set_has_stationcim();
  if (stationcim_ == &::google::protobuf::internal::kEmptyString) {
    stationcim_ = new ::std::string;
  }
  stationcim_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StationRuleBean::mutable_stationcim() {
  set_has_stationcim();
  if (stationcim_ == &::google::protobuf::internal::kEmptyString) {
    stationcim_ = new ::std::string;
  }
  return stationcim_;
}
inline ::std::string* StationRuleBean::release_stationcim() {
  clear_has_stationcim();
  if (stationcim_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stationcim_;
    stationcim_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void StationRuleBean::set_allocated_stationcim(::std::string* stationcim) {
  if (stationcim_ != &::google::protobuf::internal::kEmptyString) {
    delete stationcim_;
  }
  if (stationcim) {
    set_has_stationcim();
    stationcim_ = stationcim;
  } else {
    clear_has_stationcim();
    stationcim_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes stationName = 2;
inline bool StationRuleBean::has_stationname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StationRuleBean::set_has_stationname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StationRuleBean::clear_has_stationname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StationRuleBean::clear_stationname() {
  if (stationname_ != &::google::protobuf::internal::kEmptyString) {
    stationname_->clear();
  }
  clear_has_stationname();
}
inline const ::std::string& StationRuleBean::stationname() const {
  return *stationname_;
}
inline void StationRuleBean::set_stationname(const ::std::string& value) {
  set_has_stationname();
  if (stationname_ == &::google::protobuf::internal::kEmptyString) {
    stationname_ = new ::std::string;
  }
  stationname_->assign(value);
}
inline void StationRuleBean::set_stationname(const char* value) {
  set_has_stationname();
  if (stationname_ == &::google::protobuf::internal::kEmptyString) {
    stationname_ = new ::std::string;
  }
  stationname_->assign(value);
}
inline void StationRuleBean::set_stationname(const void* value, size_t size) {
  set_has_stationname();
  if (stationname_ == &::google::protobuf::internal::kEmptyString) {
    stationname_ = new ::std::string;
  }
  stationname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StationRuleBean::mutable_stationname() {
  set_has_stationname();
  if (stationname_ == &::google::protobuf::internal::kEmptyString) {
    stationname_ = new ::std::string;
  }
  return stationname_;
}
inline ::std::string* StationRuleBean::release_stationname() {
  clear_has_stationname();
  if (stationname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stationname_;
    stationname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void StationRuleBean::set_allocated_stationname(::std::string* stationname) {
  if (stationname_ != &::google::protobuf::internal::kEmptyString) {
    delete stationname_;
  }
  if (stationname) {
    set_has_stationname();
    stationname_ = stationname;
  } else {
    clear_has_stationname();
    stationname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 ruleId = 3;
inline bool StationRuleBean::has_ruleid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StationRuleBean::set_has_ruleid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StationRuleBean::clear_has_ruleid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StationRuleBean::clear_ruleid() {
  ruleid_ = 0u;
  clear_has_ruleid();
}
inline ::google::protobuf::uint32 StationRuleBean::ruleid() const {
  return ruleid_;
}
inline void StationRuleBean::set_ruleid(::google::protobuf::uint32 value) {
  set_has_ruleid();
  ruleid_ = value;
}

// optional bytes ruleName = 4;
inline bool StationRuleBean::has_rulename() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StationRuleBean::set_has_rulename() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StationRuleBean::clear_has_rulename() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StationRuleBean::clear_rulename() {
  if (rulename_ != &::google::protobuf::internal::kEmptyString) {
    rulename_->clear();
  }
  clear_has_rulename();
}
inline const ::std::string& StationRuleBean::rulename() const {
  return *rulename_;
}
inline void StationRuleBean::set_rulename(const ::std::string& value) {
  set_has_rulename();
  if (rulename_ == &::google::protobuf::internal::kEmptyString) {
    rulename_ = new ::std::string;
  }
  rulename_->assign(value);
}
inline void StationRuleBean::set_rulename(const char* value) {
  set_has_rulename();
  if (rulename_ == &::google::protobuf::internal::kEmptyString) {
    rulename_ = new ::std::string;
  }
  rulename_->assign(value);
}
inline void StationRuleBean::set_rulename(const void* value, size_t size) {
  set_has_rulename();
  if (rulename_ == &::google::protobuf::internal::kEmptyString) {
    rulename_ = new ::std::string;
  }
  rulename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StationRuleBean::mutable_rulename() {
  set_has_rulename();
  if (rulename_ == &::google::protobuf::internal::kEmptyString) {
    rulename_ = new ::std::string;
  }
  return rulename_;
}
inline ::std::string* StationRuleBean::release_rulename() {
  clear_has_rulename();
  if (rulename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rulename_;
    rulename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void StationRuleBean::set_allocated_rulename(::std::string* rulename) {
  if (rulename_ != &::google::protobuf::internal::kEmptyString) {
    delete rulename_;
  }
  if (rulename) {
    set_has_rulename();
    rulename_ = rulename;
  } else {
    clear_has_rulename();
    rulename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes isUse = 5;
inline bool StationRuleBean::has_isuse() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StationRuleBean::set_has_isuse() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StationRuleBean::clear_has_isuse() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StationRuleBean::clear_isuse() {
  if (isuse_ != &::google::protobuf::internal::kEmptyString) {
    isuse_->clear();
  }
  clear_has_isuse();
}
inline const ::std::string& StationRuleBean::isuse() const {
  return *isuse_;
}
inline void StationRuleBean::set_isuse(const ::std::string& value) {
  set_has_isuse();
  if (isuse_ == &::google::protobuf::internal::kEmptyString) {
    isuse_ = new ::std::string;
  }
  isuse_->assign(value);
}
inline void StationRuleBean::set_isuse(const char* value) {
  set_has_isuse();
  if (isuse_ == &::google::protobuf::internal::kEmptyString) {
    isuse_ = new ::std::string;
  }
  isuse_->assign(value);
}
inline void StationRuleBean::set_isuse(const void* value, size_t size) {
  set_has_isuse();
  if (isuse_ == &::google::protobuf::internal::kEmptyString) {
    isuse_ = new ::std::string;
  }
  isuse_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StationRuleBean::mutable_isuse() {
  set_has_isuse();
  if (isuse_ == &::google::protobuf::internal::kEmptyString) {
    isuse_ = new ::std::string;
  }
  return isuse_;
}
inline ::std::string* StationRuleBean::release_isuse() {
  clear_has_isuse();
  if (isuse_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = isuse_;
    isuse_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void StationRuleBean::set_allocated_isuse(::std::string* isuse) {
  if (isuse_ != &::google::protobuf::internal::kEmptyString) {
    delete isuse_;
  }
  if (isuse) {
    set_has_isuse();
    isuse_ = isuse;
  } else {
    clear_has_isuse();
    isuse_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes isUseName = 6;
inline bool StationRuleBean::has_isusename() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void StationRuleBean::set_has_isusename() {
  _has_bits_[0] |= 0x00000020u;
}
inline void StationRuleBean::clear_has_isusename() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void StationRuleBean::clear_isusename() {
  if (isusename_ != &::google::protobuf::internal::kEmptyString) {
    isusename_->clear();
  }
  clear_has_isusename();
}
inline const ::std::string& StationRuleBean::isusename() const {
  return *isusename_;
}
inline void StationRuleBean::set_isusename(const ::std::string& value) {
  set_has_isusename();
  if (isusename_ == &::google::protobuf::internal::kEmptyString) {
    isusename_ = new ::std::string;
  }
  isusename_->assign(value);
}
inline void StationRuleBean::set_isusename(const char* value) {
  set_has_isusename();
  if (isusename_ == &::google::protobuf::internal::kEmptyString) {
    isusename_ = new ::std::string;
  }
  isusename_->assign(value);
}
inline void StationRuleBean::set_isusename(const void* value, size_t size) {
  set_has_isusename();
  if (isusename_ == &::google::protobuf::internal::kEmptyString) {
    isusename_ = new ::std::string;
  }
  isusename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StationRuleBean::mutable_isusename() {
  set_has_isusename();
  if (isusename_ == &::google::protobuf::internal::kEmptyString) {
    isusename_ = new ::std::string;
  }
  return isusename_;
}
inline ::std::string* StationRuleBean::release_isusename() {
  clear_has_isusename();
  if (isusename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = isusename_;
    isusename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void StationRuleBean::set_allocated_isusename(::std::string* isusename) {
  if (isusename_ != &::google::protobuf::internal::kEmptyString) {
    delete isusename_;
  }
  if (isusename) {
    set_has_isusename();
    isusename_ = isusename;
  } else {
    clear_has_isusename();
    isusename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CircleQueryBean

// optional bytes unitCim = 1;
inline bool CircleQueryBean::has_unitcim() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CircleQueryBean::set_has_unitcim() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CircleQueryBean::clear_has_unitcim() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CircleQueryBean::clear_unitcim() {
  if (unitcim_ != &::google::protobuf::internal::kEmptyString) {
    unitcim_->clear();
  }
  clear_has_unitcim();
}
inline const ::std::string& CircleQueryBean::unitcim() const {
  return *unitcim_;
}
inline void CircleQueryBean::set_unitcim(const ::std::string& value) {
  set_has_unitcim();
  if (unitcim_ == &::google::protobuf::internal::kEmptyString) {
    unitcim_ = new ::std::string;
  }
  unitcim_->assign(value);
}
inline void CircleQueryBean::set_unitcim(const char* value) {
  set_has_unitcim();
  if (unitcim_ == &::google::protobuf::internal::kEmptyString) {
    unitcim_ = new ::std::string;
  }
  unitcim_->assign(value);
}
inline void CircleQueryBean::set_unitcim(const void* value, size_t size) {
  set_has_unitcim();
  if (unitcim_ == &::google::protobuf::internal::kEmptyString) {
    unitcim_ = new ::std::string;
  }
  unitcim_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CircleQueryBean::mutable_unitcim() {
  set_has_unitcim();
  if (unitcim_ == &::google::protobuf::internal::kEmptyString) {
    unitcim_ = new ::std::string;
  }
  return unitcim_;
}
inline ::std::string* CircleQueryBean::release_unitcim() {
  clear_has_unitcim();
  if (unitcim_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = unitcim_;
    unitcim_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CircleQueryBean::set_allocated_unitcim(::std::string* unitcim) {
  if (unitcim_ != &::google::protobuf::internal::kEmptyString) {
    delete unitcim_;
  }
  if (unitcim) {
    set_has_unitcim();
    unitcim_ = unitcim;
  } else {
    clear_has_unitcim();
    unitcim_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes Name = 2;
inline bool CircleQueryBean::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CircleQueryBean::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CircleQueryBean::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CircleQueryBean::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CircleQueryBean::name() const {
  return *name_;
}
inline void CircleQueryBean::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CircleQueryBean::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CircleQueryBean::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CircleQueryBean::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* CircleQueryBean::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CircleQueryBean::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes stationCim = 3;
inline bool CircleQueryBean::has_stationcim() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CircleQueryBean::set_has_stationcim() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CircleQueryBean::clear_has_stationcim() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CircleQueryBean::clear_stationcim() {
  if (stationcim_ != &::google::protobuf::internal::kEmptyString) {
    stationcim_->clear();
  }
  clear_has_stationcim();
}
inline const ::std::string& CircleQueryBean::stationcim() const {
  return *stationcim_;
}
inline void CircleQueryBean::set_stationcim(const ::std::string& value) {
  set_has_stationcim();
  if (stationcim_ == &::google::protobuf::internal::kEmptyString) {
    stationcim_ = new ::std::string;
  }
  stationcim_->assign(value);
}
inline void CircleQueryBean::set_stationcim(const char* value) {
  set_has_stationcim();
  if (stationcim_ == &::google::protobuf::internal::kEmptyString) {
    stationcim_ = new ::std::string;
  }
  stationcim_->assign(value);
}
inline void CircleQueryBean::set_stationcim(const void* value, size_t size) {
  set_has_stationcim();
  if (stationcim_ == &::google::protobuf::internal::kEmptyString) {
    stationcim_ = new ::std::string;
  }
  stationcim_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CircleQueryBean::mutable_stationcim() {
  set_has_stationcim();
  if (stationcim_ == &::google::protobuf::internal::kEmptyString) {
    stationcim_ = new ::std::string;
  }
  return stationcim_;
}
inline ::std::string* CircleQueryBean::release_stationcim() {
  clear_has_stationcim();
  if (stationcim_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stationcim_;
    stationcim_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CircleQueryBean::set_allocated_stationcim(::std::string* stationcim) {
  if (stationcim_ != &::google::protobuf::internal::kEmptyString) {
    delete stationcim_;
  }
  if (stationcim) {
    set_has_stationcim();
    stationcim_ = stationcim;
  } else {
    clear_has_stationcim();
    stationcim_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes stationName = 4;
inline bool CircleQueryBean::has_stationname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CircleQueryBean::set_has_stationname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CircleQueryBean::clear_has_stationname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CircleQueryBean::clear_stationname() {
  if (stationname_ != &::google::protobuf::internal::kEmptyString) {
    stationname_->clear();
  }
  clear_has_stationname();
}
inline const ::std::string& CircleQueryBean::stationname() const {
  return *stationname_;
}
inline void CircleQueryBean::set_stationname(const ::std::string& value) {
  set_has_stationname();
  if (stationname_ == &::google::protobuf::internal::kEmptyString) {
    stationname_ = new ::std::string;
  }
  stationname_->assign(value);
}
inline void CircleQueryBean::set_stationname(const char* value) {
  set_has_stationname();
  if (stationname_ == &::google::protobuf::internal::kEmptyString) {
    stationname_ = new ::std::string;
  }
  stationname_->assign(value);
}
inline void CircleQueryBean::set_stationname(const void* value, size_t size) {
  set_has_stationname();
  if (stationname_ == &::google::protobuf::internal::kEmptyString) {
    stationname_ = new ::std::string;
  }
  stationname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CircleQueryBean::mutable_stationname() {
  set_has_stationname();
  if (stationname_ == &::google::protobuf::internal::kEmptyString) {
    stationname_ = new ::std::string;
  }
  return stationname_;
}
inline ::std::string* CircleQueryBean::release_stationname() {
  clear_has_stationname();
  if (stationname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stationname_;
    stationname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CircleQueryBean::set_allocated_stationname(::std::string* stationname) {
  if (stationname_ != &::google::protobuf::internal::kEmptyString) {
    delete stationname_;
  }
  if (stationname) {
    set_has_stationname();
    stationname_ = stationname;
  } else {
    clear_has_stationname();
    stationname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SignQueryBean

// optional bytes unitCim = 1;
inline bool SignQueryBean::has_unitcim() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SignQueryBean::set_has_unitcim() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SignQueryBean::clear_has_unitcim() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SignQueryBean::clear_unitcim() {
  if (unitcim_ != &::google::protobuf::internal::kEmptyString) {
    unitcim_->clear();
  }
  clear_has_unitcim();
}
inline const ::std::string& SignQueryBean::unitcim() const {
  return *unitcim_;
}
inline void SignQueryBean::set_unitcim(const ::std::string& value) {
  set_has_unitcim();
  if (unitcim_ == &::google::protobuf::internal::kEmptyString) {
    unitcim_ = new ::std::string;
  }
  unitcim_->assign(value);
}
inline void SignQueryBean::set_unitcim(const char* value) {
  set_has_unitcim();
  if (unitcim_ == &::google::protobuf::internal::kEmptyString) {
    unitcim_ = new ::std::string;
  }
  unitcim_->assign(value);
}
inline void SignQueryBean::set_unitcim(const void* value, size_t size) {
  set_has_unitcim();
  if (unitcim_ == &::google::protobuf::internal::kEmptyString) {
    unitcim_ = new ::std::string;
  }
  unitcim_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SignQueryBean::mutable_unitcim() {
  set_has_unitcim();
  if (unitcim_ == &::google::protobuf::internal::kEmptyString) {
    unitcim_ = new ::std::string;
  }
  return unitcim_;
}
inline ::std::string* SignQueryBean::release_unitcim() {
  clear_has_unitcim();
  if (unitcim_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = unitcim_;
    unitcim_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SignQueryBean::set_allocated_unitcim(::std::string* unitcim) {
  if (unitcim_ != &::google::protobuf::internal::kEmptyString) {
    delete unitcim_;
  }
  if (unitcim) {
    set_has_unitcim();
    unitcim_ = unitcim;
  } else {
    clear_has_unitcim();
    unitcim_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes unitCimName = 2;
inline bool SignQueryBean::has_unitcimname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SignQueryBean::set_has_unitcimname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SignQueryBean::clear_has_unitcimname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SignQueryBean::clear_unitcimname() {
  if (unitcimname_ != &::google::protobuf::internal::kEmptyString) {
    unitcimname_->clear();
  }
  clear_has_unitcimname();
}
inline const ::std::string& SignQueryBean::unitcimname() const {
  return *unitcimname_;
}
inline void SignQueryBean::set_unitcimname(const ::std::string& value) {
  set_has_unitcimname();
  if (unitcimname_ == &::google::protobuf::internal::kEmptyString) {
    unitcimname_ = new ::std::string;
  }
  unitcimname_->assign(value);
}
inline void SignQueryBean::set_unitcimname(const char* value) {
  set_has_unitcimname();
  if (unitcimname_ == &::google::protobuf::internal::kEmptyString) {
    unitcimname_ = new ::std::string;
  }
  unitcimname_->assign(value);
}
inline void SignQueryBean::set_unitcimname(const void* value, size_t size) {
  set_has_unitcimname();
  if (unitcimname_ == &::google::protobuf::internal::kEmptyString) {
    unitcimname_ = new ::std::string;
  }
  unitcimname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SignQueryBean::mutable_unitcimname() {
  set_has_unitcimname();
  if (unitcimname_ == &::google::protobuf::internal::kEmptyString) {
    unitcimname_ = new ::std::string;
  }
  return unitcimname_;
}
inline ::std::string* SignQueryBean::release_unitcimname() {
  clear_has_unitcimname();
  if (unitcimname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = unitcimname_;
    unitcimname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SignQueryBean::set_allocated_unitcimname(::std::string* unitcimname) {
  if (unitcimname_ != &::google::protobuf::internal::kEmptyString) {
    delete unitcimname_;
  }
  if (unitcimname) {
    set_has_unitcimname();
    unitcimname_ = unitcimname;
  } else {
    clear_has_unitcimname();
    unitcimname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes stationCim = 3;
inline bool SignQueryBean::has_stationcim() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SignQueryBean::set_has_stationcim() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SignQueryBean::clear_has_stationcim() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SignQueryBean::clear_stationcim() {
  if (stationcim_ != &::google::protobuf::internal::kEmptyString) {
    stationcim_->clear();
  }
  clear_has_stationcim();
}
inline const ::std::string& SignQueryBean::stationcim() const {
  return *stationcim_;
}
inline void SignQueryBean::set_stationcim(const ::std::string& value) {
  set_has_stationcim();
  if (stationcim_ == &::google::protobuf::internal::kEmptyString) {
    stationcim_ = new ::std::string;
  }
  stationcim_->assign(value);
}
inline void SignQueryBean::set_stationcim(const char* value) {
  set_has_stationcim();
  if (stationcim_ == &::google::protobuf::internal::kEmptyString) {
    stationcim_ = new ::std::string;
  }
  stationcim_->assign(value);
}
inline void SignQueryBean::set_stationcim(const void* value, size_t size) {
  set_has_stationcim();
  if (stationcim_ == &::google::protobuf::internal::kEmptyString) {
    stationcim_ = new ::std::string;
  }
  stationcim_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SignQueryBean::mutable_stationcim() {
  set_has_stationcim();
  if (stationcim_ == &::google::protobuf::internal::kEmptyString) {
    stationcim_ = new ::std::string;
  }
  return stationcim_;
}
inline ::std::string* SignQueryBean::release_stationcim() {
  clear_has_stationcim();
  if (stationcim_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stationcim_;
    stationcim_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SignQueryBean::set_allocated_stationcim(::std::string* stationcim) {
  if (stationcim_ != &::google::protobuf::internal::kEmptyString) {
    delete stationcim_;
  }
  if (stationcim) {
    set_has_stationcim();
    stationcim_ = stationcim;
  } else {
    clear_has_stationcim();
    stationcim_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes stationName = 4;
inline bool SignQueryBean::has_stationname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SignQueryBean::set_has_stationname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SignQueryBean::clear_has_stationname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SignQueryBean::clear_stationname() {
  if (stationname_ != &::google::protobuf::internal::kEmptyString) {
    stationname_->clear();
  }
  clear_has_stationname();
}
inline const ::std::string& SignQueryBean::stationname() const {
  return *stationname_;
}
inline void SignQueryBean::set_stationname(const ::std::string& value) {
  set_has_stationname();
  if (stationname_ == &::google::protobuf::internal::kEmptyString) {
    stationname_ = new ::std::string;
  }
  stationname_->assign(value);
}
inline void SignQueryBean::set_stationname(const char* value) {
  set_has_stationname();
  if (stationname_ == &::google::protobuf::internal::kEmptyString) {
    stationname_ = new ::std::string;
  }
  stationname_->assign(value);
}
inline void SignQueryBean::set_stationname(const void* value, size_t size) {
  set_has_stationname();
  if (stationname_ == &::google::protobuf::internal::kEmptyString) {
    stationname_ = new ::std::string;
  }
  stationname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SignQueryBean::mutable_stationname() {
  set_has_stationname();
  if (stationname_ == &::google::protobuf::internal::kEmptyString) {
    stationname_ = new ::std::string;
  }
  return stationname_;
}
inline ::std::string* SignQueryBean::release_stationname() {
  clear_has_stationname();
  if (stationname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stationname_;
    stationname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SignQueryBean::set_allocated_stationname(::std::string* stationname) {
  if (stationname_ != &::google::protobuf::internal::kEmptyString) {
    delete stationname_;
  }
  if (stationname) {
    set_has_stationname();
    stationname_ = stationname;
  } else {
    clear_has_stationname();
    stationname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes unitType = 5;
inline bool SignQueryBean::has_unittype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SignQueryBean::set_has_unittype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SignQueryBean::clear_has_unittype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SignQueryBean::clear_unittype() {
  if (unittype_ != &::google::protobuf::internal::kEmptyString) {
    unittype_->clear();
  }
  clear_has_unittype();
}
inline const ::std::string& SignQueryBean::unittype() const {
  return *unittype_;
}
inline void SignQueryBean::set_unittype(const ::std::string& value) {
  set_has_unittype();
  if (unittype_ == &::google::protobuf::internal::kEmptyString) {
    unittype_ = new ::std::string;
  }
  unittype_->assign(value);
}
inline void SignQueryBean::set_unittype(const char* value) {
  set_has_unittype();
  if (unittype_ == &::google::protobuf::internal::kEmptyString) {
    unittype_ = new ::std::string;
  }
  unittype_->assign(value);
}
inline void SignQueryBean::set_unittype(const void* value, size_t size) {
  set_has_unittype();
  if (unittype_ == &::google::protobuf::internal::kEmptyString) {
    unittype_ = new ::std::string;
  }
  unittype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SignQueryBean::mutable_unittype() {
  set_has_unittype();
  if (unittype_ == &::google::protobuf::internal::kEmptyString) {
    unittype_ = new ::std::string;
  }
  return unittype_;
}
inline ::std::string* SignQueryBean::release_unittype() {
  clear_has_unittype();
  if (unittype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = unittype_;
    unittype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SignQueryBean::set_allocated_unittype(::std::string* unittype) {
  if (unittype_ != &::google::protobuf::internal::kEmptyString) {
    delete unittype_;
  }
  if (unittype) {
    set_has_unittype();
    unittype_ = unittype;
  } else {
    clear_has_unittype();
    unittype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GswitchQueryBean

// optional bytes unitCim = 1;
inline bool GswitchQueryBean::has_unitcim() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GswitchQueryBean::set_has_unitcim() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GswitchQueryBean::clear_has_unitcim() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GswitchQueryBean::clear_unitcim() {
  if (unitcim_ != &::google::protobuf::internal::kEmptyString) {
    unitcim_->clear();
  }
  clear_has_unitcim();
}
inline const ::std::string& GswitchQueryBean::unitcim() const {
  return *unitcim_;
}
inline void GswitchQueryBean::set_unitcim(const ::std::string& value) {
  set_has_unitcim();
  if (unitcim_ == &::google::protobuf::internal::kEmptyString) {
    unitcim_ = new ::std::string;
  }
  unitcim_->assign(value);
}
inline void GswitchQueryBean::set_unitcim(const char* value) {
  set_has_unitcim();
  if (unitcim_ == &::google::protobuf::internal::kEmptyString) {
    unitcim_ = new ::std::string;
  }
  unitcim_->assign(value);
}
inline void GswitchQueryBean::set_unitcim(const void* value, size_t size) {
  set_has_unitcim();
  if (unitcim_ == &::google::protobuf::internal::kEmptyString) {
    unitcim_ = new ::std::string;
  }
  unitcim_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GswitchQueryBean::mutable_unitcim() {
  set_has_unitcim();
  if (unitcim_ == &::google::protobuf::internal::kEmptyString) {
    unitcim_ = new ::std::string;
  }
  return unitcim_;
}
inline ::std::string* GswitchQueryBean::release_unitcim() {
  clear_has_unitcim();
  if (unitcim_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = unitcim_;
    unitcim_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GswitchQueryBean::set_allocated_unitcim(::std::string* unitcim) {
  if (unitcim_ != &::google::protobuf::internal::kEmptyString) {
    delete unitcim_;
  }
  if (unitcim) {
    set_has_unitcim();
    unitcim_ = unitcim;
  } else {
    clear_has_unitcim();
    unitcim_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes unitCimName = 2;
inline bool GswitchQueryBean::has_unitcimname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GswitchQueryBean::set_has_unitcimname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GswitchQueryBean::clear_has_unitcimname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GswitchQueryBean::clear_unitcimname() {
  if (unitcimname_ != &::google::protobuf::internal::kEmptyString) {
    unitcimname_->clear();
  }
  clear_has_unitcimname();
}
inline const ::std::string& GswitchQueryBean::unitcimname() const {
  return *unitcimname_;
}
inline void GswitchQueryBean::set_unitcimname(const ::std::string& value) {
  set_has_unitcimname();
  if (unitcimname_ == &::google::protobuf::internal::kEmptyString) {
    unitcimname_ = new ::std::string;
  }
  unitcimname_->assign(value);
}
inline void GswitchQueryBean::set_unitcimname(const char* value) {
  set_has_unitcimname();
  if (unitcimname_ == &::google::protobuf::internal::kEmptyString) {
    unitcimname_ = new ::std::string;
  }
  unitcimname_->assign(value);
}
inline void GswitchQueryBean::set_unitcimname(const void* value, size_t size) {
  set_has_unitcimname();
  if (unitcimname_ == &::google::protobuf::internal::kEmptyString) {
    unitcimname_ = new ::std::string;
  }
  unitcimname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GswitchQueryBean::mutable_unitcimname() {
  set_has_unitcimname();
  if (unitcimname_ == &::google::protobuf::internal::kEmptyString) {
    unitcimname_ = new ::std::string;
  }
  return unitcimname_;
}
inline ::std::string* GswitchQueryBean::release_unitcimname() {
  clear_has_unitcimname();
  if (unitcimname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = unitcimname_;
    unitcimname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GswitchQueryBean::set_allocated_unitcimname(::std::string* unitcimname) {
  if (unitcimname_ != &::google::protobuf::internal::kEmptyString) {
    delete unitcimname_;
  }
  if (unitcimname) {
    set_has_unitcimname();
    unitcimname_ = unitcimname;
  } else {
    clear_has_unitcimname();
    unitcimname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes stationCim = 3;
inline bool GswitchQueryBean::has_stationcim() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GswitchQueryBean::set_has_stationcim() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GswitchQueryBean::clear_has_stationcim() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GswitchQueryBean::clear_stationcim() {
  if (stationcim_ != &::google::protobuf::internal::kEmptyString) {
    stationcim_->clear();
  }
  clear_has_stationcim();
}
inline const ::std::string& GswitchQueryBean::stationcim() const {
  return *stationcim_;
}
inline void GswitchQueryBean::set_stationcim(const ::std::string& value) {
  set_has_stationcim();
  if (stationcim_ == &::google::protobuf::internal::kEmptyString) {
    stationcim_ = new ::std::string;
  }
  stationcim_->assign(value);
}
inline void GswitchQueryBean::set_stationcim(const char* value) {
  set_has_stationcim();
  if (stationcim_ == &::google::protobuf::internal::kEmptyString) {
    stationcim_ = new ::std::string;
  }
  stationcim_->assign(value);
}
inline void GswitchQueryBean::set_stationcim(const void* value, size_t size) {
  set_has_stationcim();
  if (stationcim_ == &::google::protobuf::internal::kEmptyString) {
    stationcim_ = new ::std::string;
  }
  stationcim_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GswitchQueryBean::mutable_stationcim() {
  set_has_stationcim();
  if (stationcim_ == &::google::protobuf::internal::kEmptyString) {
    stationcim_ = new ::std::string;
  }
  return stationcim_;
}
inline ::std::string* GswitchQueryBean::release_stationcim() {
  clear_has_stationcim();
  if (stationcim_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stationcim_;
    stationcim_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GswitchQueryBean::set_allocated_stationcim(::std::string* stationcim) {
  if (stationcim_ != &::google::protobuf::internal::kEmptyString) {
    delete stationcim_;
  }
  if (stationcim) {
    set_has_stationcim();
    stationcim_ = stationcim;
  } else {
    clear_has_stationcim();
    stationcim_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes stationName = 4;
inline bool GswitchQueryBean::has_stationname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GswitchQueryBean::set_has_stationname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GswitchQueryBean::clear_has_stationname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GswitchQueryBean::clear_stationname() {
  if (stationname_ != &::google::protobuf::internal::kEmptyString) {
    stationname_->clear();
  }
  clear_has_stationname();
}
inline const ::std::string& GswitchQueryBean::stationname() const {
  return *stationname_;
}
inline void GswitchQueryBean::set_stationname(const ::std::string& value) {
  set_has_stationname();
  if (stationname_ == &::google::protobuf::internal::kEmptyString) {
    stationname_ = new ::std::string;
  }
  stationname_->assign(value);
}
inline void GswitchQueryBean::set_stationname(const char* value) {
  set_has_stationname();
  if (stationname_ == &::google::protobuf::internal::kEmptyString) {
    stationname_ = new ::std::string;
  }
  stationname_->assign(value);
}
inline void GswitchQueryBean::set_stationname(const void* value, size_t size) {
  set_has_stationname();
  if (stationname_ == &::google::protobuf::internal::kEmptyString) {
    stationname_ = new ::std::string;
  }
  stationname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GswitchQueryBean::mutable_stationname() {
  set_has_stationname();
  if (stationname_ == &::google::protobuf::internal::kEmptyString) {
    stationname_ = new ::std::string;
  }
  return stationname_;
}
inline ::std::string* GswitchQueryBean::release_stationname() {
  clear_has_stationname();
  if (stationname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stationname_;
    stationname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GswitchQueryBean::set_allocated_stationname(::std::string* stationname) {
  if (stationname_ != &::google::protobuf::internal::kEmptyString) {
    delete stationname_;
  }
  if (stationname) {
    set_has_stationname();
    stationname_ = stationname;
  } else {
    clear_has_stationname();
    stationname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes unitType = 5;
inline bool GswitchQueryBean::has_unittype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GswitchQueryBean::set_has_unittype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GswitchQueryBean::clear_has_unittype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GswitchQueryBean::clear_unittype() {
  if (unittype_ != &::google::protobuf::internal::kEmptyString) {
    unittype_->clear();
  }
  clear_has_unittype();
}
inline const ::std::string& GswitchQueryBean::unittype() const {
  return *unittype_;
}
inline void GswitchQueryBean::set_unittype(const ::std::string& value) {
  set_has_unittype();
  if (unittype_ == &::google::protobuf::internal::kEmptyString) {
    unittype_ = new ::std::string;
  }
  unittype_->assign(value);
}
inline void GswitchQueryBean::set_unittype(const char* value) {
  set_has_unittype();
  if (unittype_ == &::google::protobuf::internal::kEmptyString) {
    unittype_ = new ::std::string;
  }
  unittype_->assign(value);
}
inline void GswitchQueryBean::set_unittype(const void* value, size_t size) {
  set_has_unittype();
  if (unittype_ == &::google::protobuf::internal::kEmptyString) {
    unittype_ = new ::std::string;
  }
  unittype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GswitchQueryBean::mutable_unittype() {
  set_has_unittype();
  if (unittype_ == &::google::protobuf::internal::kEmptyString) {
    unittype_ = new ::std::string;
  }
  return unittype_;
}
inline ::std::string* GswitchQueryBean::release_unittype() {
  clear_has_unittype();
  if (unittype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = unittype_;
    unittype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GswitchQueryBean::set_allocated_unittype(::std::string* unittype) {
  if (unittype_ != &::google::protobuf::internal::kEmptyString) {
    delete unittype_;
  }
  if (unittype) {
    set_has_unittype();
    unittype_ = unittype;
  } else {
    clear_has_unittype();
    unittype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// MsetQueryBean

// optional bytes unitCim = 1;
inline bool MsetQueryBean::has_unitcim() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsetQueryBean::set_has_unitcim() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsetQueryBean::clear_has_unitcim() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsetQueryBean::clear_unitcim() {
  if (unitcim_ != &::google::protobuf::internal::kEmptyString) {
    unitcim_->clear();
  }
  clear_has_unitcim();
}
inline const ::std::string& MsetQueryBean::unitcim() const {
  return *unitcim_;
}
inline void MsetQueryBean::set_unitcim(const ::std::string& value) {
  set_has_unitcim();
  if (unitcim_ == &::google::protobuf::internal::kEmptyString) {
    unitcim_ = new ::std::string;
  }
  unitcim_->assign(value);
}
inline void MsetQueryBean::set_unitcim(const char* value) {
  set_has_unitcim();
  if (unitcim_ == &::google::protobuf::internal::kEmptyString) {
    unitcim_ = new ::std::string;
  }
  unitcim_->assign(value);
}
inline void MsetQueryBean::set_unitcim(const void* value, size_t size) {
  set_has_unitcim();
  if (unitcim_ == &::google::protobuf::internal::kEmptyString) {
    unitcim_ = new ::std::string;
  }
  unitcim_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsetQueryBean::mutable_unitcim() {
  set_has_unitcim();
  if (unitcim_ == &::google::protobuf::internal::kEmptyString) {
    unitcim_ = new ::std::string;
  }
  return unitcim_;
}
inline ::std::string* MsetQueryBean::release_unitcim() {
  clear_has_unitcim();
  if (unitcim_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = unitcim_;
    unitcim_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MsetQueryBean::set_allocated_unitcim(::std::string* unitcim) {
  if (unitcim_ != &::google::protobuf::internal::kEmptyString) {
    delete unitcim_;
  }
  if (unitcim) {
    set_has_unitcim();
    unitcim_ = unitcim;
  } else {
    clear_has_unitcim();
    unitcim_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes unitCimName = 2;
inline bool MsetQueryBean::has_unitcimname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsetQueryBean::set_has_unitcimname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsetQueryBean::clear_has_unitcimname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsetQueryBean::clear_unitcimname() {
  if (unitcimname_ != &::google::protobuf::internal::kEmptyString) {
    unitcimname_->clear();
  }
  clear_has_unitcimname();
}
inline const ::std::string& MsetQueryBean::unitcimname() const {
  return *unitcimname_;
}
inline void MsetQueryBean::set_unitcimname(const ::std::string& value) {
  set_has_unitcimname();
  if (unitcimname_ == &::google::protobuf::internal::kEmptyString) {
    unitcimname_ = new ::std::string;
  }
  unitcimname_->assign(value);
}
inline void MsetQueryBean::set_unitcimname(const char* value) {
  set_has_unitcimname();
  if (unitcimname_ == &::google::protobuf::internal::kEmptyString) {
    unitcimname_ = new ::std::string;
  }
  unitcimname_->assign(value);
}
inline void MsetQueryBean::set_unitcimname(const void* value, size_t size) {
  set_has_unitcimname();
  if (unitcimname_ == &::google::protobuf::internal::kEmptyString) {
    unitcimname_ = new ::std::string;
  }
  unitcimname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsetQueryBean::mutable_unitcimname() {
  set_has_unitcimname();
  if (unitcimname_ == &::google::protobuf::internal::kEmptyString) {
    unitcimname_ = new ::std::string;
  }
  return unitcimname_;
}
inline ::std::string* MsetQueryBean::release_unitcimname() {
  clear_has_unitcimname();
  if (unitcimname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = unitcimname_;
    unitcimname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MsetQueryBean::set_allocated_unitcimname(::std::string* unitcimname) {
  if (unitcimname_ != &::google::protobuf::internal::kEmptyString) {
    delete unitcimname_;
  }
  if (unitcimname) {
    set_has_unitcimname();
    unitcimname_ = unitcimname;
  } else {
    clear_has_unitcimname();
    unitcimname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes stationCim = 3;
inline bool MsetQueryBean::has_stationcim() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsetQueryBean::set_has_stationcim() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsetQueryBean::clear_has_stationcim() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsetQueryBean::clear_stationcim() {
  if (stationcim_ != &::google::protobuf::internal::kEmptyString) {
    stationcim_->clear();
  }
  clear_has_stationcim();
}
inline const ::std::string& MsetQueryBean::stationcim() const {
  return *stationcim_;
}
inline void MsetQueryBean::set_stationcim(const ::std::string& value) {
  set_has_stationcim();
  if (stationcim_ == &::google::protobuf::internal::kEmptyString) {
    stationcim_ = new ::std::string;
  }
  stationcim_->assign(value);
}
inline void MsetQueryBean::set_stationcim(const char* value) {
  set_has_stationcim();
  if (stationcim_ == &::google::protobuf::internal::kEmptyString) {
    stationcim_ = new ::std::string;
  }
  stationcim_->assign(value);
}
inline void MsetQueryBean::set_stationcim(const void* value, size_t size) {
  set_has_stationcim();
  if (stationcim_ == &::google::protobuf::internal::kEmptyString) {
    stationcim_ = new ::std::string;
  }
  stationcim_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsetQueryBean::mutable_stationcim() {
  set_has_stationcim();
  if (stationcim_ == &::google::protobuf::internal::kEmptyString) {
    stationcim_ = new ::std::string;
  }
  return stationcim_;
}
inline ::std::string* MsetQueryBean::release_stationcim() {
  clear_has_stationcim();
  if (stationcim_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stationcim_;
    stationcim_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MsetQueryBean::set_allocated_stationcim(::std::string* stationcim) {
  if (stationcim_ != &::google::protobuf::internal::kEmptyString) {
    delete stationcim_;
  }
  if (stationcim) {
    set_has_stationcim();
    stationcim_ = stationcim;
  } else {
    clear_has_stationcim();
    stationcim_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes stationName = 4;
inline bool MsetQueryBean::has_stationname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsetQueryBean::set_has_stationname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsetQueryBean::clear_has_stationname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsetQueryBean::clear_stationname() {
  if (stationname_ != &::google::protobuf::internal::kEmptyString) {
    stationname_->clear();
  }
  clear_has_stationname();
}
inline const ::std::string& MsetQueryBean::stationname() const {
  return *stationname_;
}
inline void MsetQueryBean::set_stationname(const ::std::string& value) {
  set_has_stationname();
  if (stationname_ == &::google::protobuf::internal::kEmptyString) {
    stationname_ = new ::std::string;
  }
  stationname_->assign(value);
}
inline void MsetQueryBean::set_stationname(const char* value) {
  set_has_stationname();
  if (stationname_ == &::google::protobuf::internal::kEmptyString) {
    stationname_ = new ::std::string;
  }
  stationname_->assign(value);
}
inline void MsetQueryBean::set_stationname(const void* value, size_t size) {
  set_has_stationname();
  if (stationname_ == &::google::protobuf::internal::kEmptyString) {
    stationname_ = new ::std::string;
  }
  stationname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsetQueryBean::mutable_stationname() {
  set_has_stationname();
  if (stationname_ == &::google::protobuf::internal::kEmptyString) {
    stationname_ = new ::std::string;
  }
  return stationname_;
}
inline ::std::string* MsetQueryBean::release_stationname() {
  clear_has_stationname();
  if (stationname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stationname_;
    stationname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MsetQueryBean::set_allocated_stationname(::std::string* stationname) {
  if (stationname_ != &::google::protobuf::internal::kEmptyString) {
    delete stationname_;
  }
  if (stationname) {
    set_has_stationname();
    stationname_ = stationname;
  } else {
    clear_has_stationname();
    stationname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes unitType = 5;
inline bool MsetQueryBean::has_unittype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MsetQueryBean::set_has_unittype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MsetQueryBean::clear_has_unittype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MsetQueryBean::clear_unittype() {
  if (unittype_ != &::google::protobuf::internal::kEmptyString) {
    unittype_->clear();
  }
  clear_has_unittype();
}
inline const ::std::string& MsetQueryBean::unittype() const {
  return *unittype_;
}
inline void MsetQueryBean::set_unittype(const ::std::string& value) {
  set_has_unittype();
  if (unittype_ == &::google::protobuf::internal::kEmptyString) {
    unittype_ = new ::std::string;
  }
  unittype_->assign(value);
}
inline void MsetQueryBean::set_unittype(const char* value) {
  set_has_unittype();
  if (unittype_ == &::google::protobuf::internal::kEmptyString) {
    unittype_ = new ::std::string;
  }
  unittype_->assign(value);
}
inline void MsetQueryBean::set_unittype(const void* value, size_t size) {
  set_has_unittype();
  if (unittype_ == &::google::protobuf::internal::kEmptyString) {
    unittype_ = new ::std::string;
  }
  unittype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsetQueryBean::mutable_unittype() {
  set_has_unittype();
  if (unittype_ == &::google::protobuf::internal::kEmptyString) {
    unittype_ = new ::std::string;
  }
  return unittype_;
}
inline ::std::string* MsetQueryBean::release_unittype() {
  clear_has_unittype();
  if (unittype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = unittype_;
    unittype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MsetQueryBean::set_allocated_unittype(::std::string* unittype) {
  if (unittype_ != &::google::protobuf::internal::kEmptyString) {
    delete unittype_;
  }
  if (unittype) {
    set_has_unittype();
    unittype_ = unittype;
  } else {
    clear_has_unittype();
    unittype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// EventQueryBean

// optional bytes unitCim = 1;
inline bool EventQueryBean::has_unitcim() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EventQueryBean::set_has_unitcim() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EventQueryBean::clear_has_unitcim() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EventQueryBean::clear_unitcim() {
  if (unitcim_ != &::google::protobuf::internal::kEmptyString) {
    unitcim_->clear();
  }
  clear_has_unitcim();
}
inline const ::std::string& EventQueryBean::unitcim() const {
  return *unitcim_;
}
inline void EventQueryBean::set_unitcim(const ::std::string& value) {
  set_has_unitcim();
  if (unitcim_ == &::google::protobuf::internal::kEmptyString) {
    unitcim_ = new ::std::string;
  }
  unitcim_->assign(value);
}
inline void EventQueryBean::set_unitcim(const char* value) {
  set_has_unitcim();
  if (unitcim_ == &::google::protobuf::internal::kEmptyString) {
    unitcim_ = new ::std::string;
  }
  unitcim_->assign(value);
}
inline void EventQueryBean::set_unitcim(const void* value, size_t size) {
  set_has_unitcim();
  if (unitcim_ == &::google::protobuf::internal::kEmptyString) {
    unitcim_ = new ::std::string;
  }
  unitcim_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EventQueryBean::mutable_unitcim() {
  set_has_unitcim();
  if (unitcim_ == &::google::protobuf::internal::kEmptyString) {
    unitcim_ = new ::std::string;
  }
  return unitcim_;
}
inline ::std::string* EventQueryBean::release_unitcim() {
  clear_has_unitcim();
  if (unitcim_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = unitcim_;
    unitcim_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void EventQueryBean::set_allocated_unitcim(::std::string* unitcim) {
  if (unitcim_ != &::google::protobuf::internal::kEmptyString) {
    delete unitcim_;
  }
  if (unitcim) {
    set_has_unitcim();
    unitcim_ = unitcim;
  } else {
    clear_has_unitcim();
    unitcim_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes unitCimName = 2;
inline bool EventQueryBean::has_unitcimname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EventQueryBean::set_has_unitcimname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EventQueryBean::clear_has_unitcimname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EventQueryBean::clear_unitcimname() {
  if (unitcimname_ != &::google::protobuf::internal::kEmptyString) {
    unitcimname_->clear();
  }
  clear_has_unitcimname();
}
inline const ::std::string& EventQueryBean::unitcimname() const {
  return *unitcimname_;
}
inline void EventQueryBean::set_unitcimname(const ::std::string& value) {
  set_has_unitcimname();
  if (unitcimname_ == &::google::protobuf::internal::kEmptyString) {
    unitcimname_ = new ::std::string;
  }
  unitcimname_->assign(value);
}
inline void EventQueryBean::set_unitcimname(const char* value) {
  set_has_unitcimname();
  if (unitcimname_ == &::google::protobuf::internal::kEmptyString) {
    unitcimname_ = new ::std::string;
  }
  unitcimname_->assign(value);
}
inline void EventQueryBean::set_unitcimname(const void* value, size_t size) {
  set_has_unitcimname();
  if (unitcimname_ == &::google::protobuf::internal::kEmptyString) {
    unitcimname_ = new ::std::string;
  }
  unitcimname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EventQueryBean::mutable_unitcimname() {
  set_has_unitcimname();
  if (unitcimname_ == &::google::protobuf::internal::kEmptyString) {
    unitcimname_ = new ::std::string;
  }
  return unitcimname_;
}
inline ::std::string* EventQueryBean::release_unitcimname() {
  clear_has_unitcimname();
  if (unitcimname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = unitcimname_;
    unitcimname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void EventQueryBean::set_allocated_unitcimname(::std::string* unitcimname) {
  if (unitcimname_ != &::google::protobuf::internal::kEmptyString) {
    delete unitcimname_;
  }
  if (unitcimname) {
    set_has_unitcimname();
    unitcimname_ = unitcimname;
  } else {
    clear_has_unitcimname();
    unitcimname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes stationCim = 3;
inline bool EventQueryBean::has_stationcim() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EventQueryBean::set_has_stationcim() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EventQueryBean::clear_has_stationcim() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EventQueryBean::clear_stationcim() {
  if (stationcim_ != &::google::protobuf::internal::kEmptyString) {
    stationcim_->clear();
  }
  clear_has_stationcim();
}
inline const ::std::string& EventQueryBean::stationcim() const {
  return *stationcim_;
}
inline void EventQueryBean::set_stationcim(const ::std::string& value) {
  set_has_stationcim();
  if (stationcim_ == &::google::protobuf::internal::kEmptyString) {
    stationcim_ = new ::std::string;
  }
  stationcim_->assign(value);
}
inline void EventQueryBean::set_stationcim(const char* value) {
  set_has_stationcim();
  if (stationcim_ == &::google::protobuf::internal::kEmptyString) {
    stationcim_ = new ::std::string;
  }
  stationcim_->assign(value);
}
inline void EventQueryBean::set_stationcim(const void* value, size_t size) {
  set_has_stationcim();
  if (stationcim_ == &::google::protobuf::internal::kEmptyString) {
    stationcim_ = new ::std::string;
  }
  stationcim_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EventQueryBean::mutable_stationcim() {
  set_has_stationcim();
  if (stationcim_ == &::google::protobuf::internal::kEmptyString) {
    stationcim_ = new ::std::string;
  }
  return stationcim_;
}
inline ::std::string* EventQueryBean::release_stationcim() {
  clear_has_stationcim();
  if (stationcim_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stationcim_;
    stationcim_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void EventQueryBean::set_allocated_stationcim(::std::string* stationcim) {
  if (stationcim_ != &::google::protobuf::internal::kEmptyString) {
    delete stationcim_;
  }
  if (stationcim) {
    set_has_stationcim();
    stationcim_ = stationcim;
  } else {
    clear_has_stationcim();
    stationcim_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes stationName = 4;
inline bool EventQueryBean::has_stationname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EventQueryBean::set_has_stationname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EventQueryBean::clear_has_stationname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EventQueryBean::clear_stationname() {
  if (stationname_ != &::google::protobuf::internal::kEmptyString) {
    stationname_->clear();
  }
  clear_has_stationname();
}
inline const ::std::string& EventQueryBean::stationname() const {
  return *stationname_;
}
inline void EventQueryBean::set_stationname(const ::std::string& value) {
  set_has_stationname();
  if (stationname_ == &::google::protobuf::internal::kEmptyString) {
    stationname_ = new ::std::string;
  }
  stationname_->assign(value);
}
inline void EventQueryBean::set_stationname(const char* value) {
  set_has_stationname();
  if (stationname_ == &::google::protobuf::internal::kEmptyString) {
    stationname_ = new ::std::string;
  }
  stationname_->assign(value);
}
inline void EventQueryBean::set_stationname(const void* value, size_t size) {
  set_has_stationname();
  if (stationname_ == &::google::protobuf::internal::kEmptyString) {
    stationname_ = new ::std::string;
  }
  stationname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EventQueryBean::mutable_stationname() {
  set_has_stationname();
  if (stationname_ == &::google::protobuf::internal::kEmptyString) {
    stationname_ = new ::std::string;
  }
  return stationname_;
}
inline ::std::string* EventQueryBean::release_stationname() {
  clear_has_stationname();
  if (stationname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stationname_;
    stationname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void EventQueryBean::set_allocated_stationname(::std::string* stationname) {
  if (stationname_ != &::google::protobuf::internal::kEmptyString) {
    delete stationname_;
  }
  if (stationname) {
    set_has_stationname();
    stationname_ = stationname;
  } else {
    clear_has_stationname();
    stationname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes unitType = 5;
inline bool EventQueryBean::has_unittype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EventQueryBean::set_has_unittype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EventQueryBean::clear_has_unittype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EventQueryBean::clear_unittype() {
  if (unittype_ != &::google::protobuf::internal::kEmptyString) {
    unittype_->clear();
  }
  clear_has_unittype();
}
inline const ::std::string& EventQueryBean::unittype() const {
  return *unittype_;
}
inline void EventQueryBean::set_unittype(const ::std::string& value) {
  set_has_unittype();
  if (unittype_ == &::google::protobuf::internal::kEmptyString) {
    unittype_ = new ::std::string;
  }
  unittype_->assign(value);
}
inline void EventQueryBean::set_unittype(const char* value) {
  set_has_unittype();
  if (unittype_ == &::google::protobuf::internal::kEmptyString) {
    unittype_ = new ::std::string;
  }
  unittype_->assign(value);
}
inline void EventQueryBean::set_unittype(const void* value, size_t size) {
  set_has_unittype();
  if (unittype_ == &::google::protobuf::internal::kEmptyString) {
    unittype_ = new ::std::string;
  }
  unittype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EventQueryBean::mutable_unittype() {
  set_has_unittype();
  if (unittype_ == &::google::protobuf::internal::kEmptyString) {
    unittype_ = new ::std::string;
  }
  return unittype_;
}
inline ::std::string* EventQueryBean::release_unittype() {
  clear_has_unittype();
  if (unittype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = unittype_;
    unittype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void EventQueryBean::set_allocated_unittype(::std::string* unittype) {
  if (unittype_ != &::google::protobuf::internal::kEmptyString) {
    delete unittype_;
  }
  if (unittype) {
    set_has_unittype();
    unittype_ = unittype;
  } else {
    clear_has_unittype();
    unittype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes eventvalue = 6;
inline bool EventQueryBean::has_eventvalue() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void EventQueryBean::set_has_eventvalue() {
  _has_bits_[0] |= 0x00000020u;
}
inline void EventQueryBean::clear_has_eventvalue() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void EventQueryBean::clear_eventvalue() {
  if (eventvalue_ != &::google::protobuf::internal::kEmptyString) {
    eventvalue_->clear();
  }
  clear_has_eventvalue();
}
inline const ::std::string& EventQueryBean::eventvalue() const {
  return *eventvalue_;
}
inline void EventQueryBean::set_eventvalue(const ::std::string& value) {
  set_has_eventvalue();
  if (eventvalue_ == &::google::protobuf::internal::kEmptyString) {
    eventvalue_ = new ::std::string;
  }
  eventvalue_->assign(value);
}
inline void EventQueryBean::set_eventvalue(const char* value) {
  set_has_eventvalue();
  if (eventvalue_ == &::google::protobuf::internal::kEmptyString) {
    eventvalue_ = new ::std::string;
  }
  eventvalue_->assign(value);
}
inline void EventQueryBean::set_eventvalue(const void* value, size_t size) {
  set_has_eventvalue();
  if (eventvalue_ == &::google::protobuf::internal::kEmptyString) {
    eventvalue_ = new ::std::string;
  }
  eventvalue_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EventQueryBean::mutable_eventvalue() {
  set_has_eventvalue();
  if (eventvalue_ == &::google::protobuf::internal::kEmptyString) {
    eventvalue_ = new ::std::string;
  }
  return eventvalue_;
}
inline ::std::string* EventQueryBean::release_eventvalue() {
  clear_has_eventvalue();
  if (eventvalue_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = eventvalue_;
    eventvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void EventQueryBean::set_allocated_eventvalue(::std::string* eventvalue) {
  if (eventvalue_ != &::google::protobuf::internal::kEmptyString) {
    delete eventvalue_;
  }
  if (eventvalue) {
    set_has_eventvalue();
    eventvalue_ = eventvalue;
  } else {
    clear_has_eventvalue();
    eventvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes eventtime = 7;
inline bool EventQueryBean::has_eventtime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void EventQueryBean::set_has_eventtime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void EventQueryBean::clear_has_eventtime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void EventQueryBean::clear_eventtime() {
  if (eventtime_ != &::google::protobuf::internal::kEmptyString) {
    eventtime_->clear();
  }
  clear_has_eventtime();
}
inline const ::std::string& EventQueryBean::eventtime() const {
  return *eventtime_;
}
inline void EventQueryBean::set_eventtime(const ::std::string& value) {
  set_has_eventtime();
  if (eventtime_ == &::google::protobuf::internal::kEmptyString) {
    eventtime_ = new ::std::string;
  }
  eventtime_->assign(value);
}
inline void EventQueryBean::set_eventtime(const char* value) {
  set_has_eventtime();
  if (eventtime_ == &::google::protobuf::internal::kEmptyString) {
    eventtime_ = new ::std::string;
  }
  eventtime_->assign(value);
}
inline void EventQueryBean::set_eventtime(const void* value, size_t size) {
  set_has_eventtime();
  if (eventtime_ == &::google::protobuf::internal::kEmptyString) {
    eventtime_ = new ::std::string;
  }
  eventtime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EventQueryBean::mutable_eventtime() {
  set_has_eventtime();
  if (eventtime_ == &::google::protobuf::internal::kEmptyString) {
    eventtime_ = new ::std::string;
  }
  return eventtime_;
}
inline ::std::string* EventQueryBean::release_eventtime() {
  clear_has_eventtime();
  if (eventtime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = eventtime_;
    eventtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void EventQueryBean::set_allocated_eventtime(::std::string* eventtime) {
  if (eventtime_ != &::google::protobuf::internal::kEmptyString) {
    delete eventtime_;
  }
  if (eventtime) {
    set_has_eventtime();
    eventtime_ = eventtime;
  } else {
    clear_has_eventtime();
    eventtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// StateBean

// optional bytes cimId = 1;
inline bool StateBean::has_cimid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StateBean::set_has_cimid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StateBean::clear_has_cimid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StateBean::clear_cimid() {
  if (cimid_ != &::google::protobuf::internal::kEmptyString) {
    cimid_->clear();
  }
  clear_has_cimid();
}
inline const ::std::string& StateBean::cimid() const {
  return *cimid_;
}
inline void StateBean::set_cimid(const ::std::string& value) {
  set_has_cimid();
  if (cimid_ == &::google::protobuf::internal::kEmptyString) {
    cimid_ = new ::std::string;
  }
  cimid_->assign(value);
}
inline void StateBean::set_cimid(const char* value) {
  set_has_cimid();
  if (cimid_ == &::google::protobuf::internal::kEmptyString) {
    cimid_ = new ::std::string;
  }
  cimid_->assign(value);
}
inline void StateBean::set_cimid(const void* value, size_t size) {
  set_has_cimid();
  if (cimid_ == &::google::protobuf::internal::kEmptyString) {
    cimid_ = new ::std::string;
  }
  cimid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StateBean::mutable_cimid() {
  set_has_cimid();
  if (cimid_ == &::google::protobuf::internal::kEmptyString) {
    cimid_ = new ::std::string;
  }
  return cimid_;
}
inline ::std::string* StateBean::release_cimid() {
  clear_has_cimid();
  if (cimid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cimid_;
    cimid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void StateBean::set_allocated_cimid(::std::string* cimid) {
  if (cimid_ != &::google::protobuf::internal::kEmptyString) {
    delete cimid_;
  }
  if (cimid) {
    set_has_cimid();
    cimid_ = cimid;
  } else {
    clear_has_cimid();
    cimid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 state = 2;
inline bool StateBean::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StateBean::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StateBean::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StateBean::clear_state() {
  state_ = 0u;
  clear_has_state();
}
inline ::google::protobuf::uint32 StateBean::state() const {
  return state_;
}
inline void StateBean::set_state(::google::protobuf::uint32 value) {
  set_has_state();
  state_ = value;
}

// optional uint32 isBoard = 3;
inline bool StateBean::has_isboard() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StateBean::set_has_isboard() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StateBean::clear_has_isboard() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StateBean::clear_isboard() {
  isboard_ = 0u;
  clear_has_isboard();
}
inline ::google::protobuf::uint32 StateBean::isboard() const {
  return isboard_;
}
inline void StateBean::set_isboard(::google::protobuf::uint32 value) {
  set_has_isboard();
  isboard_ = value;
}

// optional uint32 isElectric = 4;
inline bool StateBean::has_iselectric() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StateBean::set_has_iselectric() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StateBean::clear_has_iselectric() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StateBean::clear_iselectric() {
  iselectric_ = 0u;
  clear_has_iselectric();
}
inline ::google::protobuf::uint32 StateBean::iselectric() const {
  return iselectric_;
}
inline void StateBean::set_iselectric(::google::protobuf::uint32 value) {
  set_has_iselectric();
  iselectric_ = value;
}

// optional bytes volColor = 5;
inline bool StateBean::has_volcolor() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StateBean::set_has_volcolor() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StateBean::clear_has_volcolor() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StateBean::clear_volcolor() {
  if (volcolor_ != &::google::protobuf::internal::kEmptyString) {
    volcolor_->clear();
  }
  clear_has_volcolor();
}
inline const ::std::string& StateBean::volcolor() const {
  return *volcolor_;
}
inline void StateBean::set_volcolor(const ::std::string& value) {
  set_has_volcolor();
  if (volcolor_ == &::google::protobuf::internal::kEmptyString) {
    volcolor_ = new ::std::string;
  }
  volcolor_->assign(value);
}
inline void StateBean::set_volcolor(const char* value) {
  set_has_volcolor();
  if (volcolor_ == &::google::protobuf::internal::kEmptyString) {
    volcolor_ = new ::std::string;
  }
  volcolor_->assign(value);
}
inline void StateBean::set_volcolor(const void* value, size_t size) {
  set_has_volcolor();
  if (volcolor_ == &::google::protobuf::internal::kEmptyString) {
    volcolor_ = new ::std::string;
  }
  volcolor_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StateBean::mutable_volcolor() {
  set_has_volcolor();
  if (volcolor_ == &::google::protobuf::internal::kEmptyString) {
    volcolor_ = new ::std::string;
  }
  return volcolor_;
}
inline ::std::string* StateBean::release_volcolor() {
  clear_has_volcolor();
  if (volcolor_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = volcolor_;
    volcolor_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void StateBean::set_allocated_volcolor(::std::string* volcolor) {
  if (volcolor_ != &::google::protobuf::internal::kEmptyString) {
    delete volcolor_;
  }
  if (volcolor) {
    set_has_volcolor();
    volcolor_ = volcolor;
  } else {
    clear_has_volcolor();
    volcolor_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 unitType = 6;
inline bool StateBean::has_unittype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void StateBean::set_has_unittype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void StateBean::clear_has_unittype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void StateBean::clear_unittype() {
  unittype_ = 0u;
  clear_has_unittype();
}
inline ::google::protobuf::uint32 StateBean::unittype() const {
  return unittype_;
}
inline void StateBean::set_unittype(::google::protobuf::uint32 value) {
  set_has_unittype();
  unittype_ = value;
}

// optional bytes stationCim = 7;
inline bool StateBean::has_stationcim() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void StateBean::set_has_stationcim() {
  _has_bits_[0] |= 0x00000040u;
}
inline void StateBean::clear_has_stationcim() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void StateBean::clear_stationcim() {
  if (stationcim_ != &::google::protobuf::internal::kEmptyString) {
    stationcim_->clear();
  }
  clear_has_stationcim();
}
inline const ::std::string& StateBean::stationcim() const {
  return *stationcim_;
}
inline void StateBean::set_stationcim(const ::std::string& value) {
  set_has_stationcim();
  if (stationcim_ == &::google::protobuf::internal::kEmptyString) {
    stationcim_ = new ::std::string;
  }
  stationcim_->assign(value);
}
inline void StateBean::set_stationcim(const char* value) {
  set_has_stationcim();
  if (stationcim_ == &::google::protobuf::internal::kEmptyString) {
    stationcim_ = new ::std::string;
  }
  stationcim_->assign(value);
}
inline void StateBean::set_stationcim(const void* value, size_t size) {
  set_has_stationcim();
  if (stationcim_ == &::google::protobuf::internal::kEmptyString) {
    stationcim_ = new ::std::string;
  }
  stationcim_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StateBean::mutable_stationcim() {
  set_has_stationcim();
  if (stationcim_ == &::google::protobuf::internal::kEmptyString) {
    stationcim_ = new ::std::string;
  }
  return stationcim_;
}
inline ::std::string* StateBean::release_stationcim() {
  clear_has_stationcim();
  if (stationcim_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stationcim_;
    stationcim_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void StateBean::set_allocated_stationcim(::std::string* stationcim) {
  if (stationcim_ != &::google::protobuf::internal::kEmptyString) {
    delete stationcim_;
  }
  if (stationcim) {
    set_has_stationcim();
    stationcim_ = stationcim;
  } else {
    clear_has_stationcim();
    stationcim_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 isPower = 8;
inline bool StateBean::has_ispower() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void StateBean::set_has_ispower() {
  _has_bits_[0] |= 0x00000080u;
}
inline void StateBean::clear_has_ispower() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void StateBean::clear_ispower() {
  ispower_ = 0u;
  clear_has_ispower();
}
inline ::google::protobuf::uint32 StateBean::ispower() const {
  return ispower_;
}
inline void StateBean::set_ispower(::google::protobuf::uint32 value) {
  set_has_ispower();
  ispower_ = value;
}

// optional uint32 isGround = 9;
inline bool StateBean::has_isground() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void StateBean::set_has_isground() {
  _has_bits_[0] |= 0x00000100u;
}
inline void StateBean::clear_has_isground() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void StateBean::clear_isground() {
  isground_ = 0u;
  clear_has_isground();
}
inline ::google::protobuf::uint32 StateBean::isground() const {
  return isground_;
}
inline void StateBean::set_isground(::google::protobuf::uint32 value) {
  set_has_isground();
  isground_ = value;
}

// optional uint32 isOp = 10;
inline bool StateBean::has_isop() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void StateBean::set_has_isop() {
  _has_bits_[0] |= 0x00000200u;
}
inline void StateBean::clear_has_isop() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void StateBean::clear_isop() {
  isop_ = 0u;
  clear_has_isop();
}
inline ::google::protobuf::uint32 StateBean::isop() const {
  return isop_;
}
inline void StateBean::set_isop(::google::protobuf::uint32 value) {
  set_has_isop();
  isop_ = value;
}

// -------------------------------------------------------------------

// StationTypeBean

// optional uint32 Id = 1;
inline bool StationTypeBean::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StationTypeBean::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StationTypeBean::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StationTypeBean::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 StationTypeBean::id() const {
  return id_;
}
inline void StationTypeBean::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 ordernum = 2;
inline bool StationTypeBean::has_ordernum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StationTypeBean::set_has_ordernum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StationTypeBean::clear_has_ordernum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StationTypeBean::clear_ordernum() {
  ordernum_ = 0u;
  clear_has_ordernum();
}
inline ::google::protobuf::uint32 StationTypeBean::ordernum() const {
  return ordernum_;
}
inline void StationTypeBean::set_ordernum(::google::protobuf::uint32 value) {
  set_has_ordernum();
  ordernum_ = value;
}

// optional bytes Name = 3;
inline bool StationTypeBean::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StationTypeBean::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StationTypeBean::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StationTypeBean::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& StationTypeBean::name() const {
  return *name_;
}
inline void StationTypeBean::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void StationTypeBean::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void StationTypeBean::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StationTypeBean::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* StationTypeBean::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void StationTypeBean::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .com.spplus.buff.StationBean StationList = 4;
inline int StationTypeBean::stationlist_size() const {
  return stationlist_.size();
}
inline void StationTypeBean::clear_stationlist() {
  stationlist_.Clear();
}
inline const ::com::spplus::buff::StationBean& StationTypeBean::stationlist(int index) const {
  return stationlist_.Get(index);
}
inline ::com::spplus::buff::StationBean* StationTypeBean::mutable_stationlist(int index) {
  return stationlist_.Mutable(index);
}
inline ::com::spplus::buff::StationBean* StationTypeBean::add_stationlist() {
  return stationlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::spplus::buff::StationBean >&
StationTypeBean::stationlist() const {
  return stationlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::spplus::buff::StationBean >*
StationTypeBean::mutable_stationlist() {
  return &stationlist_;
}

// -------------------------------------------------------------------

// StationBean

// optional uint32 Id = 1;
inline bool StationBean::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StationBean::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StationBean::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StationBean::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 StationBean::id() const {
  return id_;
}
inline void StationBean::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 CategoryId = 2;
inline bool StationBean::has_categoryid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StationBean::set_has_categoryid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StationBean::clear_has_categoryid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StationBean::clear_categoryid() {
  categoryid_ = 0u;
  clear_has_categoryid();
}
inline ::google::protobuf::uint32 StationBean::categoryid() const {
  return categoryid_;
}
inline void StationBean::set_categoryid(::google::protobuf::uint32 value) {
  set_has_categoryid();
  categoryid_ = value;
}

// optional bytes Name = 3;
inline bool StationBean::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StationBean::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StationBean::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StationBean::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& StationBean::name() const {
  return *name_;
}
inline void StationBean::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void StationBean::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void StationBean::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StationBean::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* StationBean::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void StationBean::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes CimId = 4;
inline bool StationBean::has_cimid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StationBean::set_has_cimid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StationBean::clear_has_cimid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StationBean::clear_cimid() {
  if (cimid_ != &::google::protobuf::internal::kEmptyString) {
    cimid_->clear();
  }
  clear_has_cimid();
}
inline const ::std::string& StationBean::cimid() const {
  return *cimid_;
}
inline void StationBean::set_cimid(const ::std::string& value) {
  set_has_cimid();
  if (cimid_ == &::google::protobuf::internal::kEmptyString) {
    cimid_ = new ::std::string;
  }
  cimid_->assign(value);
}
inline void StationBean::set_cimid(const char* value) {
  set_has_cimid();
  if (cimid_ == &::google::protobuf::internal::kEmptyString) {
    cimid_ = new ::std::string;
  }
  cimid_->assign(value);
}
inline void StationBean::set_cimid(const void* value, size_t size) {
  set_has_cimid();
  if (cimid_ == &::google::protobuf::internal::kEmptyString) {
    cimid_ = new ::std::string;
  }
  cimid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StationBean::mutable_cimid() {
  set_has_cimid();
  if (cimid_ == &::google::protobuf::internal::kEmptyString) {
    cimid_ = new ::std::string;
  }
  return cimid_;
}
inline ::std::string* StationBean::release_cimid() {
  clear_has_cimid();
  if (cimid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cimid_;
    cimid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void StationBean::set_allocated_cimid(::std::string* cimid) {
  if (cimid_ != &::google::protobuf::internal::kEmptyString) {
    delete cimid_;
  }
  if (cimid) {
    set_has_cimid();
    cimid_ = cimid;
  } else {
    clear_has_cimid();
    cimid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes CurrentName = 5;
inline bool StationBean::has_currentname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StationBean::set_has_currentname() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StationBean::clear_has_currentname() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StationBean::clear_currentname() {
  if (currentname_ != &::google::protobuf::internal::kEmptyString) {
    currentname_->clear();
  }
  clear_has_currentname();
}
inline const ::std::string& StationBean::currentname() const {
  return *currentname_;
}
inline void StationBean::set_currentname(const ::std::string& value) {
  set_has_currentname();
  if (currentname_ == &::google::protobuf::internal::kEmptyString) {
    currentname_ = new ::std::string;
  }
  currentname_->assign(value);
}
inline void StationBean::set_currentname(const char* value) {
  set_has_currentname();
  if (currentname_ == &::google::protobuf::internal::kEmptyString) {
    currentname_ = new ::std::string;
  }
  currentname_->assign(value);
}
inline void StationBean::set_currentname(const void* value, size_t size) {
  set_has_currentname();
  if (currentname_ == &::google::protobuf::internal::kEmptyString) {
    currentname_ = new ::std::string;
  }
  currentname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StationBean::mutable_currentname() {
  set_has_currentname();
  if (currentname_ == &::google::protobuf::internal::kEmptyString) {
    currentname_ = new ::std::string;
  }
  return currentname_;
}
inline ::std::string* StationBean::release_currentname() {
  clear_has_currentname();
  if (currentname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = currentname_;
    currentname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void StationBean::set_allocated_currentname(::std::string* currentname) {
  if (currentname_ != &::google::protobuf::internal::kEmptyString) {
    delete currentname_;
  }
  if (currentname) {
    set_has_currentname();
    currentname_ = currentname;
  } else {
    clear_has_currentname();
    currentname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes Path = 6;
inline bool StationBean::has_path() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void StationBean::set_has_path() {
  _has_bits_[0] |= 0x00000020u;
}
inline void StationBean::clear_has_path() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void StationBean::clear_path() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& StationBean::path() const {
  return *path_;
}
inline void StationBean::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void StationBean::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void StationBean::set_path(const void* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StationBean::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  return path_;
}
inline ::std::string* StationBean::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void StationBean::set_allocated_path(::std::string* path) {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (path) {
    set_has_path();
    path_ = path;
  } else {
    clear_has_path();
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// UnitsBean

// optional uint32 Id = 1;
inline bool UnitsBean::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UnitsBean::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UnitsBean::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UnitsBean::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 UnitsBean::id() const {
  return id_;
}
inline void UnitsBean::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 StationId = 2;
inline bool UnitsBean::has_stationid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UnitsBean::set_has_stationid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UnitsBean::clear_has_stationid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UnitsBean::clear_stationid() {
  stationid_ = 0u;
  clear_has_stationid();
}
inline ::google::protobuf::uint32 UnitsBean::stationid() const {
  return stationid_;
}
inline void UnitsBean::set_stationid(::google::protobuf::uint32 value) {
  set_has_stationid();
  stationid_ = value;
}

// optional bytes Name = 3;
inline bool UnitsBean::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UnitsBean::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UnitsBean::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UnitsBean::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& UnitsBean::name() const {
  return *name_;
}
inline void UnitsBean::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void UnitsBean::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void UnitsBean::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UnitsBean::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* UnitsBean::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UnitsBean::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes CimId = 4;
inline bool UnitsBean::has_cimid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UnitsBean::set_has_cimid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UnitsBean::clear_has_cimid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UnitsBean::clear_cimid() {
  if (cimid_ != &::google::protobuf::internal::kEmptyString) {
    cimid_->clear();
  }
  clear_has_cimid();
}
inline const ::std::string& UnitsBean::cimid() const {
  return *cimid_;
}
inline void UnitsBean::set_cimid(const ::std::string& value) {
  set_has_cimid();
  if (cimid_ == &::google::protobuf::internal::kEmptyString) {
    cimid_ = new ::std::string;
  }
  cimid_->assign(value);
}
inline void UnitsBean::set_cimid(const char* value) {
  set_has_cimid();
  if (cimid_ == &::google::protobuf::internal::kEmptyString) {
    cimid_ = new ::std::string;
  }
  cimid_->assign(value);
}
inline void UnitsBean::set_cimid(const void* value, size_t size) {
  set_has_cimid();
  if (cimid_ == &::google::protobuf::internal::kEmptyString) {
    cimid_ = new ::std::string;
  }
  cimid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UnitsBean::mutable_cimid() {
  set_has_cimid();
  if (cimid_ == &::google::protobuf::internal::kEmptyString) {
    cimid_ = new ::std::string;
  }
  return cimid_;
}
inline ::std::string* UnitsBean::release_cimid() {
  clear_has_cimid();
  if (cimid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cimid_;
    cimid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UnitsBean::set_allocated_cimid(::std::string* cimid) {
  if (cimid_ != &::google::protobuf::internal::kEmptyString) {
    delete cimid_;
  }
  if (cimid) {
    set_has_cimid();
    cimid_ = cimid;
  } else {
    clear_has_cimid();
    cimid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes VolId = 5;
inline bool UnitsBean::has_volid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UnitsBean::set_has_volid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UnitsBean::clear_has_volid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UnitsBean::clear_volid() {
  if (volid_ != &::google::protobuf::internal::kEmptyString) {
    volid_->clear();
  }
  clear_has_volid();
}
inline const ::std::string& UnitsBean::volid() const {
  return *volid_;
}
inline void UnitsBean::set_volid(const ::std::string& value) {
  set_has_volid();
  if (volid_ == &::google::protobuf::internal::kEmptyString) {
    volid_ = new ::std::string;
  }
  volid_->assign(value);
}
inline void UnitsBean::set_volid(const char* value) {
  set_has_volid();
  if (volid_ == &::google::protobuf::internal::kEmptyString) {
    volid_ = new ::std::string;
  }
  volid_->assign(value);
}
inline void UnitsBean::set_volid(const void* value, size_t size) {
  set_has_volid();
  if (volid_ == &::google::protobuf::internal::kEmptyString) {
    volid_ = new ::std::string;
  }
  volid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UnitsBean::mutable_volid() {
  set_has_volid();
  if (volid_ == &::google::protobuf::internal::kEmptyString) {
    volid_ = new ::std::string;
  }
  return volid_;
}
inline ::std::string* UnitsBean::release_volid() {
  clear_has_volid();
  if (volid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = volid_;
    volid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UnitsBean::set_allocated_volid(::std::string* volid) {
  if (volid_ != &::google::protobuf::internal::kEmptyString) {
    delete volid_;
  }
  if (volid) {
    set_has_volid();
    volid_ = volid;
  } else {
    clear_has_volid();
    volid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes UnitType = 6;
inline bool UnitsBean::has_unittype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UnitsBean::set_has_unittype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UnitsBean::clear_has_unittype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UnitsBean::clear_unittype() {
  if (unittype_ != &::google::protobuf::internal::kEmptyString) {
    unittype_->clear();
  }
  clear_has_unittype();
}
inline const ::std::string& UnitsBean::unittype() const {
  return *unittype_;
}
inline void UnitsBean::set_unittype(const ::std::string& value) {
  set_has_unittype();
  if (unittype_ == &::google::protobuf::internal::kEmptyString) {
    unittype_ = new ::std::string;
  }
  unittype_->assign(value);
}
inline void UnitsBean::set_unittype(const char* value) {
  set_has_unittype();
  if (unittype_ == &::google::protobuf::internal::kEmptyString) {
    unittype_ = new ::std::string;
  }
  unittype_->assign(value);
}
inline void UnitsBean::set_unittype(const void* value, size_t size) {
  set_has_unittype();
  if (unittype_ == &::google::protobuf::internal::kEmptyString) {
    unittype_ = new ::std::string;
  }
  unittype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UnitsBean::mutable_unittype() {
  set_has_unittype();
  if (unittype_ == &::google::protobuf::internal::kEmptyString) {
    unittype_ = new ::std::string;
  }
  return unittype_;
}
inline ::std::string* UnitsBean::release_unittype() {
  clear_has_unittype();
  if (unittype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = unittype_;
    unittype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UnitsBean::set_allocated_unittype(::std::string* unittype) {
  if (unittype_ != &::google::protobuf::internal::kEmptyString) {
    delete unittype_;
  }
  if (unittype) {
    set_has_unittype();
    unittype_ = unittype;
  } else {
    clear_has_unittype();
    unittype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes SelfType = 7;
inline bool UnitsBean::has_selftype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UnitsBean::set_has_selftype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UnitsBean::clear_has_selftype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UnitsBean::clear_selftype() {
  if (selftype_ != &::google::protobuf::internal::kEmptyString) {
    selftype_->clear();
  }
  clear_has_selftype();
}
inline const ::std::string& UnitsBean::selftype() const {
  return *selftype_;
}
inline void UnitsBean::set_selftype(const ::std::string& value) {
  set_has_selftype();
  if (selftype_ == &::google::protobuf::internal::kEmptyString) {
    selftype_ = new ::std::string;
  }
  selftype_->assign(value);
}
inline void UnitsBean::set_selftype(const char* value) {
  set_has_selftype();
  if (selftype_ == &::google::protobuf::internal::kEmptyString) {
    selftype_ = new ::std::string;
  }
  selftype_->assign(value);
}
inline void UnitsBean::set_selftype(const void* value, size_t size) {
  set_has_selftype();
  if (selftype_ == &::google::protobuf::internal::kEmptyString) {
    selftype_ = new ::std::string;
  }
  selftype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UnitsBean::mutable_selftype() {
  set_has_selftype();
  if (selftype_ == &::google::protobuf::internal::kEmptyString) {
    selftype_ = new ::std::string;
  }
  return selftype_;
}
inline ::std::string* UnitsBean::release_selftype() {
  clear_has_selftype();
  if (selftype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = selftype_;
    selftype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UnitsBean::set_allocated_selftype(::std::string* selftype) {
  if (selftype_ != &::google::protobuf::internal::kEmptyString) {
    delete selftype_;
  }
  if (selftype) {
    set_has_selftype();
    selftype_ = selftype;
  } else {
    clear_has_selftype();
    selftype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SavingBean

// optional uint32 Id = 1;
inline bool SavingBean::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SavingBean::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SavingBean::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SavingBean::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 SavingBean::id() const {
  return id_;
}
inline void SavingBean::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional bytes Name = 2;
inline bool SavingBean::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SavingBean::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SavingBean::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SavingBean::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& SavingBean::name() const {
  return *name_;
}
inline void SavingBean::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SavingBean::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SavingBean::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SavingBean::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* SavingBean::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SavingBean::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes SaveTime = 3;
inline bool SavingBean::has_savetime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SavingBean::set_has_savetime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SavingBean::clear_has_savetime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SavingBean::clear_savetime() {
  if (savetime_ != &::google::protobuf::internal::kEmptyString) {
    savetime_->clear();
  }
  clear_has_savetime();
}
inline const ::std::string& SavingBean::savetime() const {
  return *savetime_;
}
inline void SavingBean::set_savetime(const ::std::string& value) {
  set_has_savetime();
  if (savetime_ == &::google::protobuf::internal::kEmptyString) {
    savetime_ = new ::std::string;
  }
  savetime_->assign(value);
}
inline void SavingBean::set_savetime(const char* value) {
  set_has_savetime();
  if (savetime_ == &::google::protobuf::internal::kEmptyString) {
    savetime_ = new ::std::string;
  }
  savetime_->assign(value);
}
inline void SavingBean::set_savetime(const void* value, size_t size) {
  set_has_savetime();
  if (savetime_ == &::google::protobuf::internal::kEmptyString) {
    savetime_ = new ::std::string;
  }
  savetime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SavingBean::mutable_savetime() {
  set_has_savetime();
  if (savetime_ == &::google::protobuf::internal::kEmptyString) {
    savetime_ = new ::std::string;
  }
  return savetime_;
}
inline ::std::string* SavingBean::release_savetime() {
  clear_has_savetime();
  if (savetime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = savetime_;
    savetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SavingBean::set_allocated_savetime(::std::string* savetime) {
  if (savetime_ != &::google::protobuf::internal::kEmptyString) {
    delete savetime_;
  }
  if (savetime) {
    set_has_savetime();
    savetime_ = savetime;
  } else {
    clear_has_savetime();
    savetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// RuleBean

// optional uint32 Id = 1;
inline bool RuleBean::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RuleBean::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RuleBean::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RuleBean::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 RuleBean::id() const {
  return id_;
}
inline void RuleBean::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional bytes Name = 2;
inline bool RuleBean::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RuleBean::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RuleBean::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RuleBean::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& RuleBean::name() const {
  return *name_;
}
inline void RuleBean::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RuleBean::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RuleBean::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RuleBean::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* RuleBean::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RuleBean::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes AlarmLevel = 3;
inline bool RuleBean::has_alarmlevel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RuleBean::set_has_alarmlevel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RuleBean::clear_has_alarmlevel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RuleBean::clear_alarmlevel() {
  if (alarmlevel_ != &::google::protobuf::internal::kEmptyString) {
    alarmlevel_->clear();
  }
  clear_has_alarmlevel();
}
inline const ::std::string& RuleBean::alarmlevel() const {
  return *alarmlevel_;
}
inline void RuleBean::set_alarmlevel(const ::std::string& value) {
  set_has_alarmlevel();
  if (alarmlevel_ == &::google::protobuf::internal::kEmptyString) {
    alarmlevel_ = new ::std::string;
  }
  alarmlevel_->assign(value);
}
inline void RuleBean::set_alarmlevel(const char* value) {
  set_has_alarmlevel();
  if (alarmlevel_ == &::google::protobuf::internal::kEmptyString) {
    alarmlevel_ = new ::std::string;
  }
  alarmlevel_->assign(value);
}
inline void RuleBean::set_alarmlevel(const void* value, size_t size) {
  set_has_alarmlevel();
  if (alarmlevel_ == &::google::protobuf::internal::kEmptyString) {
    alarmlevel_ = new ::std::string;
  }
  alarmlevel_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RuleBean::mutable_alarmlevel() {
  set_has_alarmlevel();
  if (alarmlevel_ == &::google::protobuf::internal::kEmptyString) {
    alarmlevel_ = new ::std::string;
  }
  return alarmlevel_;
}
inline ::std::string* RuleBean::release_alarmlevel() {
  clear_has_alarmlevel();
  if (alarmlevel_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = alarmlevel_;
    alarmlevel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RuleBean::set_allocated_alarmlevel(::std::string* alarmlevel) {
  if (alarmlevel_ != &::google::protobuf::internal::kEmptyString) {
    delete alarmlevel_;
  }
  if (alarmlevel) {
    set_has_alarmlevel();
    alarmlevel_ = alarmlevel;
  } else {
    clear_has_alarmlevel();
    alarmlevel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes Description = 4;
inline bool RuleBean::has_description() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RuleBean::set_has_description() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RuleBean::clear_has_description() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RuleBean::clear_description() {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    description_->clear();
  }
  clear_has_description();
}
inline const ::std::string& RuleBean::description() const {
  return *description_;
}
inline void RuleBean::set_description(const ::std::string& value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void RuleBean::set_description(const char* value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void RuleBean::set_description(const void* value, size_t size) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RuleBean::mutable_description() {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  return description_;
}
inline ::std::string* RuleBean::release_description() {
  clear_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = description_;
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RuleBean::set_allocated_description(::std::string* description) {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (description) {
    set_has_description();
    description_ = description;
  } else {
    clear_has_description();
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// TicketMsionBean

// optional uint32 Id = 1;
inline bool TicketMsionBean::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TicketMsionBean::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TicketMsionBean::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TicketMsionBean::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TicketMsionBean::id() const {
  return id_;
}
inline void TicketMsionBean::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 UserId = 2;
inline bool TicketMsionBean::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TicketMsionBean::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TicketMsionBean::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TicketMsionBean::clear_userid() {
  userid_ = 0u;
  clear_has_userid();
}
inline ::google::protobuf::uint32 TicketMsionBean::userid() const {
  return userid_;
}
inline void TicketMsionBean::set_userid(::google::protobuf::uint32 value) {
  set_has_userid();
  userid_ = value;
}

// optional bytes UserName = 3;
inline bool TicketMsionBean::has_username() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TicketMsionBean::set_has_username() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TicketMsionBean::clear_has_username() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TicketMsionBean::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& TicketMsionBean::username() const {
  return *username_;
}
inline void TicketMsionBean::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void TicketMsionBean::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void TicketMsionBean::set_username(const void* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TicketMsionBean::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* TicketMsionBean::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TicketMsionBean::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 ActUserId = 4;
inline bool TicketMsionBean::has_actuserid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TicketMsionBean::set_has_actuserid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TicketMsionBean::clear_has_actuserid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TicketMsionBean::clear_actuserid() {
  actuserid_ = 0u;
  clear_has_actuserid();
}
inline ::google::protobuf::uint32 TicketMsionBean::actuserid() const {
  return actuserid_;
}
inline void TicketMsionBean::set_actuserid(::google::protobuf::uint32 value) {
  set_has_actuserid();
  actuserid_ = value;
}

// optional bytes ActUserName = 5;
inline bool TicketMsionBean::has_actusername() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TicketMsionBean::set_has_actusername() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TicketMsionBean::clear_has_actusername() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TicketMsionBean::clear_actusername() {
  if (actusername_ != &::google::protobuf::internal::kEmptyString) {
    actusername_->clear();
  }
  clear_has_actusername();
}
inline const ::std::string& TicketMsionBean::actusername() const {
  return *actusername_;
}
inline void TicketMsionBean::set_actusername(const ::std::string& value) {
  set_has_actusername();
  if (actusername_ == &::google::protobuf::internal::kEmptyString) {
    actusername_ = new ::std::string;
  }
  actusername_->assign(value);
}
inline void TicketMsionBean::set_actusername(const char* value) {
  set_has_actusername();
  if (actusername_ == &::google::protobuf::internal::kEmptyString) {
    actusername_ = new ::std::string;
  }
  actusername_->assign(value);
}
inline void TicketMsionBean::set_actusername(const void* value, size_t size) {
  set_has_actusername();
  if (actusername_ == &::google::protobuf::internal::kEmptyString) {
    actusername_ = new ::std::string;
  }
  actusername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TicketMsionBean::mutable_actusername() {
  set_has_actusername();
  if (actusername_ == &::google::protobuf::internal::kEmptyString) {
    actusername_ = new ::std::string;
  }
  return actusername_;
}
inline ::std::string* TicketMsionBean::release_actusername() {
  clear_has_actusername();
  if (actusername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = actusername_;
    actusername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TicketMsionBean::set_allocated_actusername(::std::string* actusername) {
  if (actusername_ != &::google::protobuf::internal::kEmptyString) {
    delete actusername_;
  }
  if (actusername) {
    set_has_actusername();
    actusername_ = actusername;
  } else {
    clear_has_actusername();
    actusername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes Name = 6;
inline bool TicketMsionBean::has_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TicketMsionBean::set_has_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TicketMsionBean::clear_has_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TicketMsionBean::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& TicketMsionBean::name() const {
  return *name_;
}
inline void TicketMsionBean::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void TicketMsionBean::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void TicketMsionBean::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TicketMsionBean::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* TicketMsionBean::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TicketMsionBean::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes PublishTime = 7;
inline bool TicketMsionBean::has_publishtime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TicketMsionBean::set_has_publishtime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TicketMsionBean::clear_has_publishtime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TicketMsionBean::clear_publishtime() {
  if (publishtime_ != &::google::protobuf::internal::kEmptyString) {
    publishtime_->clear();
  }
  clear_has_publishtime();
}
inline const ::std::string& TicketMsionBean::publishtime() const {
  return *publishtime_;
}
inline void TicketMsionBean::set_publishtime(const ::std::string& value) {
  set_has_publishtime();
  if (publishtime_ == &::google::protobuf::internal::kEmptyString) {
    publishtime_ = new ::std::string;
  }
  publishtime_->assign(value);
}
inline void TicketMsionBean::set_publishtime(const char* value) {
  set_has_publishtime();
  if (publishtime_ == &::google::protobuf::internal::kEmptyString) {
    publishtime_ = new ::std::string;
  }
  publishtime_->assign(value);
}
inline void TicketMsionBean::set_publishtime(const void* value, size_t size) {
  set_has_publishtime();
  if (publishtime_ == &::google::protobuf::internal::kEmptyString) {
    publishtime_ = new ::std::string;
  }
  publishtime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TicketMsionBean::mutable_publishtime() {
  set_has_publishtime();
  if (publishtime_ == &::google::protobuf::internal::kEmptyString) {
    publishtime_ = new ::std::string;
  }
  return publishtime_;
}
inline ::std::string* TicketMsionBean::release_publishtime() {
  clear_has_publishtime();
  if (publishtime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = publishtime_;
    publishtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TicketMsionBean::set_allocated_publishtime(::std::string* publishtime) {
  if (publishtime_ != &::google::protobuf::internal::kEmptyString) {
    delete publishtime_;
  }
  if (publishtime) {
    set_has_publishtime();
    publishtime_ = publishtime;
  } else {
    clear_has_publishtime();
    publishtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// TicketBean

// optional uint32 Id = 1;
inline bool TicketBean::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TicketBean::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TicketBean::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TicketBean::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TicketBean::id() const {
  return id_;
}
inline void TicketBean::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 CuserId = 2;
inline bool TicketBean::has_cuserid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TicketBean::set_has_cuserid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TicketBean::clear_has_cuserid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TicketBean::clear_cuserid() {
  cuserid_ = 0u;
  clear_has_cuserid();
}
inline ::google::protobuf::uint32 TicketBean::cuserid() const {
  return cuserid_;
}
inline void TicketBean::set_cuserid(::google::protobuf::uint32 value) {
  set_has_cuserid();
  cuserid_ = value;
}

// optional bytes CuserName = 3;
inline bool TicketBean::has_cusername() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TicketBean::set_has_cusername() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TicketBean::clear_has_cusername() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TicketBean::clear_cusername() {
  if (cusername_ != &::google::protobuf::internal::kEmptyString) {
    cusername_->clear();
  }
  clear_has_cusername();
}
inline const ::std::string& TicketBean::cusername() const {
  return *cusername_;
}
inline void TicketBean::set_cusername(const ::std::string& value) {
  set_has_cusername();
  if (cusername_ == &::google::protobuf::internal::kEmptyString) {
    cusername_ = new ::std::string;
  }
  cusername_->assign(value);
}
inline void TicketBean::set_cusername(const char* value) {
  set_has_cusername();
  if (cusername_ == &::google::protobuf::internal::kEmptyString) {
    cusername_ = new ::std::string;
  }
  cusername_->assign(value);
}
inline void TicketBean::set_cusername(const void* value, size_t size) {
  set_has_cusername();
  if (cusername_ == &::google::protobuf::internal::kEmptyString) {
    cusername_ = new ::std::string;
  }
  cusername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TicketBean::mutable_cusername() {
  set_has_cusername();
  if (cusername_ == &::google::protobuf::internal::kEmptyString) {
    cusername_ = new ::std::string;
  }
  return cusername_;
}
inline ::std::string* TicketBean::release_cusername() {
  clear_has_cusername();
  if (cusername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cusername_;
    cusername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TicketBean::set_allocated_cusername(::std::string* cusername) {
  if (cusername_ != &::google::protobuf::internal::kEmptyString) {
    delete cusername_;
  }
  if (cusername) {
    set_has_cusername();
    cusername_ = cusername;
  } else {
    clear_has_cusername();
    cusername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 AuserId = 4;
inline bool TicketBean::has_auserid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TicketBean::set_has_auserid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TicketBean::clear_has_auserid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TicketBean::clear_auserid() {
  auserid_ = 0u;
  clear_has_auserid();
}
inline ::google::protobuf::uint32 TicketBean::auserid() const {
  return auserid_;
}
inline void TicketBean::set_auserid(::google::protobuf::uint32 value) {
  set_has_auserid();
  auserid_ = value;
}

// optional bytes AuserName = 5;
inline bool TicketBean::has_ausername() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TicketBean::set_has_ausername() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TicketBean::clear_has_ausername() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TicketBean::clear_ausername() {
  if (ausername_ != &::google::protobuf::internal::kEmptyString) {
    ausername_->clear();
  }
  clear_has_ausername();
}
inline const ::std::string& TicketBean::ausername() const {
  return *ausername_;
}
inline void TicketBean::set_ausername(const ::std::string& value) {
  set_has_ausername();
  if (ausername_ == &::google::protobuf::internal::kEmptyString) {
    ausername_ = new ::std::string;
  }
  ausername_->assign(value);
}
inline void TicketBean::set_ausername(const char* value) {
  set_has_ausername();
  if (ausername_ == &::google::protobuf::internal::kEmptyString) {
    ausername_ = new ::std::string;
  }
  ausername_->assign(value);
}
inline void TicketBean::set_ausername(const void* value, size_t size) {
  set_has_ausername();
  if (ausername_ == &::google::protobuf::internal::kEmptyString) {
    ausername_ = new ::std::string;
  }
  ausername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TicketBean::mutable_ausername() {
  set_has_ausername();
  if (ausername_ == &::google::protobuf::internal::kEmptyString) {
    ausername_ = new ::std::string;
  }
  return ausername_;
}
inline ::std::string* TicketBean::release_ausername() {
  clear_has_ausername();
  if (ausername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ausername_;
    ausername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TicketBean::set_allocated_ausername(::std::string* ausername) {
  if (ausername_ != &::google::protobuf::internal::kEmptyString) {
    delete ausername_;
  }
  if (ausername) {
    set_has_ausername();
    ausername_ = ausername;
  } else {
    clear_has_ausername();
    ausername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 MissionId = 6;
inline bool TicketBean::has_missionid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TicketBean::set_has_missionid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TicketBean::clear_has_missionid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TicketBean::clear_missionid() {
  missionid_ = 0u;
  clear_has_missionid();
}
inline ::google::protobuf::uint32 TicketBean::missionid() const {
  return missionid_;
}
inline void TicketBean::set_missionid(::google::protobuf::uint32 value) {
  set_has_missionid();
  missionid_ = value;
}

// optional bytes MissionName = 7;
inline bool TicketBean::has_missionname() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TicketBean::set_has_missionname() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TicketBean::clear_has_missionname() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TicketBean::clear_missionname() {
  if (missionname_ != &::google::protobuf::internal::kEmptyString) {
    missionname_->clear();
  }
  clear_has_missionname();
}
inline const ::std::string& TicketBean::missionname() const {
  return *missionname_;
}
inline void TicketBean::set_missionname(const ::std::string& value) {
  set_has_missionname();
  if (missionname_ == &::google::protobuf::internal::kEmptyString) {
    missionname_ = new ::std::string;
  }
  missionname_->assign(value);
}
inline void TicketBean::set_missionname(const char* value) {
  set_has_missionname();
  if (missionname_ == &::google::protobuf::internal::kEmptyString) {
    missionname_ = new ::std::string;
  }
  missionname_->assign(value);
}
inline void TicketBean::set_missionname(const void* value, size_t size) {
  set_has_missionname();
  if (missionname_ == &::google::protobuf::internal::kEmptyString) {
    missionname_ = new ::std::string;
  }
  missionname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TicketBean::mutable_missionname() {
  set_has_missionname();
  if (missionname_ == &::google::protobuf::internal::kEmptyString) {
    missionname_ = new ::std::string;
  }
  return missionname_;
}
inline ::std::string* TicketBean::release_missionname() {
  clear_has_missionname();
  if (missionname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = missionname_;
    missionname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TicketBean::set_allocated_missionname(::std::string* missionname) {
  if (missionname_ != &::google::protobuf::internal::kEmptyString) {
    delete missionname_;
  }
  if (missionname) {
    set_has_missionname();
    missionname_ = missionname;
  } else {
    clear_has_missionname();
    missionname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes No = 8;
inline bool TicketBean::has_no() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TicketBean::set_has_no() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TicketBean::clear_has_no() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TicketBean::clear_no() {
  if (no_ != &::google::protobuf::internal::kEmptyString) {
    no_->clear();
  }
  clear_has_no();
}
inline const ::std::string& TicketBean::no() const {
  return *no_;
}
inline void TicketBean::set_no(const ::std::string& value) {
  set_has_no();
  if (no_ == &::google::protobuf::internal::kEmptyString) {
    no_ = new ::std::string;
  }
  no_->assign(value);
}
inline void TicketBean::set_no(const char* value) {
  set_has_no();
  if (no_ == &::google::protobuf::internal::kEmptyString) {
    no_ = new ::std::string;
  }
  no_->assign(value);
}
inline void TicketBean::set_no(const void* value, size_t size) {
  set_has_no();
  if (no_ == &::google::protobuf::internal::kEmptyString) {
    no_ = new ::std::string;
  }
  no_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TicketBean::mutable_no() {
  set_has_no();
  if (no_ == &::google::protobuf::internal::kEmptyString) {
    no_ = new ::std::string;
  }
  return no_;
}
inline ::std::string* TicketBean::release_no() {
  clear_has_no();
  if (no_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = no_;
    no_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TicketBean::set_allocated_no(::std::string* no) {
  if (no_ != &::google::protobuf::internal::kEmptyString) {
    delete no_;
  }
  if (no) {
    set_has_no();
    no_ = no;
  } else {
    clear_has_no();
    no_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes ActionType = 9;
inline bool TicketBean::has_actiontype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TicketBean::set_has_actiontype() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TicketBean::clear_has_actiontype() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TicketBean::clear_actiontype() {
  if (actiontype_ != &::google::protobuf::internal::kEmptyString) {
    actiontype_->clear();
  }
  clear_has_actiontype();
}
inline const ::std::string& TicketBean::actiontype() const {
  return *actiontype_;
}
inline void TicketBean::set_actiontype(const ::std::string& value) {
  set_has_actiontype();
  if (actiontype_ == &::google::protobuf::internal::kEmptyString) {
    actiontype_ = new ::std::string;
  }
  actiontype_->assign(value);
}
inline void TicketBean::set_actiontype(const char* value) {
  set_has_actiontype();
  if (actiontype_ == &::google::protobuf::internal::kEmptyString) {
    actiontype_ = new ::std::string;
  }
  actiontype_->assign(value);
}
inline void TicketBean::set_actiontype(const void* value, size_t size) {
  set_has_actiontype();
  if (actiontype_ == &::google::protobuf::internal::kEmptyString) {
    actiontype_ = new ::std::string;
  }
  actiontype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TicketBean::mutable_actiontype() {
  set_has_actiontype();
  if (actiontype_ == &::google::protobuf::internal::kEmptyString) {
    actiontype_ = new ::std::string;
  }
  return actiontype_;
}
inline ::std::string* TicketBean::release_actiontype() {
  clear_has_actiontype();
  if (actiontype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = actiontype_;
    actiontype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TicketBean::set_allocated_actiontype(::std::string* actiontype) {
  if (actiontype_ != &::google::protobuf::internal::kEmptyString) {
    delete actiontype_;
  }
  if (actiontype) {
    set_has_actiontype();
    actiontype_ = actiontype;
  } else {
    clear_has_actiontype();
    actiontype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes info = 10;
inline bool TicketBean::has_info() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TicketBean::set_has_info() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TicketBean::clear_has_info() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TicketBean::clear_info() {
  if (info_ != &::google::protobuf::internal::kEmptyString) {
    info_->clear();
  }
  clear_has_info();
}
inline const ::std::string& TicketBean::info() const {
  return *info_;
}
inline void TicketBean::set_info(const ::std::string& value) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  info_->assign(value);
}
inline void TicketBean::set_info(const char* value) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  info_->assign(value);
}
inline void TicketBean::set_info(const void* value, size_t size) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  info_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TicketBean::mutable_info() {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  return info_;
}
inline ::std::string* TicketBean::release_info() {
  clear_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = info_;
    info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TicketBean::set_allocated_info(::std::string* info) {
  if (info_ != &::google::protobuf::internal::kEmptyString) {
    delete info_;
  }
  if (info) {
    set_has_info();
    info_ = info;
  } else {
    clear_has_info();
    info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes ActionPerson = 11;
inline bool TicketBean::has_actionperson() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TicketBean::set_has_actionperson() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TicketBean::clear_has_actionperson() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TicketBean::clear_actionperson() {
  if (actionperson_ != &::google::protobuf::internal::kEmptyString) {
    actionperson_->clear();
  }
  clear_has_actionperson();
}
inline const ::std::string& TicketBean::actionperson() const {
  return *actionperson_;
}
inline void TicketBean::set_actionperson(const ::std::string& value) {
  set_has_actionperson();
  if (actionperson_ == &::google::protobuf::internal::kEmptyString) {
    actionperson_ = new ::std::string;
  }
  actionperson_->assign(value);
}
inline void TicketBean::set_actionperson(const char* value) {
  set_has_actionperson();
  if (actionperson_ == &::google::protobuf::internal::kEmptyString) {
    actionperson_ = new ::std::string;
  }
  actionperson_->assign(value);
}
inline void TicketBean::set_actionperson(const void* value, size_t size) {
  set_has_actionperson();
  if (actionperson_ == &::google::protobuf::internal::kEmptyString) {
    actionperson_ = new ::std::string;
  }
  actionperson_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TicketBean::mutable_actionperson() {
  set_has_actionperson();
  if (actionperson_ == &::google::protobuf::internal::kEmptyString) {
    actionperson_ = new ::std::string;
  }
  return actionperson_;
}
inline ::std::string* TicketBean::release_actionperson() {
  clear_has_actionperson();
  if (actionperson_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = actionperson_;
    actionperson_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TicketBean::set_allocated_actionperson(::std::string* actionperson) {
  if (actionperson_ != &::google::protobuf::internal::kEmptyString) {
    delete actionperson_;
  }
  if (actionperson) {
    set_has_actionperson();
    actionperson_ = actionperson;
  } else {
    clear_has_actionperson();
    actionperson_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes ProtectPerson = 12;
inline bool TicketBean::has_protectperson() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TicketBean::set_has_protectperson() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TicketBean::clear_has_protectperson() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TicketBean::clear_protectperson() {
  if (protectperson_ != &::google::protobuf::internal::kEmptyString) {
    protectperson_->clear();
  }
  clear_has_protectperson();
}
inline const ::std::string& TicketBean::protectperson() const {
  return *protectperson_;
}
inline void TicketBean::set_protectperson(const ::std::string& value) {
  set_has_protectperson();
  if (protectperson_ == &::google::protobuf::internal::kEmptyString) {
    protectperson_ = new ::std::string;
  }
  protectperson_->assign(value);
}
inline void TicketBean::set_protectperson(const char* value) {
  set_has_protectperson();
  if (protectperson_ == &::google::protobuf::internal::kEmptyString) {
    protectperson_ = new ::std::string;
  }
  protectperson_->assign(value);
}
inline void TicketBean::set_protectperson(const void* value, size_t size) {
  set_has_protectperson();
  if (protectperson_ == &::google::protobuf::internal::kEmptyString) {
    protectperson_ = new ::std::string;
  }
  protectperson_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TicketBean::mutable_protectperson() {
  set_has_protectperson();
  if (protectperson_ == &::google::protobuf::internal::kEmptyString) {
    protectperson_ = new ::std::string;
  }
  return protectperson_;
}
inline ::std::string* TicketBean::release_protectperson() {
  clear_has_protectperson();
  if (protectperson_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = protectperson_;
    protectperson_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TicketBean::set_allocated_protectperson(::std::string* protectperson) {
  if (protectperson_ != &::google::protobuf::internal::kEmptyString) {
    delete protectperson_;
  }
  if (protectperson) {
    set_has_protectperson();
    protectperson_ = protectperson;
  } else {
    clear_has_protectperson();
    protectperson_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes ChargePerson = 13;
inline bool TicketBean::has_chargeperson() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TicketBean::set_has_chargeperson() {
  _has_bits_[0] |= 0x00001000u;
}
inline void TicketBean::clear_has_chargeperson() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void TicketBean::clear_chargeperson() {
  if (chargeperson_ != &::google::protobuf::internal::kEmptyString) {
    chargeperson_->clear();
  }
  clear_has_chargeperson();
}
inline const ::std::string& TicketBean::chargeperson() const {
  return *chargeperson_;
}
inline void TicketBean::set_chargeperson(const ::std::string& value) {
  set_has_chargeperson();
  if (chargeperson_ == &::google::protobuf::internal::kEmptyString) {
    chargeperson_ = new ::std::string;
  }
  chargeperson_->assign(value);
}
inline void TicketBean::set_chargeperson(const char* value) {
  set_has_chargeperson();
  if (chargeperson_ == &::google::protobuf::internal::kEmptyString) {
    chargeperson_ = new ::std::string;
  }
  chargeperson_->assign(value);
}
inline void TicketBean::set_chargeperson(const void* value, size_t size) {
  set_has_chargeperson();
  if (chargeperson_ == &::google::protobuf::internal::kEmptyString) {
    chargeperson_ = new ::std::string;
  }
  chargeperson_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TicketBean::mutable_chargeperson() {
  set_has_chargeperson();
  if (chargeperson_ == &::google::protobuf::internal::kEmptyString) {
    chargeperson_ = new ::std::string;
  }
  return chargeperson_;
}
inline ::std::string* TicketBean::release_chargeperson() {
  clear_has_chargeperson();
  if (chargeperson_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = chargeperson_;
    chargeperson_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TicketBean::set_allocated_chargeperson(::std::string* chargeperson) {
  if (chargeperson_ != &::google::protobuf::internal::kEmptyString) {
    delete chargeperson_;
  }
  if (chargeperson) {
    set_has_chargeperson();
    chargeperson_ = chargeperson;
  } else {
    clear_has_chargeperson();
    chargeperson_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes StartTime = 14;
inline bool TicketBean::has_starttime() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void TicketBean::set_has_starttime() {
  _has_bits_[0] |= 0x00002000u;
}
inline void TicketBean::clear_has_starttime() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void TicketBean::clear_starttime() {
  if (starttime_ != &::google::protobuf::internal::kEmptyString) {
    starttime_->clear();
  }
  clear_has_starttime();
}
inline const ::std::string& TicketBean::starttime() const {
  return *starttime_;
}
inline void TicketBean::set_starttime(const ::std::string& value) {
  set_has_starttime();
  if (starttime_ == &::google::protobuf::internal::kEmptyString) {
    starttime_ = new ::std::string;
  }
  starttime_->assign(value);
}
inline void TicketBean::set_starttime(const char* value) {
  set_has_starttime();
  if (starttime_ == &::google::protobuf::internal::kEmptyString) {
    starttime_ = new ::std::string;
  }
  starttime_->assign(value);
}
inline void TicketBean::set_starttime(const void* value, size_t size) {
  set_has_starttime();
  if (starttime_ == &::google::protobuf::internal::kEmptyString) {
    starttime_ = new ::std::string;
  }
  starttime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TicketBean::mutable_starttime() {
  set_has_starttime();
  if (starttime_ == &::google::protobuf::internal::kEmptyString) {
    starttime_ = new ::std::string;
  }
  return starttime_;
}
inline ::std::string* TicketBean::release_starttime() {
  clear_has_starttime();
  if (starttime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = starttime_;
    starttime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TicketBean::set_allocated_starttime(::std::string* starttime) {
  if (starttime_ != &::google::protobuf::internal::kEmptyString) {
    delete starttime_;
  }
  if (starttime) {
    set_has_starttime();
    starttime_ = starttime;
  } else {
    clear_has_starttime();
    starttime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes EndTime = 15;
inline bool TicketBean::has_endtime() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void TicketBean::set_has_endtime() {
  _has_bits_[0] |= 0x00004000u;
}
inline void TicketBean::clear_has_endtime() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void TicketBean::clear_endtime() {
  if (endtime_ != &::google::protobuf::internal::kEmptyString) {
    endtime_->clear();
  }
  clear_has_endtime();
}
inline const ::std::string& TicketBean::endtime() const {
  return *endtime_;
}
inline void TicketBean::set_endtime(const ::std::string& value) {
  set_has_endtime();
  if (endtime_ == &::google::protobuf::internal::kEmptyString) {
    endtime_ = new ::std::string;
  }
  endtime_->assign(value);
}
inline void TicketBean::set_endtime(const char* value) {
  set_has_endtime();
  if (endtime_ == &::google::protobuf::internal::kEmptyString) {
    endtime_ = new ::std::string;
  }
  endtime_->assign(value);
}
inline void TicketBean::set_endtime(const void* value, size_t size) {
  set_has_endtime();
  if (endtime_ == &::google::protobuf::internal::kEmptyString) {
    endtime_ = new ::std::string;
  }
  endtime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TicketBean::mutable_endtime() {
  set_has_endtime();
  if (endtime_ == &::google::protobuf::internal::kEmptyString) {
    endtime_ = new ::std::string;
  }
  return endtime_;
}
inline ::std::string* TicketBean::release_endtime() {
  clear_has_endtime();
  if (endtime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = endtime_;
    endtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TicketBean::set_allocated_endtime(::std::string* endtime) {
  if (endtime_ != &::google::protobuf::internal::kEmptyString) {
    delete endtime_;
  }
  if (endtime) {
    set_has_endtime();
    endtime_ = endtime;
  } else {
    clear_has_endtime();
    endtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes PublishTime = 16;
inline bool TicketBean::has_publishtime() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void TicketBean::set_has_publishtime() {
  _has_bits_[0] |= 0x00008000u;
}
inline void TicketBean::clear_has_publishtime() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void TicketBean::clear_publishtime() {
  if (publishtime_ != &::google::protobuf::internal::kEmptyString) {
    publishtime_->clear();
  }
  clear_has_publishtime();
}
inline const ::std::string& TicketBean::publishtime() const {
  return *publishtime_;
}
inline void TicketBean::set_publishtime(const ::std::string& value) {
  set_has_publishtime();
  if (publishtime_ == &::google::protobuf::internal::kEmptyString) {
    publishtime_ = new ::std::string;
  }
  publishtime_->assign(value);
}
inline void TicketBean::set_publishtime(const char* value) {
  set_has_publishtime();
  if (publishtime_ == &::google::protobuf::internal::kEmptyString) {
    publishtime_ = new ::std::string;
  }
  publishtime_->assign(value);
}
inline void TicketBean::set_publishtime(const void* value, size_t size) {
  set_has_publishtime();
  if (publishtime_ == &::google::protobuf::internal::kEmptyString) {
    publishtime_ = new ::std::string;
  }
  publishtime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TicketBean::mutable_publishtime() {
  set_has_publishtime();
  if (publishtime_ == &::google::protobuf::internal::kEmptyString) {
    publishtime_ = new ::std::string;
  }
  return publishtime_;
}
inline ::std::string* TicketBean::release_publishtime() {
  clear_has_publishtime();
  if (publishtime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = publishtime_;
    publishtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TicketBean::set_allocated_publishtime(::std::string* publishtime) {
  if (publishtime_ != &::google::protobuf::internal::kEmptyString) {
    delete publishtime_;
  }
  if (publishtime) {
    set_has_publishtime();
    publishtime_ = publishtime;
  } else {
    clear_has_publishtime();
    publishtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// TicketActBean

// optional uint32 Ticketid = 1;
inline bool TicketActBean::has_ticketid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TicketActBean::set_has_ticketid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TicketActBean::clear_has_ticketid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TicketActBean::clear_ticketid() {
  ticketid_ = 0u;
  clear_has_ticketid();
}
inline ::google::protobuf::uint32 TicketActBean::ticketid() const {
  return ticketid_;
}
inline void TicketActBean::set_ticketid(::google::protobuf::uint32 value) {
  set_has_ticketid();
  ticketid_ = value;
}

// optional uint32 OrderNum = 2;
inline bool TicketActBean::has_ordernum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TicketActBean::set_has_ordernum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TicketActBean::clear_has_ordernum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TicketActBean::clear_ordernum() {
  ordernum_ = 0u;
  clear_has_ordernum();
}
inline ::google::protobuf::uint32 TicketActBean::ordernum() const {
  return ordernum_;
}
inline void TicketActBean::set_ordernum(::google::protobuf::uint32 value) {
  set_has_ordernum();
  ordernum_ = value;
}

// optional bytes SystemContent = 3;
inline bool TicketActBean::has_systemcontent() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TicketActBean::set_has_systemcontent() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TicketActBean::clear_has_systemcontent() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TicketActBean::clear_systemcontent() {
  if (systemcontent_ != &::google::protobuf::internal::kEmptyString) {
    systemcontent_->clear();
  }
  clear_has_systemcontent();
}
inline const ::std::string& TicketActBean::systemcontent() const {
  return *systemcontent_;
}
inline void TicketActBean::set_systemcontent(const ::std::string& value) {
  set_has_systemcontent();
  if (systemcontent_ == &::google::protobuf::internal::kEmptyString) {
    systemcontent_ = new ::std::string;
  }
  systemcontent_->assign(value);
}
inline void TicketActBean::set_systemcontent(const char* value) {
  set_has_systemcontent();
  if (systemcontent_ == &::google::protobuf::internal::kEmptyString) {
    systemcontent_ = new ::std::string;
  }
  systemcontent_->assign(value);
}
inline void TicketActBean::set_systemcontent(const void* value, size_t size) {
  set_has_systemcontent();
  if (systemcontent_ == &::google::protobuf::internal::kEmptyString) {
    systemcontent_ = new ::std::string;
  }
  systemcontent_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TicketActBean::mutable_systemcontent() {
  set_has_systemcontent();
  if (systemcontent_ == &::google::protobuf::internal::kEmptyString) {
    systemcontent_ = new ::std::string;
  }
  return systemcontent_;
}
inline ::std::string* TicketActBean::release_systemcontent() {
  clear_has_systemcontent();
  if (systemcontent_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = systemcontent_;
    systemcontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TicketActBean::set_allocated_systemcontent(::std::string* systemcontent) {
  if (systemcontent_ != &::google::protobuf::internal::kEmptyString) {
    delete systemcontent_;
  }
  if (systemcontent) {
    set_has_systemcontent();
    systemcontent_ = systemcontent;
  } else {
    clear_has_systemcontent();
    systemcontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes Content = 4;
inline bool TicketActBean::has_content() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TicketActBean::set_has_content() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TicketActBean::clear_has_content() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TicketActBean::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& TicketActBean::content() const {
  return *content_;
}
inline void TicketActBean::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void TicketActBean::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void TicketActBean::set_content(const void* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TicketActBean::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* TicketActBean::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TicketActBean::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace buff
}  // namespace spplus
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_msgbean_2eproto__INCLUDED
