// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msgbean.proto

#ifndef PROTOBUF_msgbean_2eproto__INCLUDED
#define PROTOBUF_msgbean_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace spplus {
namespace buff {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_msgbean_2eproto();
void protobuf_AssignDesc_msgbean_2eproto();
void protobuf_ShutdownFile_msgbean_2eproto();

class UserBean;
class StateBean;
class StationTypeBean;
class StationBean;

// ===================================================================

class UserBean : public ::google::protobuf::Message {
 public:
  UserBean();
  virtual ~UserBean();

  UserBean(const UserBean& from);

  inline UserBean& operator=(const UserBean& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserBean& default_instance();

  void Swap(UserBean* other);

  // implements Message ----------------------------------------------

  UserBean* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserBean& from);
  void MergeFrom(const UserBean& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline const ::std::string& userid() const;
  inline void set_userid(const ::std::string& value);
  inline void set_userid(const char* value);
  inline void set_userid(const void* value, size_t size);
  inline ::std::string* mutable_userid();
  inline ::std::string* release_userid();
  inline void set_allocated_userid(::std::string* userid);

  // optional bytes username = 2;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 2;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const void* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // optional bytes userrole = 3;
  inline bool has_userrole() const;
  inline void clear_userrole();
  static const int kUserroleFieldNumber = 3;
  inline const ::std::string& userrole() const;
  inline void set_userrole(const ::std::string& value);
  inline void set_userrole(const char* value);
  inline void set_userrole(const void* value, size_t size);
  inline ::std::string* mutable_userrole();
  inline ::std::string* release_userrole();
  inline void set_allocated_userrole(::std::string* userrole);

  // @@protoc_insertion_point(class_scope:com.spplus.buff.UserBean)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_userrole();
  inline void clear_has_userrole();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* userid_;
  ::std::string* username_;
  ::std::string* userrole_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_msgbean_2eproto();
  friend void protobuf_AssignDesc_msgbean_2eproto();
  friend void protobuf_ShutdownFile_msgbean_2eproto();

  void InitAsDefaultInstance();
  static UserBean* default_instance_;
};
// -------------------------------------------------------------------

class StateBean : public ::google::protobuf::Message {
 public:
  StateBean();
  virtual ~StateBean();

  StateBean(const StateBean& from);

  inline StateBean& operator=(const StateBean& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StateBean& default_instance();

  void Swap(StateBean* other);

  // implements Message ----------------------------------------------

  StateBean* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StateBean& from);
  void MergeFrom(const StateBean& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes cimId = 1;
  inline bool has_cimid() const;
  inline void clear_cimid();
  static const int kCimIdFieldNumber = 1;
  inline const ::std::string& cimid() const;
  inline void set_cimid(const ::std::string& value);
  inline void set_cimid(const char* value);
  inline void set_cimid(const void* value, size_t size);
  inline ::std::string* mutable_cimid();
  inline ::std::string* release_cimid();
  inline void set_allocated_cimid(::std::string* cimid);

  // optional uint32 state = 2;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline ::google::protobuf::uint32 state() const;
  inline void set_state(::google::protobuf::uint32 value);

  // optional uint32 isBoard = 3;
  inline bool has_isboard() const;
  inline void clear_isboard();
  static const int kIsBoardFieldNumber = 3;
  inline ::google::protobuf::uint32 isboard() const;
  inline void set_isboard(::google::protobuf::uint32 value);

  // optional uint32 isElectric = 4;
  inline bool has_iselectric() const;
  inline void clear_iselectric();
  static const int kIsElectricFieldNumber = 4;
  inline ::google::protobuf::uint32 iselectric() const;
  inline void set_iselectric(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:com.spplus.buff.StateBean)
 private:
  inline void set_has_cimid();
  inline void clear_has_cimid();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_isboard();
  inline void clear_has_isboard();
  inline void set_has_iselectric();
  inline void clear_has_iselectric();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* cimid_;
  ::google::protobuf::uint32 state_;
  ::google::protobuf::uint32 isboard_;
  ::google::protobuf::uint32 iselectric_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_msgbean_2eproto();
  friend void protobuf_AssignDesc_msgbean_2eproto();
  friend void protobuf_ShutdownFile_msgbean_2eproto();

  void InitAsDefaultInstance();
  static StateBean* default_instance_;
};
// -------------------------------------------------------------------

class StationTypeBean : public ::google::protobuf::Message {
 public:
  StationTypeBean();
  virtual ~StationTypeBean();

  StationTypeBean(const StationTypeBean& from);

  inline StationTypeBean& operator=(const StationTypeBean& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StationTypeBean& default_instance();

  void Swap(StationTypeBean* other);

  // implements Message ----------------------------------------------

  StationTypeBean* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StationTypeBean& from);
  void MergeFrom(const StationTypeBean& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional bytes Name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:com.spplus.buff.StationTypeBean)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_msgbean_2eproto();
  friend void protobuf_AssignDesc_msgbean_2eproto();
  friend void protobuf_ShutdownFile_msgbean_2eproto();

  void InitAsDefaultInstance();
  static StationTypeBean* default_instance_;
};
// -------------------------------------------------------------------

class StationBean : public ::google::protobuf::Message {
 public:
  StationBean();
  virtual ~StationBean();

  StationBean(const StationBean& from);

  inline StationBean& operator=(const StationBean& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StationBean& default_instance();

  void Swap(StationBean* other);

  // implements Message ----------------------------------------------

  StationBean* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StationBean& from);
  void MergeFrom(const StationBean& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 CategoryId = 2;
  inline bool has_categoryid() const;
  inline void clear_categoryid();
  static const int kCategoryIdFieldNumber = 2;
  inline ::google::protobuf::uint32 categoryid() const;
  inline void set_categoryid(::google::protobuf::uint32 value);

  // optional bytes Name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional bytes CimId = 4;
  inline bool has_cimid() const;
  inline void clear_cimid();
  static const int kCimIdFieldNumber = 4;
  inline const ::std::string& cimid() const;
  inline void set_cimid(const ::std::string& value);
  inline void set_cimid(const char* value);
  inline void set_cimid(const void* value, size_t size);
  inline ::std::string* mutable_cimid();
  inline ::std::string* release_cimid();
  inline void set_allocated_cimid(::std::string* cimid);

  // optional bytes CurrentName = 5;
  inline bool has_currentname() const;
  inline void clear_currentname();
  static const int kCurrentNameFieldNumber = 5;
  inline const ::std::string& currentname() const;
  inline void set_currentname(const ::std::string& value);
  inline void set_currentname(const char* value);
  inline void set_currentname(const void* value, size_t size);
  inline ::std::string* mutable_currentname();
  inline ::std::string* release_currentname();
  inline void set_allocated_currentname(::std::string* currentname);

  // optional bytes Path = 6;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 6;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const void* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  inline void set_allocated_path(::std::string* path);

  // @@protoc_insertion_point(class_scope:com.spplus.buff.StationBean)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_categoryid();
  inline void clear_has_categoryid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_cimid();
  inline void clear_has_cimid();
  inline void set_has_currentname();
  inline void clear_has_currentname();
  inline void set_has_path();
  inline void clear_has_path();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 categoryid_;
  ::std::string* name_;
  ::std::string* cimid_;
  ::std::string* currentname_;
  ::std::string* path_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_msgbean_2eproto();
  friend void protobuf_AssignDesc_msgbean_2eproto();
  friend void protobuf_ShutdownFile_msgbean_2eproto();

  void InitAsDefaultInstance();
  static StationBean* default_instance_;
};
// ===================================================================


// ===================================================================

// UserBean

// optional bytes userid = 1;
inline bool UserBean::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserBean::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserBean::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserBean::clear_userid() {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    userid_->clear();
  }
  clear_has_userid();
}
inline const ::std::string& UserBean::userid() const {
  return *userid_;
}
inline void UserBean::set_userid(const ::std::string& value) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void UserBean::set_userid(const char* value) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void UserBean::set_userid(const void* value, size_t size) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  userid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserBean::mutable_userid() {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  return userid_;
}
inline ::std::string* UserBean::release_userid() {
  clear_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = userid_;
    userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserBean::set_allocated_userid(::std::string* userid) {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (userid) {
    set_has_userid();
    userid_ = userid;
  } else {
    clear_has_userid();
    userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes username = 2;
inline bool UserBean::has_username() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserBean::set_has_username() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserBean::clear_has_username() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserBean::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& UserBean::username() const {
  return *username_;
}
inline void UserBean::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void UserBean::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void UserBean::set_username(const void* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserBean::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* UserBean::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserBean::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes userrole = 3;
inline bool UserBean::has_userrole() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserBean::set_has_userrole() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserBean::clear_has_userrole() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserBean::clear_userrole() {
  if (userrole_ != &::google::protobuf::internal::kEmptyString) {
    userrole_->clear();
  }
  clear_has_userrole();
}
inline const ::std::string& UserBean::userrole() const {
  return *userrole_;
}
inline void UserBean::set_userrole(const ::std::string& value) {
  set_has_userrole();
  if (userrole_ == &::google::protobuf::internal::kEmptyString) {
    userrole_ = new ::std::string;
  }
  userrole_->assign(value);
}
inline void UserBean::set_userrole(const char* value) {
  set_has_userrole();
  if (userrole_ == &::google::protobuf::internal::kEmptyString) {
    userrole_ = new ::std::string;
  }
  userrole_->assign(value);
}
inline void UserBean::set_userrole(const void* value, size_t size) {
  set_has_userrole();
  if (userrole_ == &::google::protobuf::internal::kEmptyString) {
    userrole_ = new ::std::string;
  }
  userrole_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserBean::mutable_userrole() {
  set_has_userrole();
  if (userrole_ == &::google::protobuf::internal::kEmptyString) {
    userrole_ = new ::std::string;
  }
  return userrole_;
}
inline ::std::string* UserBean::release_userrole() {
  clear_has_userrole();
  if (userrole_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = userrole_;
    userrole_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserBean::set_allocated_userrole(::std::string* userrole) {
  if (userrole_ != &::google::protobuf::internal::kEmptyString) {
    delete userrole_;
  }
  if (userrole) {
    set_has_userrole();
    userrole_ = userrole;
  } else {
    clear_has_userrole();
    userrole_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// StateBean

// optional bytes cimId = 1;
inline bool StateBean::has_cimid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StateBean::set_has_cimid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StateBean::clear_has_cimid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StateBean::clear_cimid() {
  if (cimid_ != &::google::protobuf::internal::kEmptyString) {
    cimid_->clear();
  }
  clear_has_cimid();
}
inline const ::std::string& StateBean::cimid() const {
  return *cimid_;
}
inline void StateBean::set_cimid(const ::std::string& value) {
  set_has_cimid();
  if (cimid_ == &::google::protobuf::internal::kEmptyString) {
    cimid_ = new ::std::string;
  }
  cimid_->assign(value);
}
inline void StateBean::set_cimid(const char* value) {
  set_has_cimid();
  if (cimid_ == &::google::protobuf::internal::kEmptyString) {
    cimid_ = new ::std::string;
  }
  cimid_->assign(value);
}
inline void StateBean::set_cimid(const void* value, size_t size) {
  set_has_cimid();
  if (cimid_ == &::google::protobuf::internal::kEmptyString) {
    cimid_ = new ::std::string;
  }
  cimid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StateBean::mutable_cimid() {
  set_has_cimid();
  if (cimid_ == &::google::protobuf::internal::kEmptyString) {
    cimid_ = new ::std::string;
  }
  return cimid_;
}
inline ::std::string* StateBean::release_cimid() {
  clear_has_cimid();
  if (cimid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cimid_;
    cimid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void StateBean::set_allocated_cimid(::std::string* cimid) {
  if (cimid_ != &::google::protobuf::internal::kEmptyString) {
    delete cimid_;
  }
  if (cimid) {
    set_has_cimid();
    cimid_ = cimid;
  } else {
    clear_has_cimid();
    cimid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 state = 2;
inline bool StateBean::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StateBean::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StateBean::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StateBean::clear_state() {
  state_ = 0u;
  clear_has_state();
}
inline ::google::protobuf::uint32 StateBean::state() const {
  return state_;
}
inline void StateBean::set_state(::google::protobuf::uint32 value) {
  set_has_state();
  state_ = value;
}

// optional uint32 isBoard = 3;
inline bool StateBean::has_isboard() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StateBean::set_has_isboard() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StateBean::clear_has_isboard() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StateBean::clear_isboard() {
  isboard_ = 0u;
  clear_has_isboard();
}
inline ::google::protobuf::uint32 StateBean::isboard() const {
  return isboard_;
}
inline void StateBean::set_isboard(::google::protobuf::uint32 value) {
  set_has_isboard();
  isboard_ = value;
}

// optional uint32 isElectric = 4;
inline bool StateBean::has_iselectric() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StateBean::set_has_iselectric() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StateBean::clear_has_iselectric() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StateBean::clear_iselectric() {
  iselectric_ = 0u;
  clear_has_iselectric();
}
inline ::google::protobuf::uint32 StateBean::iselectric() const {
  return iselectric_;
}
inline void StateBean::set_iselectric(::google::protobuf::uint32 value) {
  set_has_iselectric();
  iselectric_ = value;
}

// -------------------------------------------------------------------

// StationTypeBean

// optional uint32 Id = 1;
inline bool StationTypeBean::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StationTypeBean::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StationTypeBean::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StationTypeBean::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 StationTypeBean::id() const {
  return id_;
}
inline void StationTypeBean::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional bytes Name = 2;
inline bool StationTypeBean::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StationTypeBean::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StationTypeBean::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StationTypeBean::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& StationTypeBean::name() const {
  return *name_;
}
inline void StationTypeBean::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void StationTypeBean::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void StationTypeBean::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StationTypeBean::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* StationTypeBean::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void StationTypeBean::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// StationBean

// optional uint32 Id = 1;
inline bool StationBean::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StationBean::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StationBean::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StationBean::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 StationBean::id() const {
  return id_;
}
inline void StationBean::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 CategoryId = 2;
inline bool StationBean::has_categoryid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StationBean::set_has_categoryid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StationBean::clear_has_categoryid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StationBean::clear_categoryid() {
  categoryid_ = 0u;
  clear_has_categoryid();
}
inline ::google::protobuf::uint32 StationBean::categoryid() const {
  return categoryid_;
}
inline void StationBean::set_categoryid(::google::protobuf::uint32 value) {
  set_has_categoryid();
  categoryid_ = value;
}

// optional bytes Name = 3;
inline bool StationBean::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StationBean::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StationBean::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StationBean::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& StationBean::name() const {
  return *name_;
}
inline void StationBean::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void StationBean::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void StationBean::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StationBean::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* StationBean::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void StationBean::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes CimId = 4;
inline bool StationBean::has_cimid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StationBean::set_has_cimid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StationBean::clear_has_cimid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StationBean::clear_cimid() {
  if (cimid_ != &::google::protobuf::internal::kEmptyString) {
    cimid_->clear();
  }
  clear_has_cimid();
}
inline const ::std::string& StationBean::cimid() const {
  return *cimid_;
}
inline void StationBean::set_cimid(const ::std::string& value) {
  set_has_cimid();
  if (cimid_ == &::google::protobuf::internal::kEmptyString) {
    cimid_ = new ::std::string;
  }
  cimid_->assign(value);
}
inline void StationBean::set_cimid(const char* value) {
  set_has_cimid();
  if (cimid_ == &::google::protobuf::internal::kEmptyString) {
    cimid_ = new ::std::string;
  }
  cimid_->assign(value);
}
inline void StationBean::set_cimid(const void* value, size_t size) {
  set_has_cimid();
  if (cimid_ == &::google::protobuf::internal::kEmptyString) {
    cimid_ = new ::std::string;
  }
  cimid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StationBean::mutable_cimid() {
  set_has_cimid();
  if (cimid_ == &::google::protobuf::internal::kEmptyString) {
    cimid_ = new ::std::string;
  }
  return cimid_;
}
inline ::std::string* StationBean::release_cimid() {
  clear_has_cimid();
  if (cimid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cimid_;
    cimid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void StationBean::set_allocated_cimid(::std::string* cimid) {
  if (cimid_ != &::google::protobuf::internal::kEmptyString) {
    delete cimid_;
  }
  if (cimid) {
    set_has_cimid();
    cimid_ = cimid;
  } else {
    clear_has_cimid();
    cimid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes CurrentName = 5;
inline bool StationBean::has_currentname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StationBean::set_has_currentname() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StationBean::clear_has_currentname() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StationBean::clear_currentname() {
  if (currentname_ != &::google::protobuf::internal::kEmptyString) {
    currentname_->clear();
  }
  clear_has_currentname();
}
inline const ::std::string& StationBean::currentname() const {
  return *currentname_;
}
inline void StationBean::set_currentname(const ::std::string& value) {
  set_has_currentname();
  if (currentname_ == &::google::protobuf::internal::kEmptyString) {
    currentname_ = new ::std::string;
  }
  currentname_->assign(value);
}
inline void StationBean::set_currentname(const char* value) {
  set_has_currentname();
  if (currentname_ == &::google::protobuf::internal::kEmptyString) {
    currentname_ = new ::std::string;
  }
  currentname_->assign(value);
}
inline void StationBean::set_currentname(const void* value, size_t size) {
  set_has_currentname();
  if (currentname_ == &::google::protobuf::internal::kEmptyString) {
    currentname_ = new ::std::string;
  }
  currentname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StationBean::mutable_currentname() {
  set_has_currentname();
  if (currentname_ == &::google::protobuf::internal::kEmptyString) {
    currentname_ = new ::std::string;
  }
  return currentname_;
}
inline ::std::string* StationBean::release_currentname() {
  clear_has_currentname();
  if (currentname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = currentname_;
    currentname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void StationBean::set_allocated_currentname(::std::string* currentname) {
  if (currentname_ != &::google::protobuf::internal::kEmptyString) {
    delete currentname_;
  }
  if (currentname) {
    set_has_currentname();
    currentname_ = currentname;
  } else {
    clear_has_currentname();
    currentname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes Path = 6;
inline bool StationBean::has_path() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void StationBean::set_has_path() {
  _has_bits_[0] |= 0x00000020u;
}
inline void StationBean::clear_has_path() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void StationBean::clear_path() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& StationBean::path() const {
  return *path_;
}
inline void StationBean::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void StationBean::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void StationBean::set_path(const void* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StationBean::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  return path_;
}
inline ::std::string* StationBean::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void StationBean::set_allocated_path(::std::string* path) {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (path) {
    set_has_path();
    path_ = path;
  } else {
    clear_has_path();
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace buff
}  // namespace spplus
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_msgbean_2eproto__INCLUDED
