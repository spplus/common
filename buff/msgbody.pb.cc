// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msgbody.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "msgbody.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace spplus {
namespace buff {

namespace {

const ::google::protobuf::Descriptor* UserLoginMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserLoginMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserLoginMsg_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserLoginMsg_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserLoginMsg_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserLoginMsg_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserListMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserListMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserListMsg_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserListMsg_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserListMsg_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserListMsg_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* DevStateMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DevStateMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* DevStateMsg_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DevStateMsg_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* DevStateMsg_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DevStateMsg_Response_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_msgbody_2eproto() {
  protobuf_AddDesc_msgbody_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "msgbody.proto");
  GOOGLE_CHECK(file != NULL);
  UserLoginMsg_descriptor_ = file->message_type(0);
  static const int UserLoginMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginMsg, request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginMsg, response_),
  };
  UserLoginMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserLoginMsg_descriptor_,
      UserLoginMsg::default_instance_,
      UserLoginMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserLoginMsg));
  UserLoginMsg_Request_descriptor_ = UserLoginMsg_descriptor_->nested_type(0);
  static const int UserLoginMsg_Request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginMsg_Request, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginMsg_Request, userpwd_),
  };
  UserLoginMsg_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserLoginMsg_Request_descriptor_,
      UserLoginMsg_Request::default_instance_,
      UserLoginMsg_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginMsg_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginMsg_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserLoginMsg_Request));
  UserLoginMsg_Response_descriptor_ = UserLoginMsg_descriptor_->nested_type(1);
  static const int UserLoginMsg_Response_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginMsg_Response, rescode_),
  };
  UserLoginMsg_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserLoginMsg_Response_descriptor_,
      UserLoginMsg_Response::default_instance_,
      UserLoginMsg_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginMsg_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginMsg_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserLoginMsg_Response));
  UserListMsg_descriptor_ = file->message_type(1);
  static const int UserListMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserListMsg, request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserListMsg, response_),
  };
  UserListMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserListMsg_descriptor_,
      UserListMsg::default_instance_,
      UserListMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserListMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserListMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserListMsg));
  UserListMsg_Request_descriptor_ = UserListMsg_descriptor_->nested_type(0);
  static const int UserListMsg_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserListMsg_Request, reqdate_),
  };
  UserListMsg_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserListMsg_Request_descriptor_,
      UserListMsg_Request::default_instance_,
      UserListMsg_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserListMsg_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserListMsg_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserListMsg_Request));
  UserListMsg_Response_descriptor_ = UserListMsg_descriptor_->nested_type(1);
  static const int UserListMsg_Response_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserListMsg_Response, rescode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserListMsg_Response, userlist_),
  };
  UserListMsg_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserListMsg_Response_descriptor_,
      UserListMsg_Response::default_instance_,
      UserListMsg_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserListMsg_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserListMsg_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserListMsg_Response));
  DevStateMsg_descriptor_ = file->message_type(2);
  static const int DevStateMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DevStateMsg, request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DevStateMsg, response_),
  };
  DevStateMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DevStateMsg_descriptor_,
      DevStateMsg::default_instance_,
      DevStateMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DevStateMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DevStateMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DevStateMsg));
  DevStateMsg_Request_descriptor_ = DevStateMsg_descriptor_->nested_type(0);
  static const int DevStateMsg_Request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DevStateMsg_Request, saveid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DevStateMsg_Request, stationid_),
  };
  DevStateMsg_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DevStateMsg_Request_descriptor_,
      DevStateMsg_Request::default_instance_,
      DevStateMsg_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DevStateMsg_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DevStateMsg_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DevStateMsg_Request));
  DevStateMsg_Response_descriptor_ = DevStateMsg_descriptor_->nested_type(1);
  static const int DevStateMsg_Response_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DevStateMsg_Response, rescode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DevStateMsg_Response, devstate_),
  };
  DevStateMsg_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DevStateMsg_Response_descriptor_,
      DevStateMsg_Response::default_instance_,
      DevStateMsg_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DevStateMsg_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DevStateMsg_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DevStateMsg_Response));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_msgbody_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserLoginMsg_descriptor_, &UserLoginMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserLoginMsg_Request_descriptor_, &UserLoginMsg_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserLoginMsg_Response_descriptor_, &UserLoginMsg_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserListMsg_descriptor_, &UserListMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserListMsg_Request_descriptor_, &UserListMsg_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserListMsg_Response_descriptor_, &UserListMsg_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DevStateMsg_descriptor_, &DevStateMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DevStateMsg_Request_descriptor_, &DevStateMsg_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DevStateMsg_Response_descriptor_, &DevStateMsg_Response::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_msgbody_2eproto() {
  delete UserLoginMsg::default_instance_;
  delete UserLoginMsg_reflection_;
  delete UserLoginMsg_Request::default_instance_;
  delete UserLoginMsg_Request_reflection_;
  delete UserLoginMsg_Response::default_instance_;
  delete UserLoginMsg_Response_reflection_;
  delete UserListMsg::default_instance_;
  delete UserListMsg_reflection_;
  delete UserListMsg_Request::default_instance_;
  delete UserListMsg_Request_reflection_;
  delete UserListMsg_Response::default_instance_;
  delete UserListMsg_Response_reflection_;
  delete DevStateMsg::default_instance_;
  delete DevStateMsg_reflection_;
  delete DevStateMsg_Request::default_instance_;
  delete DevStateMsg_Request_reflection_;
  delete DevStateMsg_Response::default_instance_;
  delete DevStateMsg_Response_reflection_;
}

void protobuf_AddDesc_msgbody_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::com::spplus::buff::protobuf_AddDesc_msgbean_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rmsgbody.proto\022\017com.spplus.buff\032\rmsgbea"
    "n.proto\"\313\001\n\014UserLoginMsg\0226\n\007request\030\001 \001("
    "\0132%.com.spplus.buff.UserLoginMsg.Request"
    "\0228\n\010response\030\002 \001(\0132&.com.spplus.buff.Use"
    "rLoginMsg.Response\032,\n\007Request\022\020\n\010usernam"
    "e\030\001 \001(\014\022\017\n\007userpwd\030\002 \001(\014\032\033\n\010Response\022\017\n\007"
    "rescode\030\001 \001(\r\"\343\001\n\013UserListMsg\0225\n\007request"
    "\030\001 \001(\0132$.com.spplus.buff.UserListMsg.Req"
    "uest\0227\n\010response\030\002 \001(\0132%.com.spplus.buff"
    ".UserListMsg.Response\032\032\n\007Request\022\017\n\007reqd"
    "ate\030\001 \001(\014\032H\n\010Response\022\017\n\007rescode\030\001 \001(\r\022+"
    "\n\010userlist\030\002 \003(\0132\031.com.spplus.buff.UserB"
    "ean\"\366\001\n\013DevStateMsg\0225\n\007request\030\001 \001(\0132$.c"
    "om.spplus.buff.DevStateMsg.Request\0227\n\010re"
    "sponse\030\002 \001(\0132%.com.spplus.buff.DevStateM"
    "sg.Response\032,\n\007Request\022\016\n\006saveId\030\001 \001(\r\022\021"
    "\n\tstationId\030\002 \001(\r\032I\n\010Response\022\017\n\007rescode"
    "\030\001 \001(\r\022,\n\010devState\030\002 \003(\0132\032.com.spplus.bu"
    "ff.StateBean", 732);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "msgbody.proto", &protobuf_RegisterTypes);
  UserLoginMsg::default_instance_ = new UserLoginMsg();
  UserLoginMsg_Request::default_instance_ = new UserLoginMsg_Request();
  UserLoginMsg_Response::default_instance_ = new UserLoginMsg_Response();
  UserListMsg::default_instance_ = new UserListMsg();
  UserListMsg_Request::default_instance_ = new UserListMsg_Request();
  UserListMsg_Response::default_instance_ = new UserListMsg_Response();
  DevStateMsg::default_instance_ = new DevStateMsg();
  DevStateMsg_Request::default_instance_ = new DevStateMsg_Request();
  DevStateMsg_Response::default_instance_ = new DevStateMsg_Response();
  UserLoginMsg::default_instance_->InitAsDefaultInstance();
  UserLoginMsg_Request::default_instance_->InitAsDefaultInstance();
  UserLoginMsg_Response::default_instance_->InitAsDefaultInstance();
  UserListMsg::default_instance_->InitAsDefaultInstance();
  UserListMsg_Request::default_instance_->InitAsDefaultInstance();
  UserListMsg_Response::default_instance_->InitAsDefaultInstance();
  DevStateMsg::default_instance_->InitAsDefaultInstance();
  DevStateMsg_Request::default_instance_->InitAsDefaultInstance();
  DevStateMsg_Response::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_msgbody_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_msgbody_2eproto {
  StaticDescriptorInitializer_msgbody_2eproto() {
    protobuf_AddDesc_msgbody_2eproto();
  }
} static_descriptor_initializer_msgbody_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int UserLoginMsg_Request::kUsernameFieldNumber;
const int UserLoginMsg_Request::kUserpwdFieldNumber;
#endif  // !_MSC_VER

UserLoginMsg_Request::UserLoginMsg_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserLoginMsg_Request::InitAsDefaultInstance() {
}

UserLoginMsg_Request::UserLoginMsg_Request(const UserLoginMsg_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserLoginMsg_Request::SharedCtor() {
  _cached_size_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userpwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserLoginMsg_Request::~UserLoginMsg_Request() {
  SharedDtor();
}

void UserLoginMsg_Request::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (userpwd_ != &::google::protobuf::internal::kEmptyString) {
    delete userpwd_;
  }
  if (this != default_instance_) {
  }
}

void UserLoginMsg_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserLoginMsg_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserLoginMsg_Request_descriptor_;
}

const UserLoginMsg_Request& UserLoginMsg_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

UserLoginMsg_Request* UserLoginMsg_Request::default_instance_ = NULL;

UserLoginMsg_Request* UserLoginMsg_Request::New() const {
  return new UserLoginMsg_Request;
}

void UserLoginMsg_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    if (has_userpwd()) {
      if (userpwd_ != &::google::protobuf::internal::kEmptyString) {
        userpwd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserLoginMsg_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes username = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_username()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_userpwd;
        break;
      }

      // optional bytes userpwd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userpwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_userpwd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserLoginMsg_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->username(), output);
  }

  // optional bytes userpwd = 2;
  if (has_userpwd()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->userpwd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserLoginMsg_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes username = 1;
  if (has_username()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->username(), target);
  }

  // optional bytes userpwd = 2;
  if (has_userpwd()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->userpwd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserLoginMsg_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes username = 1;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->username());
    }

    // optional bytes userpwd = 2;
    if (has_userpwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->userpwd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserLoginMsg_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserLoginMsg_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserLoginMsg_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserLoginMsg_Request::MergeFrom(const UserLoginMsg_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_userpwd()) {
      set_userpwd(from.userpwd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserLoginMsg_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserLoginMsg_Request::CopyFrom(const UserLoginMsg_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserLoginMsg_Request::IsInitialized() const {

  return true;
}

void UserLoginMsg_Request::Swap(UserLoginMsg_Request* other) {
  if (other != this) {
    std::swap(username_, other->username_);
    std::swap(userpwd_, other->userpwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserLoginMsg_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserLoginMsg_Request_descriptor_;
  metadata.reflection = UserLoginMsg_Request_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int UserLoginMsg_Response::kRescodeFieldNumber;
#endif  // !_MSC_VER

UserLoginMsg_Response::UserLoginMsg_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserLoginMsg_Response::InitAsDefaultInstance() {
}

UserLoginMsg_Response::UserLoginMsg_Response(const UserLoginMsg_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserLoginMsg_Response::SharedCtor() {
  _cached_size_ = 0;
  rescode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserLoginMsg_Response::~UserLoginMsg_Response() {
  SharedDtor();
}

void UserLoginMsg_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserLoginMsg_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserLoginMsg_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserLoginMsg_Response_descriptor_;
}

const UserLoginMsg_Response& UserLoginMsg_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

UserLoginMsg_Response* UserLoginMsg_Response::default_instance_ = NULL;

UserLoginMsg_Response* UserLoginMsg_Response::New() const {
  return new UserLoginMsg_Response;
}

void UserLoginMsg_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rescode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserLoginMsg_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 rescode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rescode_)));
          set_has_rescode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserLoginMsg_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 rescode = 1;
  if (has_rescode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rescode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserLoginMsg_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 rescode = 1;
  if (has_rescode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rescode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserLoginMsg_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 rescode = 1;
    if (has_rescode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rescode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserLoginMsg_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserLoginMsg_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserLoginMsg_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserLoginMsg_Response::MergeFrom(const UserLoginMsg_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rescode()) {
      set_rescode(from.rescode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserLoginMsg_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserLoginMsg_Response::CopyFrom(const UserLoginMsg_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserLoginMsg_Response::IsInitialized() const {

  return true;
}

void UserLoginMsg_Response::Swap(UserLoginMsg_Response* other) {
  if (other != this) {
    std::swap(rescode_, other->rescode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserLoginMsg_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserLoginMsg_Response_descriptor_;
  metadata.reflection = UserLoginMsg_Response_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int UserLoginMsg::kRequestFieldNumber;
const int UserLoginMsg::kResponseFieldNumber;
#endif  // !_MSC_VER

UserLoginMsg::UserLoginMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserLoginMsg::InitAsDefaultInstance() {
  request_ = const_cast< ::com::spplus::buff::UserLoginMsg_Request*>(&::com::spplus::buff::UserLoginMsg_Request::default_instance());
  response_ = const_cast< ::com::spplus::buff::UserLoginMsg_Response*>(&::com::spplus::buff::UserLoginMsg_Response::default_instance());
}

UserLoginMsg::UserLoginMsg(const UserLoginMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserLoginMsg::SharedCtor() {
  _cached_size_ = 0;
  request_ = NULL;
  response_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserLoginMsg::~UserLoginMsg() {
  SharedDtor();
}

void UserLoginMsg::SharedDtor() {
  if (this != default_instance_) {
    delete request_;
    delete response_;
  }
}

void UserLoginMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserLoginMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserLoginMsg_descriptor_;
}

const UserLoginMsg& UserLoginMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

UserLoginMsg* UserLoginMsg::default_instance_ = NULL;

UserLoginMsg* UserLoginMsg::New() const {
  return new UserLoginMsg;
}

void UserLoginMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_request()) {
      if (request_ != NULL) request_->::com::spplus::buff::UserLoginMsg_Request::Clear();
    }
    if (has_response()) {
      if (response_ != NULL) response_->::com::spplus::buff::UserLoginMsg_Response::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserLoginMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.spplus.buff.UserLoginMsg.Request request = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_response;
        break;
      }

      // optional .com.spplus.buff.UserLoginMsg.Response response = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserLoginMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.spplus.buff.UserLoginMsg.Request request = 1;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->request(), output);
  }

  // optional .com.spplus.buff.UserLoginMsg.Response response = 2;
  if (has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->response(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserLoginMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.spplus.buff.UserLoginMsg.Request request = 1;
  if (has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->request(), target);
  }

  // optional .com.spplus.buff.UserLoginMsg.Response response = 2;
  if (has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->response(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserLoginMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.spplus.buff.UserLoginMsg.Request request = 1;
    if (has_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->request());
    }

    // optional .com.spplus.buff.UserLoginMsg.Response response = 2;
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->response());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserLoginMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserLoginMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserLoginMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserLoginMsg::MergeFrom(const UserLoginMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request()) {
      mutable_request()->::com::spplus::buff::UserLoginMsg_Request::MergeFrom(from.request());
    }
    if (from.has_response()) {
      mutable_response()->::com::spplus::buff::UserLoginMsg_Response::MergeFrom(from.response());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserLoginMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserLoginMsg::CopyFrom(const UserLoginMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserLoginMsg::IsInitialized() const {

  return true;
}

void UserLoginMsg::Swap(UserLoginMsg* other) {
  if (other != this) {
    std::swap(request_, other->request_);
    std::swap(response_, other->response_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserLoginMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserLoginMsg_descriptor_;
  metadata.reflection = UserLoginMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserListMsg_Request::kReqdateFieldNumber;
#endif  // !_MSC_VER

UserListMsg_Request::UserListMsg_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserListMsg_Request::InitAsDefaultInstance() {
}

UserListMsg_Request::UserListMsg_Request(const UserListMsg_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserListMsg_Request::SharedCtor() {
  _cached_size_ = 0;
  reqdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserListMsg_Request::~UserListMsg_Request() {
  SharedDtor();
}

void UserListMsg_Request::SharedDtor() {
  if (reqdate_ != &::google::protobuf::internal::kEmptyString) {
    delete reqdate_;
  }
  if (this != default_instance_) {
  }
}

void UserListMsg_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserListMsg_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserListMsg_Request_descriptor_;
}

const UserListMsg_Request& UserListMsg_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

UserListMsg_Request* UserListMsg_Request::default_instance_ = NULL;

UserListMsg_Request* UserListMsg_Request::New() const {
  return new UserListMsg_Request;
}

void UserListMsg_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_reqdate()) {
      if (reqdate_ != &::google::protobuf::internal::kEmptyString) {
        reqdate_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserListMsg_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes reqdate = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_reqdate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserListMsg_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes reqdate = 1;
  if (has_reqdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->reqdate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserListMsg_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes reqdate = 1;
  if (has_reqdate()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->reqdate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserListMsg_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes reqdate = 1;
    if (has_reqdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->reqdate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserListMsg_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserListMsg_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserListMsg_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserListMsg_Request::MergeFrom(const UserListMsg_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reqdate()) {
      set_reqdate(from.reqdate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserListMsg_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserListMsg_Request::CopyFrom(const UserListMsg_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserListMsg_Request::IsInitialized() const {

  return true;
}

void UserListMsg_Request::Swap(UserListMsg_Request* other) {
  if (other != this) {
    std::swap(reqdate_, other->reqdate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserListMsg_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserListMsg_Request_descriptor_;
  metadata.reflection = UserListMsg_Request_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int UserListMsg_Response::kRescodeFieldNumber;
const int UserListMsg_Response::kUserlistFieldNumber;
#endif  // !_MSC_VER

UserListMsg_Response::UserListMsg_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserListMsg_Response::InitAsDefaultInstance() {
}

UserListMsg_Response::UserListMsg_Response(const UserListMsg_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserListMsg_Response::SharedCtor() {
  _cached_size_ = 0;
  rescode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserListMsg_Response::~UserListMsg_Response() {
  SharedDtor();
}

void UserListMsg_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserListMsg_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserListMsg_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserListMsg_Response_descriptor_;
}

const UserListMsg_Response& UserListMsg_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

UserListMsg_Response* UserListMsg_Response::default_instance_ = NULL;

UserListMsg_Response* UserListMsg_Response::New() const {
  return new UserListMsg_Response;
}

void UserListMsg_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rescode_ = 0u;
  }
  userlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserListMsg_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 rescode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rescode_)));
          set_has_rescode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_userlist;
        break;
      }

      // repeated .com.spplus.buff.UserBean userlist = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_userlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_userlist;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserListMsg_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 rescode = 1;
  if (has_rescode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rescode(), output);
  }

  // repeated .com.spplus.buff.UserBean userlist = 2;
  for (int i = 0; i < this->userlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->userlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserListMsg_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 rescode = 1;
  if (has_rescode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rescode(), target);
  }

  // repeated .com.spplus.buff.UserBean userlist = 2;
  for (int i = 0; i < this->userlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->userlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserListMsg_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 rescode = 1;
    if (has_rescode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rescode());
    }

  }
  // repeated .com.spplus.buff.UserBean userlist = 2;
  total_size += 1 * this->userlist_size();
  for (int i = 0; i < this->userlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserListMsg_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserListMsg_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserListMsg_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserListMsg_Response::MergeFrom(const UserListMsg_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  userlist_.MergeFrom(from.userlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rescode()) {
      set_rescode(from.rescode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserListMsg_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserListMsg_Response::CopyFrom(const UserListMsg_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserListMsg_Response::IsInitialized() const {

  return true;
}

void UserListMsg_Response::Swap(UserListMsg_Response* other) {
  if (other != this) {
    std::swap(rescode_, other->rescode_);
    userlist_.Swap(&other->userlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserListMsg_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserListMsg_Response_descriptor_;
  metadata.reflection = UserListMsg_Response_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int UserListMsg::kRequestFieldNumber;
const int UserListMsg::kResponseFieldNumber;
#endif  // !_MSC_VER

UserListMsg::UserListMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserListMsg::InitAsDefaultInstance() {
  request_ = const_cast< ::com::spplus::buff::UserListMsg_Request*>(&::com::spplus::buff::UserListMsg_Request::default_instance());
  response_ = const_cast< ::com::spplus::buff::UserListMsg_Response*>(&::com::spplus::buff::UserListMsg_Response::default_instance());
}

UserListMsg::UserListMsg(const UserListMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserListMsg::SharedCtor() {
  _cached_size_ = 0;
  request_ = NULL;
  response_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserListMsg::~UserListMsg() {
  SharedDtor();
}

void UserListMsg::SharedDtor() {
  if (this != default_instance_) {
    delete request_;
    delete response_;
  }
}

void UserListMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserListMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserListMsg_descriptor_;
}

const UserListMsg& UserListMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

UserListMsg* UserListMsg::default_instance_ = NULL;

UserListMsg* UserListMsg::New() const {
  return new UserListMsg;
}

void UserListMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_request()) {
      if (request_ != NULL) request_->::com::spplus::buff::UserListMsg_Request::Clear();
    }
    if (has_response()) {
      if (response_ != NULL) response_->::com::spplus::buff::UserListMsg_Response::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserListMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.spplus.buff.UserListMsg.Request request = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_response;
        break;
      }

      // optional .com.spplus.buff.UserListMsg.Response response = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserListMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.spplus.buff.UserListMsg.Request request = 1;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->request(), output);
  }

  // optional .com.spplus.buff.UserListMsg.Response response = 2;
  if (has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->response(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserListMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.spplus.buff.UserListMsg.Request request = 1;
  if (has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->request(), target);
  }

  // optional .com.spplus.buff.UserListMsg.Response response = 2;
  if (has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->response(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserListMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.spplus.buff.UserListMsg.Request request = 1;
    if (has_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->request());
    }

    // optional .com.spplus.buff.UserListMsg.Response response = 2;
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->response());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserListMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserListMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserListMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserListMsg::MergeFrom(const UserListMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request()) {
      mutable_request()->::com::spplus::buff::UserListMsg_Request::MergeFrom(from.request());
    }
    if (from.has_response()) {
      mutable_response()->::com::spplus::buff::UserListMsg_Response::MergeFrom(from.response());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserListMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserListMsg::CopyFrom(const UserListMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserListMsg::IsInitialized() const {

  return true;
}

void UserListMsg::Swap(UserListMsg* other) {
  if (other != this) {
    std::swap(request_, other->request_);
    std::swap(response_, other->response_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserListMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserListMsg_descriptor_;
  metadata.reflection = UserListMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DevStateMsg_Request::kSaveIdFieldNumber;
const int DevStateMsg_Request::kStationIdFieldNumber;
#endif  // !_MSC_VER

DevStateMsg_Request::DevStateMsg_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DevStateMsg_Request::InitAsDefaultInstance() {
}

DevStateMsg_Request::DevStateMsg_Request(const DevStateMsg_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DevStateMsg_Request::SharedCtor() {
  _cached_size_ = 0;
  saveid_ = 0u;
  stationid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DevStateMsg_Request::~DevStateMsg_Request() {
  SharedDtor();
}

void DevStateMsg_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DevStateMsg_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DevStateMsg_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DevStateMsg_Request_descriptor_;
}

const DevStateMsg_Request& DevStateMsg_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

DevStateMsg_Request* DevStateMsg_Request::default_instance_ = NULL;

DevStateMsg_Request* DevStateMsg_Request::New() const {
  return new DevStateMsg_Request;
}

void DevStateMsg_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    saveid_ = 0u;
    stationid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DevStateMsg_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 saveId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &saveid_)));
          set_has_saveid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_stationId;
        break;
      }

      // optional uint32 stationId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stationId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stationid_)));
          set_has_stationid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DevStateMsg_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 saveId = 1;
  if (has_saveid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->saveid(), output);
  }

  // optional uint32 stationId = 2;
  if (has_stationid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->stationid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DevStateMsg_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 saveId = 1;
  if (has_saveid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->saveid(), target);
  }

  // optional uint32 stationId = 2;
  if (has_stationid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->stationid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DevStateMsg_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 saveId = 1;
    if (has_saveid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->saveid());
    }

    // optional uint32 stationId = 2;
    if (has_stationid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stationid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DevStateMsg_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DevStateMsg_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DevStateMsg_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DevStateMsg_Request::MergeFrom(const DevStateMsg_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_saveid()) {
      set_saveid(from.saveid());
    }
    if (from.has_stationid()) {
      set_stationid(from.stationid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DevStateMsg_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DevStateMsg_Request::CopyFrom(const DevStateMsg_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DevStateMsg_Request::IsInitialized() const {

  return true;
}

void DevStateMsg_Request::Swap(DevStateMsg_Request* other) {
  if (other != this) {
    std::swap(saveid_, other->saveid_);
    std::swap(stationid_, other->stationid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DevStateMsg_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DevStateMsg_Request_descriptor_;
  metadata.reflection = DevStateMsg_Request_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int DevStateMsg_Response::kRescodeFieldNumber;
const int DevStateMsg_Response::kDevStateFieldNumber;
#endif  // !_MSC_VER

DevStateMsg_Response::DevStateMsg_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DevStateMsg_Response::InitAsDefaultInstance() {
}

DevStateMsg_Response::DevStateMsg_Response(const DevStateMsg_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DevStateMsg_Response::SharedCtor() {
  _cached_size_ = 0;
  rescode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DevStateMsg_Response::~DevStateMsg_Response() {
  SharedDtor();
}

void DevStateMsg_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DevStateMsg_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DevStateMsg_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DevStateMsg_Response_descriptor_;
}

const DevStateMsg_Response& DevStateMsg_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

DevStateMsg_Response* DevStateMsg_Response::default_instance_ = NULL;

DevStateMsg_Response* DevStateMsg_Response::New() const {
  return new DevStateMsg_Response;
}

void DevStateMsg_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rescode_ = 0u;
  }
  devstate_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DevStateMsg_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 rescode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rescode_)));
          set_has_rescode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_devState;
        break;
      }

      // repeated .com.spplus.buff.StateBean devState = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_devState:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_devstate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_devState;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DevStateMsg_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 rescode = 1;
  if (has_rescode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rescode(), output);
  }

  // repeated .com.spplus.buff.StateBean devState = 2;
  for (int i = 0; i < this->devstate_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->devstate(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DevStateMsg_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 rescode = 1;
  if (has_rescode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rescode(), target);
  }

  // repeated .com.spplus.buff.StateBean devState = 2;
  for (int i = 0; i < this->devstate_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->devstate(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DevStateMsg_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 rescode = 1;
    if (has_rescode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rescode());
    }

  }
  // repeated .com.spplus.buff.StateBean devState = 2;
  total_size += 1 * this->devstate_size();
  for (int i = 0; i < this->devstate_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->devstate(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DevStateMsg_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DevStateMsg_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DevStateMsg_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DevStateMsg_Response::MergeFrom(const DevStateMsg_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  devstate_.MergeFrom(from.devstate_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rescode()) {
      set_rescode(from.rescode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DevStateMsg_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DevStateMsg_Response::CopyFrom(const DevStateMsg_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DevStateMsg_Response::IsInitialized() const {

  return true;
}

void DevStateMsg_Response::Swap(DevStateMsg_Response* other) {
  if (other != this) {
    std::swap(rescode_, other->rescode_);
    devstate_.Swap(&other->devstate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DevStateMsg_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DevStateMsg_Response_descriptor_;
  metadata.reflection = DevStateMsg_Response_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int DevStateMsg::kRequestFieldNumber;
const int DevStateMsg::kResponseFieldNumber;
#endif  // !_MSC_VER

DevStateMsg::DevStateMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DevStateMsg::InitAsDefaultInstance() {
  request_ = const_cast< ::com::spplus::buff::DevStateMsg_Request*>(&::com::spplus::buff::DevStateMsg_Request::default_instance());
  response_ = const_cast< ::com::spplus::buff::DevStateMsg_Response*>(&::com::spplus::buff::DevStateMsg_Response::default_instance());
}

DevStateMsg::DevStateMsg(const DevStateMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DevStateMsg::SharedCtor() {
  _cached_size_ = 0;
  request_ = NULL;
  response_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DevStateMsg::~DevStateMsg() {
  SharedDtor();
}

void DevStateMsg::SharedDtor() {
  if (this != default_instance_) {
    delete request_;
    delete response_;
  }
}

void DevStateMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DevStateMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DevStateMsg_descriptor_;
}

const DevStateMsg& DevStateMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

DevStateMsg* DevStateMsg::default_instance_ = NULL;

DevStateMsg* DevStateMsg::New() const {
  return new DevStateMsg;
}

void DevStateMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_request()) {
      if (request_ != NULL) request_->::com::spplus::buff::DevStateMsg_Request::Clear();
    }
    if (has_response()) {
      if (response_ != NULL) response_->::com::spplus::buff::DevStateMsg_Response::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DevStateMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.spplus.buff.DevStateMsg.Request request = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_response;
        break;
      }

      // optional .com.spplus.buff.DevStateMsg.Response response = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DevStateMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.spplus.buff.DevStateMsg.Request request = 1;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->request(), output);
  }

  // optional .com.spplus.buff.DevStateMsg.Response response = 2;
  if (has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->response(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DevStateMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.spplus.buff.DevStateMsg.Request request = 1;
  if (has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->request(), target);
  }

  // optional .com.spplus.buff.DevStateMsg.Response response = 2;
  if (has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->response(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DevStateMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.spplus.buff.DevStateMsg.Request request = 1;
    if (has_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->request());
    }

    // optional .com.spplus.buff.DevStateMsg.Response response = 2;
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->response());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DevStateMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DevStateMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DevStateMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DevStateMsg::MergeFrom(const DevStateMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request()) {
      mutable_request()->::com::spplus::buff::DevStateMsg_Request::MergeFrom(from.request());
    }
    if (from.has_response()) {
      mutable_response()->::com::spplus::buff::DevStateMsg_Response::MergeFrom(from.response());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DevStateMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DevStateMsg::CopyFrom(const DevStateMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DevStateMsg::IsInitialized() const {

  return true;
}

void DevStateMsg::Swap(DevStateMsg* other) {
  if (other != this) {
    std::swap(request_, other->request_);
    std::swap(response_, other->response_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DevStateMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DevStateMsg_descriptor_;
  metadata.reflection = DevStateMsg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace buff
}  // namespace spplus
}  // namespace com

// @@protoc_insertion_point(global_scope)
