// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msgbody.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "msgbody.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace spplus {
namespace buff {

namespace {

const ::google::protobuf::Descriptor* UserLoginMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserLoginMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserLoginMsg_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserLoginMsg_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserLoginMsg_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserLoginMsg_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserListMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserListMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserListMsg_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserListMsg_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserListMsg_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserListMsg_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserRoleListMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserRoleListMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserRoleListMsg_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserRoleListMsg_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserRoleListMsg_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserRoleListMsg_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserMgrMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserMgrMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserMgrMsg_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserMgrMsg_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserMgrMsg_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserMgrMsg_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* StationTypeMgrMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StationTypeMgrMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* StationTypeMgrMsg_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StationTypeMgrMsg_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* StationTypeMgrMsg_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StationTypeMgrMsg_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* StationMgrMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StationMgrMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* StationMgrMsg_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StationMgrMsg_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* StationMgrMsg_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StationMgrMsg_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* RuleListMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RuleListMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* RuleListMsg_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RuleListMsg_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* RuleListMsg_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RuleListMsg_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* RuleMgrMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RuleMgrMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* RuleMgrMsg_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RuleMgrMsg_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* RuleMgrMsg_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RuleMgrMsg_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* StationRuleListMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StationRuleListMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* StationRuleListMsg_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StationRuleListMsg_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* StationRuleListMsg_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StationRuleListMsg_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* StationRuleMgrMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StationRuleMgrMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* StationRuleMgrMsg_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StationRuleMgrMsg_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* StationRuleMgrMsg_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StationRuleMgrMsg_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* CircleListMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CircleListMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* CircleListMsg_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CircleListMsg_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* CircleListMsg_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CircleListMsg_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* SignListMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SignListMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* SignListMsg_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SignListMsg_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* SignListMsg_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SignListMsg_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* GswitchListMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GswitchListMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* GswitchListMsg_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GswitchListMsg_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GswitchListMsg_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GswitchListMsg_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsetListMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsetListMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsetListMsg_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsetListMsg_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsetListMsg_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsetListMsg_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* EventListMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EventListMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* EventListMsg_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EventListMsg_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* EventListMsg_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EventListMsg_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* DevStateMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DevStateMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* DevStateMsg_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DevStateMsg_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* DevStateMsg_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DevStateMsg_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* StationTypeMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StationTypeMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* StationTypeMsg_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StationTypeMsg_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* StationTypeMsg_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StationTypeMsg_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* StationListMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StationListMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* StationListMsg_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StationListMsg_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* StationListMsg_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StationListMsg_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* TagMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TagMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* TagMsg_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TagMsg_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* TagMsg_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TagMsg_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* OprationMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OprationMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* OprationMsg_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OprationMsg_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* OprationMsg_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OprationMsg_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* PowerSetMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PowerSetMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* PowerSetMsg_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PowerSetMsg_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* PowerSetMsg_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PowerSetMsg_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* LineSetMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LineSetMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* LineSetMsg_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LineSetMsg_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* LineSetMsg_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LineSetMsg_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* SavingListMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SavingListMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* SavingListMsg_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SavingListMsg_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* SavingListMsg_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SavingListMsg_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* WriteSavingMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WriteSavingMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* WriteSavingMsg_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WriteSavingMsg_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* WriteSavingMsg_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WriteSavingMsg_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* TicketMsionListMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TicketMsionListMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* TicketMsionListMsg_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TicketMsionListMsg_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* TicketMsionListMsg_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TicketMsionListMsg_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* TicketMgrMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TicketMgrMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* TicketMgrMsg_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TicketMgrMsg_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* TicketMgrMsg_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TicketMgrMsg_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* TicketListMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TicketListMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* TicketListMsg_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TicketListMsg_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* TicketListMsg_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TicketListMsg_Response_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_msgbody_2eproto() {
  protobuf_AddDesc_msgbody_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "msgbody.proto");
  GOOGLE_CHECK(file != NULL);
  UserLoginMsg_descriptor_ = file->message_type(0);
  static const int UserLoginMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginMsg, request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginMsg, response_),
  };
  UserLoginMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserLoginMsg_descriptor_,
      UserLoginMsg::default_instance_,
      UserLoginMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserLoginMsg));
  UserLoginMsg_Request_descriptor_ = UserLoginMsg_descriptor_->nested_type(0);
  static const int UserLoginMsg_Request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginMsg_Request, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginMsg_Request, userpwd_),
  };
  UserLoginMsg_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserLoginMsg_Request_descriptor_,
      UserLoginMsg_Request::default_instance_,
      UserLoginMsg_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginMsg_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginMsg_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserLoginMsg_Request));
  UserLoginMsg_Response_descriptor_ = UserLoginMsg_descriptor_->nested_type(1);
  static const int UserLoginMsg_Response_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginMsg_Response, rescode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginMsg_Response, userlist_),
  };
  UserLoginMsg_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserLoginMsg_Response_descriptor_,
      UserLoginMsg_Response::default_instance_,
      UserLoginMsg_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginMsg_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginMsg_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserLoginMsg_Response));
  UserListMsg_descriptor_ = file->message_type(1);
  static const int UserListMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserListMsg, request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserListMsg, response_),
  };
  UserListMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserListMsg_descriptor_,
      UserListMsg::default_instance_,
      UserListMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserListMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserListMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserListMsg));
  UserListMsg_Request_descriptor_ = UserListMsg_descriptor_->nested_type(0);
  static const int UserListMsg_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserListMsg_Request, reqdate_),
  };
  UserListMsg_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserListMsg_Request_descriptor_,
      UserListMsg_Request::default_instance_,
      UserListMsg_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserListMsg_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserListMsg_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserListMsg_Request));
  UserListMsg_Response_descriptor_ = UserListMsg_descriptor_->nested_type(1);
  static const int UserListMsg_Response_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserListMsg_Response, rescode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserListMsg_Response, userlist_),
  };
  UserListMsg_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserListMsg_Response_descriptor_,
      UserListMsg_Response::default_instance_,
      UserListMsg_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserListMsg_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserListMsg_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserListMsg_Response));
  UserRoleListMsg_descriptor_ = file->message_type(2);
  static const int UserRoleListMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRoleListMsg, request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRoleListMsg, response_),
  };
  UserRoleListMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserRoleListMsg_descriptor_,
      UserRoleListMsg::default_instance_,
      UserRoleListMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRoleListMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRoleListMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserRoleListMsg));
  UserRoleListMsg_Request_descriptor_ = UserRoleListMsg_descriptor_->nested_type(0);
  static const int UserRoleListMsg_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRoleListMsg_Request, reqdate_),
  };
  UserRoleListMsg_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserRoleListMsg_Request_descriptor_,
      UserRoleListMsg_Request::default_instance_,
      UserRoleListMsg_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRoleListMsg_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRoleListMsg_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserRoleListMsg_Request));
  UserRoleListMsg_Response_descriptor_ = UserRoleListMsg_descriptor_->nested_type(1);
  static const int UserRoleListMsg_Response_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRoleListMsg_Response, rescode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRoleListMsg_Response, userrolelist_),
  };
  UserRoleListMsg_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserRoleListMsg_Response_descriptor_,
      UserRoleListMsg_Response::default_instance_,
      UserRoleListMsg_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRoleListMsg_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRoleListMsg_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserRoleListMsg_Response));
  UserMgrMsg_descriptor_ = file->message_type(3);
  static const int UserMgrMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMgrMsg, request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMgrMsg, response_),
  };
  UserMgrMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserMgrMsg_descriptor_,
      UserMgrMsg::default_instance_,
      UserMgrMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMgrMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMgrMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserMgrMsg));
  UserMgrMsg_Request_descriptor_ = UserMgrMsg_descriptor_->nested_type(0);
  static const int UserMgrMsg_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMgrMsg_Request, mgrsql_),
  };
  UserMgrMsg_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserMgrMsg_Request_descriptor_,
      UserMgrMsg_Request::default_instance_,
      UserMgrMsg_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMgrMsg_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMgrMsg_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserMgrMsg_Request));
  UserMgrMsg_Response_descriptor_ = UserMgrMsg_descriptor_->nested_type(1);
  static const int UserMgrMsg_Response_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMgrMsg_Response, rescode_),
  };
  UserMgrMsg_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserMgrMsg_Response_descriptor_,
      UserMgrMsg_Response::default_instance_,
      UserMgrMsg_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMgrMsg_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMgrMsg_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserMgrMsg_Response));
  StationTypeMgrMsg_descriptor_ = file->message_type(4);
  static const int StationTypeMgrMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationTypeMgrMsg, request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationTypeMgrMsg, response_),
  };
  StationTypeMgrMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StationTypeMgrMsg_descriptor_,
      StationTypeMgrMsg::default_instance_,
      StationTypeMgrMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationTypeMgrMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationTypeMgrMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StationTypeMgrMsg));
  StationTypeMgrMsg_Request_descriptor_ = StationTypeMgrMsg_descriptor_->nested_type(0);
  static const int StationTypeMgrMsg_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationTypeMgrMsg_Request, mgrsql_),
  };
  StationTypeMgrMsg_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StationTypeMgrMsg_Request_descriptor_,
      StationTypeMgrMsg_Request::default_instance_,
      StationTypeMgrMsg_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationTypeMgrMsg_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationTypeMgrMsg_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StationTypeMgrMsg_Request));
  StationTypeMgrMsg_Response_descriptor_ = StationTypeMgrMsg_descriptor_->nested_type(1);
  static const int StationTypeMgrMsg_Response_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationTypeMgrMsg_Response, rescode_),
  };
  StationTypeMgrMsg_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StationTypeMgrMsg_Response_descriptor_,
      StationTypeMgrMsg_Response::default_instance_,
      StationTypeMgrMsg_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationTypeMgrMsg_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationTypeMgrMsg_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StationTypeMgrMsg_Response));
  StationMgrMsg_descriptor_ = file->message_type(5);
  static const int StationMgrMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationMgrMsg, request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationMgrMsg, response_),
  };
  StationMgrMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StationMgrMsg_descriptor_,
      StationMgrMsg::default_instance_,
      StationMgrMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationMgrMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationMgrMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StationMgrMsg));
  StationMgrMsg_Request_descriptor_ = StationMgrMsg_descriptor_->nested_type(0);
  static const int StationMgrMsg_Request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationMgrMsg_Request, reqdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationMgrMsg_Request, stationlist_),
  };
  StationMgrMsg_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StationMgrMsg_Request_descriptor_,
      StationMgrMsg_Request::default_instance_,
      StationMgrMsg_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationMgrMsg_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationMgrMsg_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StationMgrMsg_Request));
  StationMgrMsg_Response_descriptor_ = StationMgrMsg_descriptor_->nested_type(1);
  static const int StationMgrMsg_Response_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationMgrMsg_Response, rescode_),
  };
  StationMgrMsg_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StationMgrMsg_Response_descriptor_,
      StationMgrMsg_Response::default_instance_,
      StationMgrMsg_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationMgrMsg_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationMgrMsg_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StationMgrMsg_Response));
  RuleListMsg_descriptor_ = file->message_type(6);
  static const int RuleListMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuleListMsg, request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuleListMsg, response_),
  };
  RuleListMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RuleListMsg_descriptor_,
      RuleListMsg::default_instance_,
      RuleListMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuleListMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuleListMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RuleListMsg));
  RuleListMsg_Request_descriptor_ = RuleListMsg_descriptor_->nested_type(0);
  static const int RuleListMsg_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuleListMsg_Request, reqdate_),
  };
  RuleListMsg_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RuleListMsg_Request_descriptor_,
      RuleListMsg_Request::default_instance_,
      RuleListMsg_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuleListMsg_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuleListMsg_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RuleListMsg_Request));
  RuleListMsg_Response_descriptor_ = RuleListMsg_descriptor_->nested_type(1);
  static const int RuleListMsg_Response_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuleListMsg_Response, rescode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuleListMsg_Response, rulelist_),
  };
  RuleListMsg_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RuleListMsg_Response_descriptor_,
      RuleListMsg_Response::default_instance_,
      RuleListMsg_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuleListMsg_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuleListMsg_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RuleListMsg_Response));
  RuleMgrMsg_descriptor_ = file->message_type(7);
  static const int RuleMgrMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuleMgrMsg, request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuleMgrMsg, response_),
  };
  RuleMgrMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RuleMgrMsg_descriptor_,
      RuleMgrMsg::default_instance_,
      RuleMgrMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuleMgrMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuleMgrMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RuleMgrMsg));
  RuleMgrMsg_Request_descriptor_ = RuleMgrMsg_descriptor_->nested_type(0);
  static const int RuleMgrMsg_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuleMgrMsg_Request, mgrsql_),
  };
  RuleMgrMsg_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RuleMgrMsg_Request_descriptor_,
      RuleMgrMsg_Request::default_instance_,
      RuleMgrMsg_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuleMgrMsg_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuleMgrMsg_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RuleMgrMsg_Request));
  RuleMgrMsg_Response_descriptor_ = RuleMgrMsg_descriptor_->nested_type(1);
  static const int RuleMgrMsg_Response_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuleMgrMsg_Response, rescode_),
  };
  RuleMgrMsg_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RuleMgrMsg_Response_descriptor_,
      RuleMgrMsg_Response::default_instance_,
      RuleMgrMsg_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuleMgrMsg_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuleMgrMsg_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RuleMgrMsg_Response));
  StationRuleListMsg_descriptor_ = file->message_type(8);
  static const int StationRuleListMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationRuleListMsg, request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationRuleListMsg, response_),
  };
  StationRuleListMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StationRuleListMsg_descriptor_,
      StationRuleListMsg::default_instance_,
      StationRuleListMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationRuleListMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationRuleListMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StationRuleListMsg));
  StationRuleListMsg_Request_descriptor_ = StationRuleListMsg_descriptor_->nested_type(0);
  static const int StationRuleListMsg_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationRuleListMsg_Request, reqdate_),
  };
  StationRuleListMsg_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StationRuleListMsg_Request_descriptor_,
      StationRuleListMsg_Request::default_instance_,
      StationRuleListMsg_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationRuleListMsg_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationRuleListMsg_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StationRuleListMsg_Request));
  StationRuleListMsg_Response_descriptor_ = StationRuleListMsg_descriptor_->nested_type(1);
  static const int StationRuleListMsg_Response_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationRuleListMsg_Response, rescode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationRuleListMsg_Response, starulelist_),
  };
  StationRuleListMsg_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StationRuleListMsg_Response_descriptor_,
      StationRuleListMsg_Response::default_instance_,
      StationRuleListMsg_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationRuleListMsg_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationRuleListMsg_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StationRuleListMsg_Response));
  StationRuleMgrMsg_descriptor_ = file->message_type(9);
  static const int StationRuleMgrMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationRuleMgrMsg, request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationRuleMgrMsg, response_),
  };
  StationRuleMgrMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StationRuleMgrMsg_descriptor_,
      StationRuleMgrMsg::default_instance_,
      StationRuleMgrMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationRuleMgrMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationRuleMgrMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StationRuleMgrMsg));
  StationRuleMgrMsg_Request_descriptor_ = StationRuleMgrMsg_descriptor_->nested_type(0);
  static const int StationRuleMgrMsg_Request_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationRuleMgrMsg_Request, reqtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationRuleMgrMsg_Request, mgrsql_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationRuleMgrMsg_Request, stationrllist_),
  };
  StationRuleMgrMsg_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StationRuleMgrMsg_Request_descriptor_,
      StationRuleMgrMsg_Request::default_instance_,
      StationRuleMgrMsg_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationRuleMgrMsg_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationRuleMgrMsg_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StationRuleMgrMsg_Request));
  StationRuleMgrMsg_Response_descriptor_ = StationRuleMgrMsg_descriptor_->nested_type(1);
  static const int StationRuleMgrMsg_Response_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationRuleMgrMsg_Response, rescode_),
  };
  StationRuleMgrMsg_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StationRuleMgrMsg_Response_descriptor_,
      StationRuleMgrMsg_Response::default_instance_,
      StationRuleMgrMsg_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationRuleMgrMsg_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationRuleMgrMsg_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StationRuleMgrMsg_Response));
  CircleListMsg_descriptor_ = file->message_type(10);
  static const int CircleListMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CircleListMsg, request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CircleListMsg, response_),
  };
  CircleListMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CircleListMsg_descriptor_,
      CircleListMsg::default_instance_,
      CircleListMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CircleListMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CircleListMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CircleListMsg));
  CircleListMsg_Request_descriptor_ = CircleListMsg_descriptor_->nested_type(0);
  static const int CircleListMsg_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CircleListMsg_Request, saveid_),
  };
  CircleListMsg_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CircleListMsg_Request_descriptor_,
      CircleListMsg_Request::default_instance_,
      CircleListMsg_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CircleListMsg_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CircleListMsg_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CircleListMsg_Request));
  CircleListMsg_Response_descriptor_ = CircleListMsg_descriptor_->nested_type(1);
  static const int CircleListMsg_Response_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CircleListMsg_Response, rescode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CircleListMsg_Response, circlelist_),
  };
  CircleListMsg_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CircleListMsg_Response_descriptor_,
      CircleListMsg_Response::default_instance_,
      CircleListMsg_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CircleListMsg_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CircleListMsg_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CircleListMsg_Response));
  SignListMsg_descriptor_ = file->message_type(11);
  static const int SignListMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignListMsg, request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignListMsg, response_),
  };
  SignListMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SignListMsg_descriptor_,
      SignListMsg::default_instance_,
      SignListMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignListMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignListMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SignListMsg));
  SignListMsg_Request_descriptor_ = SignListMsg_descriptor_->nested_type(0);
  static const int SignListMsg_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignListMsg_Request, reqdate_),
  };
  SignListMsg_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SignListMsg_Request_descriptor_,
      SignListMsg_Request::default_instance_,
      SignListMsg_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignListMsg_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignListMsg_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SignListMsg_Request));
  SignListMsg_Response_descriptor_ = SignListMsg_descriptor_->nested_type(1);
  static const int SignListMsg_Response_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignListMsg_Response, rescode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignListMsg_Response, signlist_),
  };
  SignListMsg_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SignListMsg_Response_descriptor_,
      SignListMsg_Response::default_instance_,
      SignListMsg_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignListMsg_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignListMsg_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SignListMsg_Response));
  GswitchListMsg_descriptor_ = file->message_type(12);
  static const int GswitchListMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GswitchListMsg, request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GswitchListMsg, response_),
  };
  GswitchListMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GswitchListMsg_descriptor_,
      GswitchListMsg::default_instance_,
      GswitchListMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GswitchListMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GswitchListMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GswitchListMsg));
  GswitchListMsg_Request_descriptor_ = GswitchListMsg_descriptor_->nested_type(0);
  static const int GswitchListMsg_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GswitchListMsg_Request, reqdate_),
  };
  GswitchListMsg_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GswitchListMsg_Request_descriptor_,
      GswitchListMsg_Request::default_instance_,
      GswitchListMsg_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GswitchListMsg_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GswitchListMsg_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GswitchListMsg_Request));
  GswitchListMsg_Response_descriptor_ = GswitchListMsg_descriptor_->nested_type(1);
  static const int GswitchListMsg_Response_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GswitchListMsg_Response, rescode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GswitchListMsg_Response, gswitchlist_),
  };
  GswitchListMsg_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GswitchListMsg_Response_descriptor_,
      GswitchListMsg_Response::default_instance_,
      GswitchListMsg_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GswitchListMsg_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GswitchListMsg_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GswitchListMsg_Response));
  MsetListMsg_descriptor_ = file->message_type(13);
  static const int MsetListMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsetListMsg, request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsetListMsg, response_),
  };
  MsetListMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsetListMsg_descriptor_,
      MsetListMsg::default_instance_,
      MsetListMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsetListMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsetListMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsetListMsg));
  MsetListMsg_Request_descriptor_ = MsetListMsg_descriptor_->nested_type(0);
  static const int MsetListMsg_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsetListMsg_Request, reqdate_),
  };
  MsetListMsg_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsetListMsg_Request_descriptor_,
      MsetListMsg_Request::default_instance_,
      MsetListMsg_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsetListMsg_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsetListMsg_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsetListMsg_Request));
  MsetListMsg_Response_descriptor_ = MsetListMsg_descriptor_->nested_type(1);
  static const int MsetListMsg_Response_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsetListMsg_Response, rescode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsetListMsg_Response, msetlist_),
  };
  MsetListMsg_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsetListMsg_Response_descriptor_,
      MsetListMsg_Response::default_instance_,
      MsetListMsg_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsetListMsg_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsetListMsg_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsetListMsg_Response));
  EventListMsg_descriptor_ = file->message_type(14);
  static const int EventListMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventListMsg, request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventListMsg, response_),
  };
  EventListMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EventListMsg_descriptor_,
      EventListMsg::default_instance_,
      EventListMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventListMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventListMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EventListMsg));
  EventListMsg_Request_descriptor_ = EventListMsg_descriptor_->nested_type(0);
  static const int EventListMsg_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventListMsg_Request, reqdate_),
  };
  EventListMsg_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EventListMsg_Request_descriptor_,
      EventListMsg_Request::default_instance_,
      EventListMsg_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventListMsg_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventListMsg_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EventListMsg_Request));
  EventListMsg_Response_descriptor_ = EventListMsg_descriptor_->nested_type(1);
  static const int EventListMsg_Response_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventListMsg_Response, rescode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventListMsg_Response, eventlist_),
  };
  EventListMsg_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EventListMsg_Response_descriptor_,
      EventListMsg_Response::default_instance_,
      EventListMsg_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventListMsg_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventListMsg_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EventListMsg_Response));
  DevStateMsg_descriptor_ = file->message_type(15);
  static const int DevStateMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DevStateMsg, request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DevStateMsg, response_),
  };
  DevStateMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DevStateMsg_descriptor_,
      DevStateMsg::default_instance_,
      DevStateMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DevStateMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DevStateMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DevStateMsg));
  DevStateMsg_Request_descriptor_ = DevStateMsg_descriptor_->nested_type(0);
  static const int DevStateMsg_Request_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DevStateMsg_Request, saveid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DevStateMsg_Request, stationcim_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DevStateMsg_Request, unitcim_),
  };
  DevStateMsg_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DevStateMsg_Request_descriptor_,
      DevStateMsg_Request::default_instance_,
      DevStateMsg_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DevStateMsg_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DevStateMsg_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DevStateMsg_Request));
  DevStateMsg_Response_descriptor_ = DevStateMsg_descriptor_->nested_type(1);
  static const int DevStateMsg_Response_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DevStateMsg_Response, rescode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DevStateMsg_Response, devstate_),
  };
  DevStateMsg_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DevStateMsg_Response_descriptor_,
      DevStateMsg_Response::default_instance_,
      DevStateMsg_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DevStateMsg_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DevStateMsg_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DevStateMsg_Response));
  StationTypeMsg_descriptor_ = file->message_type(16);
  static const int StationTypeMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationTypeMsg, request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationTypeMsg, response_),
  };
  StationTypeMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StationTypeMsg_descriptor_,
      StationTypeMsg::default_instance_,
      StationTypeMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationTypeMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationTypeMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StationTypeMsg));
  StationTypeMsg_Request_descriptor_ = StationTypeMsg_descriptor_->nested_type(0);
  static const int StationTypeMsg_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationTypeMsg_Request, saveid_),
  };
  StationTypeMsg_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StationTypeMsg_Request_descriptor_,
      StationTypeMsg_Request::default_instance_,
      StationTypeMsg_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationTypeMsg_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationTypeMsg_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StationTypeMsg_Request));
  StationTypeMsg_Response_descriptor_ = StationTypeMsg_descriptor_->nested_type(1);
  static const int StationTypeMsg_Response_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationTypeMsg_Response, rescode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationTypeMsg_Response, typelist_),
  };
  StationTypeMsg_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StationTypeMsg_Response_descriptor_,
      StationTypeMsg_Response::default_instance_,
      StationTypeMsg_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationTypeMsg_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationTypeMsg_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StationTypeMsg_Response));
  StationListMsg_descriptor_ = file->message_type(17);
  static const int StationListMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationListMsg, request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationListMsg, response_),
  };
  StationListMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StationListMsg_descriptor_,
      StationListMsg::default_instance_,
      StationListMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationListMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationListMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StationListMsg));
  StationListMsg_Request_descriptor_ = StationListMsg_descriptor_->nested_type(0);
  static const int StationListMsg_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationListMsg_Request, stationid_),
  };
  StationListMsg_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StationListMsg_Request_descriptor_,
      StationListMsg_Request::default_instance_,
      StationListMsg_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationListMsg_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationListMsg_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StationListMsg_Request));
  StationListMsg_Response_descriptor_ = StationListMsg_descriptor_->nested_type(1);
  static const int StationListMsg_Response_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationListMsg_Response, rescode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationListMsg_Response, stationlist_),
  };
  StationListMsg_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StationListMsg_Response_descriptor_,
      StationListMsg_Response::default_instance_,
      StationListMsg_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationListMsg_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationListMsg_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StationListMsg_Response));
  TagMsg_descriptor_ = file->message_type(18);
  static const int TagMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TagMsg, request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TagMsg, response_),
  };
  TagMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TagMsg_descriptor_,
      TagMsg::default_instance_,
      TagMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TagMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TagMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TagMsg));
  TagMsg_Request_descriptor_ = TagMsg_descriptor_->nested_type(0);
  static const int TagMsg_Request_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TagMsg_Request, saveid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TagMsg_Request, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TagMsg_Request, unitcim_),
  };
  TagMsg_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TagMsg_Request_descriptor_,
      TagMsg_Request::default_instance_,
      TagMsg_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TagMsg_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TagMsg_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TagMsg_Request));
  TagMsg_Response_descriptor_ = TagMsg_descriptor_->nested_type(1);
  static const int TagMsg_Response_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TagMsg_Response, rescode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TagMsg_Response, resmsg_),
  };
  TagMsg_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TagMsg_Response_descriptor_,
      TagMsg_Response::default_instance_,
      TagMsg_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TagMsg_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TagMsg_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TagMsg_Response));
  OprationMsg_descriptor_ = file->message_type(19);
  static const int OprationMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OprationMsg, request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OprationMsg, response_),
  };
  OprationMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OprationMsg_descriptor_,
      OprationMsg::default_instance_,
      OprationMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OprationMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OprationMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OprationMsg));
  OprationMsg_Request_descriptor_ = OprationMsg_descriptor_->nested_type(0);
  static const int OprationMsg_Request_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OprationMsg_Request, saveid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OprationMsg_Request, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OprationMsg_Request, unitcim_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OprationMsg_Request, ischeck_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OprationMsg_Request, unittype_),
  };
  OprationMsg_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OprationMsg_Request_descriptor_,
      OprationMsg_Request::default_instance_,
      OprationMsg_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OprationMsg_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OprationMsg_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OprationMsg_Request));
  OprationMsg_Response_descriptor_ = OprationMsg_descriptor_->nested_type(1);
  static const int OprationMsg_Response_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OprationMsg_Response, rescode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OprationMsg_Response, resmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OprationMsg_Response, devstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OprationMsg_Response, rulelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OprationMsg_Response, optype_),
  };
  OprationMsg_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OprationMsg_Response_descriptor_,
      OprationMsg_Response::default_instance_,
      OprationMsg_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OprationMsg_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OprationMsg_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OprationMsg_Response));
  PowerSetMsg_descriptor_ = file->message_type(20);
  static const int PowerSetMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerSetMsg, request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerSetMsg, response_),
  };
  PowerSetMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PowerSetMsg_descriptor_,
      PowerSetMsg::default_instance_,
      PowerSetMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerSetMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerSetMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PowerSetMsg));
  PowerSetMsg_Request_descriptor_ = PowerSetMsg_descriptor_->nested_type(0);
  static const int PowerSetMsg_Request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerSetMsg_Request, stationcim_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerSetMsg_Request, unitcim_),
  };
  PowerSetMsg_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PowerSetMsg_Request_descriptor_,
      PowerSetMsg_Request::default_instance_,
      PowerSetMsg_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerSetMsg_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerSetMsg_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PowerSetMsg_Request));
  PowerSetMsg_Response_descriptor_ = PowerSetMsg_descriptor_->nested_type(1);
  static const int PowerSetMsg_Response_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerSetMsg_Response, rescode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerSetMsg_Response, resmsg_),
  };
  PowerSetMsg_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PowerSetMsg_Response_descriptor_,
      PowerSetMsg_Response::default_instance_,
      PowerSetMsg_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerSetMsg_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerSetMsg_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PowerSetMsg_Response));
  LineSetMsg_descriptor_ = file->message_type(21);
  static const int LineSetMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineSetMsg, request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineSetMsg, response_),
  };
  LineSetMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LineSetMsg_descriptor_,
      LineSetMsg::default_instance_,
      LineSetMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineSetMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineSetMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LineSetMsg));
  LineSetMsg_Request_descriptor_ = LineSetMsg_descriptor_->nested_type(0);
  static const int LineSetMsg_Request_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineSetMsg_Request, unitcim_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineSetMsg_Request, stationonecim_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineSetMsg_Request, stationothercim_),
  };
  LineSetMsg_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LineSetMsg_Request_descriptor_,
      LineSetMsg_Request::default_instance_,
      LineSetMsg_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineSetMsg_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineSetMsg_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LineSetMsg_Request));
  LineSetMsg_Response_descriptor_ = LineSetMsg_descriptor_->nested_type(1);
  static const int LineSetMsg_Response_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineSetMsg_Response, rescode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineSetMsg_Response, resmsg_),
  };
  LineSetMsg_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LineSetMsg_Response_descriptor_,
      LineSetMsg_Response::default_instance_,
      LineSetMsg_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineSetMsg_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineSetMsg_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LineSetMsg_Response));
  SavingListMsg_descriptor_ = file->message_type(22);
  static const int SavingListMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavingListMsg, request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavingListMsg, response_),
  };
  SavingListMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SavingListMsg_descriptor_,
      SavingListMsg::default_instance_,
      SavingListMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavingListMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavingListMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SavingListMsg));
  SavingListMsg_Request_descriptor_ = SavingListMsg_descriptor_->nested_type(0);
  static const int SavingListMsg_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavingListMsg_Request, id_),
  };
  SavingListMsg_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SavingListMsg_Request_descriptor_,
      SavingListMsg_Request::default_instance_,
      SavingListMsg_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavingListMsg_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavingListMsg_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SavingListMsg_Request));
  SavingListMsg_Response_descriptor_ = SavingListMsg_descriptor_->nested_type(1);
  static const int SavingListMsg_Response_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavingListMsg_Response, savelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavingListMsg_Response, rescode_),
  };
  SavingListMsg_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SavingListMsg_Response_descriptor_,
      SavingListMsg_Response::default_instance_,
      SavingListMsg_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavingListMsg_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavingListMsg_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SavingListMsg_Response));
  WriteSavingMsg_descriptor_ = file->message_type(23);
  static const int WriteSavingMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteSavingMsg, request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteSavingMsg, response_),
  };
  WriteSavingMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WriteSavingMsg_descriptor_,
      WriteSavingMsg::default_instance_,
      WriteSavingMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteSavingMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteSavingMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WriteSavingMsg));
  WriteSavingMsg_Request_descriptor_ = WriteSavingMsg_descriptor_->nested_type(0);
  static const int WriteSavingMsg_Request_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteSavingMsg_Request, savename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteSavingMsg_Request, saveid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteSavingMsg_Request, statelist_),
  };
  WriteSavingMsg_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WriteSavingMsg_Request_descriptor_,
      WriteSavingMsg_Request::default_instance_,
      WriteSavingMsg_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteSavingMsg_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteSavingMsg_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WriteSavingMsg_Request));
  WriteSavingMsg_Response_descriptor_ = WriteSavingMsg_descriptor_->nested_type(1);
  static const int WriteSavingMsg_Response_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteSavingMsg_Response, rescode_),
  };
  WriteSavingMsg_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WriteSavingMsg_Response_descriptor_,
      WriteSavingMsg_Response::default_instance_,
      WriteSavingMsg_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteSavingMsg_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteSavingMsg_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WriteSavingMsg_Response));
  TicketMsionListMsg_descriptor_ = file->message_type(24);
  static const int TicketMsionListMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TicketMsionListMsg, request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TicketMsionListMsg, response_),
  };
  TicketMsionListMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TicketMsionListMsg_descriptor_,
      TicketMsionListMsg::default_instance_,
      TicketMsionListMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TicketMsionListMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TicketMsionListMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TicketMsionListMsg));
  TicketMsionListMsg_Request_descriptor_ = TicketMsionListMsg_descriptor_->nested_type(0);
  static const int TicketMsionListMsg_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TicketMsionListMsg_Request, userid_),
  };
  TicketMsionListMsg_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TicketMsionListMsg_Request_descriptor_,
      TicketMsionListMsg_Request::default_instance_,
      TicketMsionListMsg_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TicketMsionListMsg_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TicketMsionListMsg_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TicketMsionListMsg_Request));
  TicketMsionListMsg_Response_descriptor_ = TicketMsionListMsg_descriptor_->nested_type(1);
  static const int TicketMsionListMsg_Response_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TicketMsionListMsg_Response, rescode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TicketMsionListMsg_Response, tktmsionlist_),
  };
  TicketMsionListMsg_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TicketMsionListMsg_Response_descriptor_,
      TicketMsionListMsg_Response::default_instance_,
      TicketMsionListMsg_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TicketMsionListMsg_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TicketMsionListMsg_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TicketMsionListMsg_Response));
  TicketMgrMsg_descriptor_ = file->message_type(25);
  static const int TicketMgrMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TicketMgrMsg, request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TicketMgrMsg, response_),
  };
  TicketMgrMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TicketMgrMsg_descriptor_,
      TicketMgrMsg::default_instance_,
      TicketMgrMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TicketMgrMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TicketMgrMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TicketMgrMsg));
  TicketMgrMsg_Request_descriptor_ = TicketMgrMsg_descriptor_->nested_type(0);
  static const int TicketMgrMsg_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TicketMgrMsg_Request, mgrsql_),
  };
  TicketMgrMsg_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TicketMgrMsg_Request_descriptor_,
      TicketMgrMsg_Request::default_instance_,
      TicketMgrMsg_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TicketMgrMsg_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TicketMgrMsg_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TicketMgrMsg_Request));
  TicketMgrMsg_Response_descriptor_ = TicketMgrMsg_descriptor_->nested_type(1);
  static const int TicketMgrMsg_Response_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TicketMgrMsg_Response, rescode_),
  };
  TicketMgrMsg_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TicketMgrMsg_Response_descriptor_,
      TicketMgrMsg_Response::default_instance_,
      TicketMgrMsg_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TicketMgrMsg_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TicketMgrMsg_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TicketMgrMsg_Response));
  TicketListMsg_descriptor_ = file->message_type(26);
  static const int TicketListMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TicketListMsg, request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TicketListMsg, response_),
  };
  TicketListMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TicketListMsg_descriptor_,
      TicketListMsg::default_instance_,
      TicketListMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TicketListMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TicketListMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TicketListMsg));
  TicketListMsg_Request_descriptor_ = TicketListMsg_descriptor_->nested_type(0);
  static const int TicketListMsg_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TicketListMsg_Request, reqdate_),
  };
  TicketListMsg_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TicketListMsg_Request_descriptor_,
      TicketListMsg_Request::default_instance_,
      TicketListMsg_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TicketListMsg_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TicketListMsg_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TicketListMsg_Request));
  TicketListMsg_Response_descriptor_ = TicketListMsg_descriptor_->nested_type(1);
  static const int TicketListMsg_Response_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TicketListMsg_Response, rescode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TicketListMsg_Response, ticketlist_),
  };
  TicketListMsg_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TicketListMsg_Response_descriptor_,
      TicketListMsg_Response::default_instance_,
      TicketListMsg_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TicketListMsg_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TicketListMsg_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TicketListMsg_Response));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_msgbody_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserLoginMsg_descriptor_, &UserLoginMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserLoginMsg_Request_descriptor_, &UserLoginMsg_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserLoginMsg_Response_descriptor_, &UserLoginMsg_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserListMsg_descriptor_, &UserListMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserListMsg_Request_descriptor_, &UserListMsg_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserListMsg_Response_descriptor_, &UserListMsg_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserRoleListMsg_descriptor_, &UserRoleListMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserRoleListMsg_Request_descriptor_, &UserRoleListMsg_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserRoleListMsg_Response_descriptor_, &UserRoleListMsg_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserMgrMsg_descriptor_, &UserMgrMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserMgrMsg_Request_descriptor_, &UserMgrMsg_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserMgrMsg_Response_descriptor_, &UserMgrMsg_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StationTypeMgrMsg_descriptor_, &StationTypeMgrMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StationTypeMgrMsg_Request_descriptor_, &StationTypeMgrMsg_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StationTypeMgrMsg_Response_descriptor_, &StationTypeMgrMsg_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StationMgrMsg_descriptor_, &StationMgrMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StationMgrMsg_Request_descriptor_, &StationMgrMsg_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StationMgrMsg_Response_descriptor_, &StationMgrMsg_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RuleListMsg_descriptor_, &RuleListMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RuleListMsg_Request_descriptor_, &RuleListMsg_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RuleListMsg_Response_descriptor_, &RuleListMsg_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RuleMgrMsg_descriptor_, &RuleMgrMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RuleMgrMsg_Request_descriptor_, &RuleMgrMsg_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RuleMgrMsg_Response_descriptor_, &RuleMgrMsg_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StationRuleListMsg_descriptor_, &StationRuleListMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StationRuleListMsg_Request_descriptor_, &StationRuleListMsg_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StationRuleListMsg_Response_descriptor_, &StationRuleListMsg_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StationRuleMgrMsg_descriptor_, &StationRuleMgrMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StationRuleMgrMsg_Request_descriptor_, &StationRuleMgrMsg_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StationRuleMgrMsg_Response_descriptor_, &StationRuleMgrMsg_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CircleListMsg_descriptor_, &CircleListMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CircleListMsg_Request_descriptor_, &CircleListMsg_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CircleListMsg_Response_descriptor_, &CircleListMsg_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SignListMsg_descriptor_, &SignListMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SignListMsg_Request_descriptor_, &SignListMsg_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SignListMsg_Response_descriptor_, &SignListMsg_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GswitchListMsg_descriptor_, &GswitchListMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GswitchListMsg_Request_descriptor_, &GswitchListMsg_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GswitchListMsg_Response_descriptor_, &GswitchListMsg_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsetListMsg_descriptor_, &MsetListMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsetListMsg_Request_descriptor_, &MsetListMsg_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsetListMsg_Response_descriptor_, &MsetListMsg_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EventListMsg_descriptor_, &EventListMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EventListMsg_Request_descriptor_, &EventListMsg_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EventListMsg_Response_descriptor_, &EventListMsg_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DevStateMsg_descriptor_, &DevStateMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DevStateMsg_Request_descriptor_, &DevStateMsg_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DevStateMsg_Response_descriptor_, &DevStateMsg_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StationTypeMsg_descriptor_, &StationTypeMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StationTypeMsg_Request_descriptor_, &StationTypeMsg_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StationTypeMsg_Response_descriptor_, &StationTypeMsg_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StationListMsg_descriptor_, &StationListMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StationListMsg_Request_descriptor_, &StationListMsg_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StationListMsg_Response_descriptor_, &StationListMsg_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TagMsg_descriptor_, &TagMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TagMsg_Request_descriptor_, &TagMsg_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TagMsg_Response_descriptor_, &TagMsg_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OprationMsg_descriptor_, &OprationMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OprationMsg_Request_descriptor_, &OprationMsg_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OprationMsg_Response_descriptor_, &OprationMsg_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PowerSetMsg_descriptor_, &PowerSetMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PowerSetMsg_Request_descriptor_, &PowerSetMsg_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PowerSetMsg_Response_descriptor_, &PowerSetMsg_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LineSetMsg_descriptor_, &LineSetMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LineSetMsg_Request_descriptor_, &LineSetMsg_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LineSetMsg_Response_descriptor_, &LineSetMsg_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SavingListMsg_descriptor_, &SavingListMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SavingListMsg_Request_descriptor_, &SavingListMsg_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SavingListMsg_Response_descriptor_, &SavingListMsg_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WriteSavingMsg_descriptor_, &WriteSavingMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WriteSavingMsg_Request_descriptor_, &WriteSavingMsg_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WriteSavingMsg_Response_descriptor_, &WriteSavingMsg_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TicketMsionListMsg_descriptor_, &TicketMsionListMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TicketMsionListMsg_Request_descriptor_, &TicketMsionListMsg_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TicketMsionListMsg_Response_descriptor_, &TicketMsionListMsg_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TicketMgrMsg_descriptor_, &TicketMgrMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TicketMgrMsg_Request_descriptor_, &TicketMgrMsg_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TicketMgrMsg_Response_descriptor_, &TicketMgrMsg_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TicketListMsg_descriptor_, &TicketListMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TicketListMsg_Request_descriptor_, &TicketListMsg_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TicketListMsg_Response_descriptor_, &TicketListMsg_Response::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_msgbody_2eproto() {
  delete UserLoginMsg::default_instance_;
  delete UserLoginMsg_reflection_;
  delete UserLoginMsg_Request::default_instance_;
  delete UserLoginMsg_Request_reflection_;
  delete UserLoginMsg_Response::default_instance_;
  delete UserLoginMsg_Response_reflection_;
  delete UserListMsg::default_instance_;
  delete UserListMsg_reflection_;
  delete UserListMsg_Request::default_instance_;
  delete UserListMsg_Request_reflection_;
  delete UserListMsg_Response::default_instance_;
  delete UserListMsg_Response_reflection_;
  delete UserRoleListMsg::default_instance_;
  delete UserRoleListMsg_reflection_;
  delete UserRoleListMsg_Request::default_instance_;
  delete UserRoleListMsg_Request_reflection_;
  delete UserRoleListMsg_Response::default_instance_;
  delete UserRoleListMsg_Response_reflection_;
  delete UserMgrMsg::default_instance_;
  delete UserMgrMsg_reflection_;
  delete UserMgrMsg_Request::default_instance_;
  delete UserMgrMsg_Request_reflection_;
  delete UserMgrMsg_Response::default_instance_;
  delete UserMgrMsg_Response_reflection_;
  delete StationTypeMgrMsg::default_instance_;
  delete StationTypeMgrMsg_reflection_;
  delete StationTypeMgrMsg_Request::default_instance_;
  delete StationTypeMgrMsg_Request_reflection_;
  delete StationTypeMgrMsg_Response::default_instance_;
  delete StationTypeMgrMsg_Response_reflection_;
  delete StationMgrMsg::default_instance_;
  delete StationMgrMsg_reflection_;
  delete StationMgrMsg_Request::default_instance_;
  delete StationMgrMsg_Request_reflection_;
  delete StationMgrMsg_Response::default_instance_;
  delete StationMgrMsg_Response_reflection_;
  delete RuleListMsg::default_instance_;
  delete RuleListMsg_reflection_;
  delete RuleListMsg_Request::default_instance_;
  delete RuleListMsg_Request_reflection_;
  delete RuleListMsg_Response::default_instance_;
  delete RuleListMsg_Response_reflection_;
  delete RuleMgrMsg::default_instance_;
  delete RuleMgrMsg_reflection_;
  delete RuleMgrMsg_Request::default_instance_;
  delete RuleMgrMsg_Request_reflection_;
  delete RuleMgrMsg_Response::default_instance_;
  delete RuleMgrMsg_Response_reflection_;
  delete StationRuleListMsg::default_instance_;
  delete StationRuleListMsg_reflection_;
  delete StationRuleListMsg_Request::default_instance_;
  delete StationRuleListMsg_Request_reflection_;
  delete StationRuleListMsg_Response::default_instance_;
  delete StationRuleListMsg_Response_reflection_;
  delete StationRuleMgrMsg::default_instance_;
  delete StationRuleMgrMsg_reflection_;
  delete StationRuleMgrMsg_Request::default_instance_;
  delete StationRuleMgrMsg_Request_reflection_;
  delete StationRuleMgrMsg_Response::default_instance_;
  delete StationRuleMgrMsg_Response_reflection_;
  delete CircleListMsg::default_instance_;
  delete CircleListMsg_reflection_;
  delete CircleListMsg_Request::default_instance_;
  delete CircleListMsg_Request_reflection_;
  delete CircleListMsg_Response::default_instance_;
  delete CircleListMsg_Response_reflection_;
  delete SignListMsg::default_instance_;
  delete SignListMsg_reflection_;
  delete SignListMsg_Request::default_instance_;
  delete SignListMsg_Request_reflection_;
  delete SignListMsg_Response::default_instance_;
  delete SignListMsg_Response_reflection_;
  delete GswitchListMsg::default_instance_;
  delete GswitchListMsg_reflection_;
  delete GswitchListMsg_Request::default_instance_;
  delete GswitchListMsg_Request_reflection_;
  delete GswitchListMsg_Response::default_instance_;
  delete GswitchListMsg_Response_reflection_;
  delete MsetListMsg::default_instance_;
  delete MsetListMsg_reflection_;
  delete MsetListMsg_Request::default_instance_;
  delete MsetListMsg_Request_reflection_;
  delete MsetListMsg_Response::default_instance_;
  delete MsetListMsg_Response_reflection_;
  delete EventListMsg::default_instance_;
  delete EventListMsg_reflection_;
  delete EventListMsg_Request::default_instance_;
  delete EventListMsg_Request_reflection_;
  delete EventListMsg_Response::default_instance_;
  delete EventListMsg_Response_reflection_;
  delete DevStateMsg::default_instance_;
  delete DevStateMsg_reflection_;
  delete DevStateMsg_Request::default_instance_;
  delete DevStateMsg_Request_reflection_;
  delete DevStateMsg_Response::default_instance_;
  delete DevStateMsg_Response_reflection_;
  delete StationTypeMsg::default_instance_;
  delete StationTypeMsg_reflection_;
  delete StationTypeMsg_Request::default_instance_;
  delete StationTypeMsg_Request_reflection_;
  delete StationTypeMsg_Response::default_instance_;
  delete StationTypeMsg_Response_reflection_;
  delete StationListMsg::default_instance_;
  delete StationListMsg_reflection_;
  delete StationListMsg_Request::default_instance_;
  delete StationListMsg_Request_reflection_;
  delete StationListMsg_Response::default_instance_;
  delete StationListMsg_Response_reflection_;
  delete TagMsg::default_instance_;
  delete TagMsg_reflection_;
  delete TagMsg_Request::default_instance_;
  delete TagMsg_Request_reflection_;
  delete TagMsg_Response::default_instance_;
  delete TagMsg_Response_reflection_;
  delete OprationMsg::default_instance_;
  delete OprationMsg_reflection_;
  delete OprationMsg_Request::default_instance_;
  delete OprationMsg_Request_reflection_;
  delete OprationMsg_Response::default_instance_;
  delete OprationMsg_Response_reflection_;
  delete PowerSetMsg::default_instance_;
  delete PowerSetMsg_reflection_;
  delete PowerSetMsg_Request::default_instance_;
  delete PowerSetMsg_Request_reflection_;
  delete PowerSetMsg_Response::default_instance_;
  delete PowerSetMsg_Response_reflection_;
  delete LineSetMsg::default_instance_;
  delete LineSetMsg_reflection_;
  delete LineSetMsg_Request::default_instance_;
  delete LineSetMsg_Request_reflection_;
  delete LineSetMsg_Response::default_instance_;
  delete LineSetMsg_Response_reflection_;
  delete SavingListMsg::default_instance_;
  delete SavingListMsg_reflection_;
  delete SavingListMsg_Request::default_instance_;
  delete SavingListMsg_Request_reflection_;
  delete SavingListMsg_Response::default_instance_;
  delete SavingListMsg_Response_reflection_;
  delete WriteSavingMsg::default_instance_;
  delete WriteSavingMsg_reflection_;
  delete WriteSavingMsg_Request::default_instance_;
  delete WriteSavingMsg_Request_reflection_;
  delete WriteSavingMsg_Response::default_instance_;
  delete WriteSavingMsg_Response_reflection_;
  delete TicketMsionListMsg::default_instance_;
  delete TicketMsionListMsg_reflection_;
  delete TicketMsionListMsg_Request::default_instance_;
  delete TicketMsionListMsg_Request_reflection_;
  delete TicketMsionListMsg_Response::default_instance_;
  delete TicketMsionListMsg_Response_reflection_;
  delete TicketMgrMsg::default_instance_;
  delete TicketMgrMsg_reflection_;
  delete TicketMgrMsg_Request::default_instance_;
  delete TicketMgrMsg_Request_reflection_;
  delete TicketMgrMsg_Response::default_instance_;
  delete TicketMgrMsg_Response_reflection_;
  delete TicketListMsg::default_instance_;
  delete TicketListMsg_reflection_;
  delete TicketListMsg_Request::default_instance_;
  delete TicketListMsg_Request_reflection_;
  delete TicketListMsg_Response::default_instance_;
  delete TicketListMsg_Response_reflection_;
}

void protobuf_AddDesc_msgbody_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::com::spplus::buff::protobuf_AddDesc_msgbean_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rmsgbody.proto\022\017com.spplus.buff\032\rmsgbea"
    "n.proto\"\370\001\n\014UserLoginMsg\0226\n\007request\030\001 \001("
    "\0132%.com.spplus.buff.UserLoginMsg.Request"
    "\0228\n\010response\030\002 \001(\0132&.com.spplus.buff.Use"
    "rLoginMsg.Response\032,\n\007Request\022\020\n\010usernam"
    "e\030\001 \001(\014\022\017\n\007userpwd\030\002 \001(\014\032H\n\010Response\022\017\n\007"
    "rescode\030\001 \001(\r\022+\n\010userlist\030\002 \003(\0132\031.com.sp"
    "plus.buff.UserBean\"\343\001\n\013UserListMsg\0225\n\007re"
    "quest\030\001 \001(\0132$.com.spplus.buff.UserListMs"
    "g.Request\0227\n\010response\030\002 \001(\0132%.com.spplus"
    ".buff.UserListMsg.Response\032\032\n\007Request\022\017\n"
    "\007reqdate\030\001 \001(\014\032H\n\010Response\022\017\n\007rescode\030\001 "
    "\001(\r\022+\n\010userlist\030\002 \003(\0132\031.com.spplus.buff."
    "UserBean\"\367\001\n\017UserRoleListMsg\0229\n\007request\030"
    "\001 \001(\0132(.com.spplus.buff.UserRoleListMsg."
    "Request\022;\n\010response\030\002 \001(\0132).com.spplus.b"
    "uff.UserRoleListMsg.Response\032\032\n\007Request\022"
    "\017\n\007reqdate\030\001 \001(\014\032P\n\010Response\022\017\n\007rescode\030"
    "\001 \001(\r\0223\n\014userrolelist\030\002 \003(\0132\035.com.spplus"
    ".buff.UserRoleBean\"\262\001\n\nUserMgrMsg\0224\n\007req"
    "uest\030\001 \001(\0132#.com.spplus.buff.UserMgrMsg."
    "Request\0226\n\010response\030\002 \001(\0132$.com.spplus.b"
    "uff.UserMgrMsg.Response\032\031\n\007Request\022\016\n\006mg"
    "rsql\030\001 \001(\014\032\033\n\010Response\022\017\n\007rescode\030\001 \001(\r\""
    "\307\001\n\021StationTypeMgrMsg\022;\n\007request\030\001 \001(\0132*"
    ".com.spplus.buff.StationTypeMgrMsg.Reque"
    "st\022=\n\010response\030\002 \001(\0132+.com.spplus.buff.S"
    "tationTypeMgrMsg.Response\032\031\n\007Request\022\016\n\006"
    "mgrsql\030\001 \001(\014\032\033\n\010Response\022\017\n\007rescode\030\001 \001("
    "\r\"\357\001\n\rStationMgrMsg\0227\n\007request\030\001 \001(\0132&.c"
    "om.spplus.buff.StationMgrMsg.Request\0229\n\010"
    "response\030\002 \001(\0132\'.com.spplus.buff.Station"
    "MgrMsg.Response\032M\n\007Request\022\017\n\007reqdate\030\001 "
    "\001(\014\0221\n\013stationlist\030\002 \003(\0132\034.com.spplus.bu"
    "ff.StationBean\032\033\n\010Response\022\017\n\007rescode\030\001 "
    "\001(\r\"\343\001\n\013RuleListMsg\0225\n\007request\030\001 \001(\0132$.c"
    "om.spplus.buff.RuleListMsg.Request\0227\n\010re"
    "sponse\030\002 \001(\0132%.com.spplus.buff.RuleListM"
    "sg.Response\032\032\n\007Request\022\017\n\007reqdate\030\001 \001(\014\032"
    "H\n\010Response\022\017\n\007rescode\030\001 \001(\r\022+\n\010rulelist"
    "\030\002 \003(\0132\031.com.spplus.buff.RuleBean\"\262\001\n\nRu"
    "leMgrMsg\0224\n\007request\030\001 \001(\0132#.com.spplus.b"
    "uff.RuleMgrMsg.Request\0226\n\010response\030\002 \001(\013"
    "2$.com.spplus.buff.RuleMgrMsg.Response\032\031"
    "\n\007Request\022\016\n\006mgrsql\030\001 \001(\014\032\033\n\010Response\022\017\n"
    "\007rescode\030\001 \001(\r\"\202\002\n\022StationRuleListMsg\022<\n"
    "\007request\030\001 \001(\0132+.com.spplus.buff.Station"
    "RuleListMsg.Request\022>\n\010response\030\002 \001(\0132,."
    "com.spplus.buff.StationRuleListMsg.Respo"
    "nse\032\032\n\007Request\022\017\n\007reqdate\030\001 \001(\014\032R\n\010Respo"
    "nse\022\017\n\007rescode\030\001 \001(\r\0225\n\013starulelist\030\002 \003("
    "\0132 .com.spplus.buff.StationRuleBean\"\221\002\n\021"
    "StationRuleMgrMsg\022;\n\007request\030\001 \001(\0132*.com"
    ".spplus.buff.StationRuleMgrMsg.Request\022="
    "\n\010response\030\002 \001(\0132+.com.spplus.buff.Stati"
    "onRuleMgrMsg.Response\032c\n\007Request\022\017\n\007reqt"
    "ype\030\001 \001(\r\022\016\n\006mgrsql\030\002 \001(\014\0227\n\rstationrlli"
    "st\030\003 \003(\0132 .com.spplus.buff.StationRuleBe"
    "an\032\033\n\010Response\022\017\n\007rescode\030\001 \001(\r\"\361\001\n\rCirc"
    "leListMsg\0227\n\007request\030\001 \001(\0132&.com.spplus."
    "buff.CircleListMsg.Request\0229\n\010response\030\002"
    " \001(\0132\'.com.spplus.buff.CircleListMsg.Res"
    "ponse\032\031\n\007Request\022\016\n\006saveId\030\001 \001(\r\032Q\n\010Resp"
    "onse\022\017\n\007rescode\030\001 \001(\r\0224\n\ncirclelist\030\002 \003("
    "\0132 .com.spplus.buff.CircleQueryBean\"\350\001\n\013"
    "SignListMsg\0225\n\007request\030\001 \001(\0132$.com.spplu"
    "s.buff.SignListMsg.Request\0227\n\010response\030\002"
    " \001(\0132%.com.spplus.buff.SignListMsg.Respo"
    "nse\032\032\n\007Request\022\017\n\007reqdate\030\001 \001(\014\032M\n\010Respo"
    "nse\022\017\n\007rescode\030\001 \001(\r\0220\n\010signlist\030\002 \003(\0132\036"
    ".com.spplus.buff.SignQueryBean\"\367\001\n\016Gswit"
    "chListMsg\0228\n\007request\030\001 \001(\0132\'.com.spplus."
    "buff.GswitchListMsg.Request\022:\n\010response\030"
    "\002 \001(\0132(.com.spplus.buff.GswitchListMsg.R"
    "esponse\032\032\n\007Request\022\017\n\007reqdate\030\001 \001(\014\032S\n\010R"
    "esponse\022\017\n\007rescode\030\001 \001(\r\0226\n\013gswitchlist\030"
    "\002 \003(\0132!.com.spplus.buff.GswitchQueryBean"
    "\"\350\001\n\013MsetListMsg\0225\n\007request\030\001 \001(\0132$.com."
    "spplus.buff.MsetListMsg.Request\0227\n\010respo"
    "nse\030\002 \001(\0132%.com.spplus.buff.MsetListMsg."
    "Response\032\032\n\007Request\022\017\n\007reqdate\030\001 \001(\014\032M\n\010"
    "Response\022\017\n\007rescode\030\001 \001(\r\0220\n\010msetlist\030\002 "
    "\003(\0132\036.com.spplus.buff.MsetQueryBean\"\355\001\n\014"
    "EventListMsg\0226\n\007request\030\001 \001(\0132%.com.sppl"
    "us.buff.EventListMsg.Request\0228\n\010response"
    "\030\002 \001(\0132&.com.spplus.buff.EventListMsg.Re"
    "sponse\032\032\n\007Request\022\017\n\007reqdate\030\001 \001(\014\032O\n\010Re"
    "sponse\022\017\n\007rescode\030\001 \001(\r\0222\n\teventlist\030\002 \003"
    "(\0132\037.com.spplus.buff.EventQueryBean\"\210\002\n\013"
    "DevStateMsg\0225\n\007request\030\001 \001(\0132$.com.spplu"
    "s.buff.DevStateMsg.Request\0227\n\010response\030\002"
    " \001(\0132%.com.spplus.buff.DevStateMsg.Respo"
    "nse\032>\n\007Request\022\016\n\006saveId\030\001 \001(\r\022\022\n\nstatio"
    "nCim\030\002 \001(\014\022\017\n\007unitCim\030\003 \001(\014\032I\n\010Response\022"
    "\017\n\007rescode\030\001 \001(\r\022,\n\010devState\030\002 \003(\0132\032.com"
    ".spplus.buff.StateBean\"\362\001\n\016StationTypeMs"
    "g\0228\n\007request\030\001 \001(\0132\'.com.spplus.buff.Sta"
    "tionTypeMsg.Request\022:\n\010response\030\002 \001(\0132(."
    "com.spplus.buff.StationTypeMsg.Response\032"
    "\031\n\007Request\022\016\n\006saveId\030\001 \001(\r\032O\n\010Response\022\017"
    "\n\007rescode\030\001 \001(\r\0222\n\010typeList\030\002 \003(\0132 .com."
    "spplus.buff.StationTypeBean\"\364\001\n\016StationL"
    "istMsg\0228\n\007request\030\001 \001(\0132\'.com.spplus.buf"
    "f.StationListMsg.Request\022:\n\010response\030\002 \001"
    "(\0132(.com.spplus.buff.StationListMsg.Resp"
    "onse\032\034\n\007Request\022\021\n\tstationId\030\001 \001(\r\032N\n\010Re"
    "sponse\022\017\n\007rescode\030\001 \001(\r\0221\n\013stationList\030\002"
    " \003(\0132\034.com.spplus.buff.StationBean\"\325\001\n\006T"
    "agMsg\0220\n\007request\030\001 \001(\0132\037.com.spplus.buff"
    ".TagMsg.Request\0222\n\010response\030\002 \001(\0132 .com."
    "spplus.buff.TagMsg.Response\0328\n\007Request\022\016"
    "\n\006saveId\030\001 \001(\r\022\014\n\004type\030\002 \001(\r\022\017\n\007unitCim\030"
    "\003 \001(\014\032+\n\010Response\022\017\n\007rescode\030\001 \001(\r\022\016\n\006re"
    "smsg\030\002 \001(\014\"\363\002\n\013OprationMsg\0225\n\007request\030\001 "
    "\001(\0132$.com.spplus.buff.OprationMsg.Reques"
    "t\0227\n\010response\030\002 \001(\0132%.com.spplus.buff.Op"
    "rationMsg.Response\032[\n\007Request\022\016\n\006saveId\030"
    "\001 \001(\r\022\014\n\004type\030\002 \001(\r\022\017\n\007unitCim\030\003 \001(\014\022\017\n\007"
    "ischeck\030\004 \001(\010\022\020\n\010unittype\030\005 \001(\r\032\226\001\n\010Resp"
    "onse\022\017\n\007rescode\030\001 \001(\r\022\016\n\006resmsg\030\002 \001(\014\022,\n"
    "\010devState\030\003 \003(\0132\032.com.spplus.buff.StateB"
    "ean\022+\n\010ruleList\030\004 \003(\0132\031.com.spplus.buff."
    "RuleBean\022\016\n\006optype\030\005 \001(\r\"\332\001\n\013PowerSetMsg"
    "\0225\n\007request\030\001 \001(\0132$.com.spplus.buff.Powe"
    "rSetMsg.Request\0227\n\010response\030\002 \001(\0132%.com."
    "spplus.buff.PowerSetMsg.Response\032.\n\007Requ"
    "est\022\022\n\nstationCim\030\001 \001(\014\022\017\n\007unitCim\030\002 \001(\014"
    "\032+\n\010Response\022\017\n\007rescode\030\001 \001(\r\022\016\n\006resmsg\030"
    "\002 \001(\014\"\363\001\n\nLineSetMsg\0224\n\007request\030\001 \001(\0132#."
    "com.spplus.buff.LineSetMsg.Request\0226\n\010re"
    "sponse\030\002 \001(\0132$.com.spplus.buff.LineSetMs"
    "g.Response\032J\n\007Request\022\017\n\007unitCim\030\001 \001(\014\022\025"
    "\n\rstationOneCim\030\002 \001(\014\022\027\n\017stationOtherCim"
    "\030\003 \001(\014\032+\n\010Response\022\017\n\007rescode\030\001 \001(\r\022\016\n\006r"
    "esmsg\030\002 \001(\014\"\346\001\n\rSavingListMsg\0227\n\007request"
    "\030\001 \001(\0132&.com.spplus.buff.SavingListMsg.R"
    "equest\0229\n\010response\030\002 \001(\0132\'.com.spplus.bu"
    "ff.SavingListMsg.Response\032\025\n\007Request\022\n\n\002"
    "id\030\001 \001(\014\032J\n\010Response\022-\n\010saveList\030\001 \003(\0132\033"
    ".com.spplus.buff.SavingBean\022\017\n\007rescode\030\002"
    " \001(\r\"\377\001\n\016WriteSavingMsg\0228\n\007request\030\001 \001(\013"
    "2\'.com.spplus.buff.WriteSavingMsg.Reques"
    "t\022:\n\010response\030\002 \001(\0132(.com.spplus.buff.Wr"
    "iteSavingMsg.Response\032Z\n\007Request\022\020\n\010save"
    "Name\030\001 \001(\014\022\016\n\006saveId\030\002 \001(\r\022-\n\tstateList\030"
    "\003 \003(\0132\032.com.spplus.buff.StateBean\032\033\n\010Res"
    "ponse\022\017\n\007rescode\030\001 \001(\r\"\202\002\n\022TicketMsionLi"
    "stMsg\022<\n\007request\030\001 \001(\0132+.com.spplus.buff"
    ".TicketMsionListMsg.Request\022>\n\010response\030"
    "\002 \001(\0132,.com.spplus.buff.TicketMsionListM"
    "sg.Response\032\031\n\007Request\022\016\n\006userid\030\001 \001(\r\032S"
    "\n\010Response\022\017\n\007rescode\030\001 \001(\r\0226\n\014tktMsionl"
    "ist\030\002 \003(\0132 .com.spplus.buff.TicketMsionB"
    "ean\"\270\001\n\014TicketMgrMsg\0226\n\007request\030\001 \001(\0132%."
    "com.spplus.buff.TicketMgrMsg.Request\0228\n\010"
    "response\030\002 \001(\0132&.com.spplus.buff.TicketM"
    "grMsg.Response\032\031\n\007Request\022\016\n\006mgrsql\030\001 \001("
    "\014\032\033\n\010Response\022\017\n\007rescode\030\001 \001(\r\"\355\001\n\rTicke"
    "tListMsg\0227\n\007request\030\001 \001(\0132&.com.spplus.b"
    "uff.TicketListMsg.Request\0229\n\010response\030\002 "
    "\001(\0132\'.com.spplus.buff.TicketListMsg.Resp"
    "onse\032\032\n\007Request\022\017\n\007reqdate\030\001 \001(\014\032L\n\010Resp"
    "onse\022\017\n\007rescode\030\001 \001(\r\022/\n\nticketlist\030\002 \003("
    "\0132\033.com.spplus.buff.TicketBean", 6550);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "msgbody.proto", &protobuf_RegisterTypes);
  UserLoginMsg::default_instance_ = new UserLoginMsg();
  UserLoginMsg_Request::default_instance_ = new UserLoginMsg_Request();
  UserLoginMsg_Response::default_instance_ = new UserLoginMsg_Response();
  UserListMsg::default_instance_ = new UserListMsg();
  UserListMsg_Request::default_instance_ = new UserListMsg_Request();
  UserListMsg_Response::default_instance_ = new UserListMsg_Response();
  UserRoleListMsg::default_instance_ = new UserRoleListMsg();
  UserRoleListMsg_Request::default_instance_ = new UserRoleListMsg_Request();
  UserRoleListMsg_Response::default_instance_ = new UserRoleListMsg_Response();
  UserMgrMsg::default_instance_ = new UserMgrMsg();
  UserMgrMsg_Request::default_instance_ = new UserMgrMsg_Request();
  UserMgrMsg_Response::default_instance_ = new UserMgrMsg_Response();
  StationTypeMgrMsg::default_instance_ = new StationTypeMgrMsg();
  StationTypeMgrMsg_Request::default_instance_ = new StationTypeMgrMsg_Request();
  StationTypeMgrMsg_Response::default_instance_ = new StationTypeMgrMsg_Response();
  StationMgrMsg::default_instance_ = new StationMgrMsg();
  StationMgrMsg_Request::default_instance_ = new StationMgrMsg_Request();
  StationMgrMsg_Response::default_instance_ = new StationMgrMsg_Response();
  RuleListMsg::default_instance_ = new RuleListMsg();
  RuleListMsg_Request::default_instance_ = new RuleListMsg_Request();
  RuleListMsg_Response::default_instance_ = new RuleListMsg_Response();
  RuleMgrMsg::default_instance_ = new RuleMgrMsg();
  RuleMgrMsg_Request::default_instance_ = new RuleMgrMsg_Request();
  RuleMgrMsg_Response::default_instance_ = new RuleMgrMsg_Response();
  StationRuleListMsg::default_instance_ = new StationRuleListMsg();
  StationRuleListMsg_Request::default_instance_ = new StationRuleListMsg_Request();
  StationRuleListMsg_Response::default_instance_ = new StationRuleListMsg_Response();
  StationRuleMgrMsg::default_instance_ = new StationRuleMgrMsg();
  StationRuleMgrMsg_Request::default_instance_ = new StationRuleMgrMsg_Request();
  StationRuleMgrMsg_Response::default_instance_ = new StationRuleMgrMsg_Response();
  CircleListMsg::default_instance_ = new CircleListMsg();
  CircleListMsg_Request::default_instance_ = new CircleListMsg_Request();
  CircleListMsg_Response::default_instance_ = new CircleListMsg_Response();
  SignListMsg::default_instance_ = new SignListMsg();
  SignListMsg_Request::default_instance_ = new SignListMsg_Request();
  SignListMsg_Response::default_instance_ = new SignListMsg_Response();
  GswitchListMsg::default_instance_ = new GswitchListMsg();
  GswitchListMsg_Request::default_instance_ = new GswitchListMsg_Request();
  GswitchListMsg_Response::default_instance_ = new GswitchListMsg_Response();
  MsetListMsg::default_instance_ = new MsetListMsg();
  MsetListMsg_Request::default_instance_ = new MsetListMsg_Request();
  MsetListMsg_Response::default_instance_ = new MsetListMsg_Response();
  EventListMsg::default_instance_ = new EventListMsg();
  EventListMsg_Request::default_instance_ = new EventListMsg_Request();
  EventListMsg_Response::default_instance_ = new EventListMsg_Response();
  DevStateMsg::default_instance_ = new DevStateMsg();
  DevStateMsg_Request::default_instance_ = new DevStateMsg_Request();
  DevStateMsg_Response::default_instance_ = new DevStateMsg_Response();
  StationTypeMsg::default_instance_ = new StationTypeMsg();
  StationTypeMsg_Request::default_instance_ = new StationTypeMsg_Request();
  StationTypeMsg_Response::default_instance_ = new StationTypeMsg_Response();
  StationListMsg::default_instance_ = new StationListMsg();
  StationListMsg_Request::default_instance_ = new StationListMsg_Request();
  StationListMsg_Response::default_instance_ = new StationListMsg_Response();
  TagMsg::default_instance_ = new TagMsg();
  TagMsg_Request::default_instance_ = new TagMsg_Request();
  TagMsg_Response::default_instance_ = new TagMsg_Response();
  OprationMsg::default_instance_ = new OprationMsg();
  OprationMsg_Request::default_instance_ = new OprationMsg_Request();
  OprationMsg_Response::default_instance_ = new OprationMsg_Response();
  PowerSetMsg::default_instance_ = new PowerSetMsg();
  PowerSetMsg_Request::default_instance_ = new PowerSetMsg_Request();
  PowerSetMsg_Response::default_instance_ = new PowerSetMsg_Response();
  LineSetMsg::default_instance_ = new LineSetMsg();
  LineSetMsg_Request::default_instance_ = new LineSetMsg_Request();
  LineSetMsg_Response::default_instance_ = new LineSetMsg_Response();
  SavingListMsg::default_instance_ = new SavingListMsg();
  SavingListMsg_Request::default_instance_ = new SavingListMsg_Request();
  SavingListMsg_Response::default_instance_ = new SavingListMsg_Response();
  WriteSavingMsg::default_instance_ = new WriteSavingMsg();
  WriteSavingMsg_Request::default_instance_ = new WriteSavingMsg_Request();
  WriteSavingMsg_Response::default_instance_ = new WriteSavingMsg_Response();
  TicketMsionListMsg::default_instance_ = new TicketMsionListMsg();
  TicketMsionListMsg_Request::default_instance_ = new TicketMsionListMsg_Request();
  TicketMsionListMsg_Response::default_instance_ = new TicketMsionListMsg_Response();
  TicketMgrMsg::default_instance_ = new TicketMgrMsg();
  TicketMgrMsg_Request::default_instance_ = new TicketMgrMsg_Request();
  TicketMgrMsg_Response::default_instance_ = new TicketMgrMsg_Response();
  TicketListMsg::default_instance_ = new TicketListMsg();
  TicketListMsg_Request::default_instance_ = new TicketListMsg_Request();
  TicketListMsg_Response::default_instance_ = new TicketListMsg_Response();
  UserLoginMsg::default_instance_->InitAsDefaultInstance();
  UserLoginMsg_Request::default_instance_->InitAsDefaultInstance();
  UserLoginMsg_Response::default_instance_->InitAsDefaultInstance();
  UserListMsg::default_instance_->InitAsDefaultInstance();
  UserListMsg_Request::default_instance_->InitAsDefaultInstance();
  UserListMsg_Response::default_instance_->InitAsDefaultInstance();
  UserRoleListMsg::default_instance_->InitAsDefaultInstance();
  UserRoleListMsg_Request::default_instance_->InitAsDefaultInstance();
  UserRoleListMsg_Response::default_instance_->InitAsDefaultInstance();
  UserMgrMsg::default_instance_->InitAsDefaultInstance();
  UserMgrMsg_Request::default_instance_->InitAsDefaultInstance();
  UserMgrMsg_Response::default_instance_->InitAsDefaultInstance();
  StationTypeMgrMsg::default_instance_->InitAsDefaultInstance();
  StationTypeMgrMsg_Request::default_instance_->InitAsDefaultInstance();
  StationTypeMgrMsg_Response::default_instance_->InitAsDefaultInstance();
  StationMgrMsg::default_instance_->InitAsDefaultInstance();
  StationMgrMsg_Request::default_instance_->InitAsDefaultInstance();
  StationMgrMsg_Response::default_instance_->InitAsDefaultInstance();
  RuleListMsg::default_instance_->InitAsDefaultInstance();
  RuleListMsg_Request::default_instance_->InitAsDefaultInstance();
  RuleListMsg_Response::default_instance_->InitAsDefaultInstance();
  RuleMgrMsg::default_instance_->InitAsDefaultInstance();
  RuleMgrMsg_Request::default_instance_->InitAsDefaultInstance();
  RuleMgrMsg_Response::default_instance_->InitAsDefaultInstance();
  StationRuleListMsg::default_instance_->InitAsDefaultInstance();
  StationRuleListMsg_Request::default_instance_->InitAsDefaultInstance();
  StationRuleListMsg_Response::default_instance_->InitAsDefaultInstance();
  StationRuleMgrMsg::default_instance_->InitAsDefaultInstance();
  StationRuleMgrMsg_Request::default_instance_->InitAsDefaultInstance();
  StationRuleMgrMsg_Response::default_instance_->InitAsDefaultInstance();
  CircleListMsg::default_instance_->InitAsDefaultInstance();
  CircleListMsg_Request::default_instance_->InitAsDefaultInstance();
  CircleListMsg_Response::default_instance_->InitAsDefaultInstance();
  SignListMsg::default_instance_->InitAsDefaultInstance();
  SignListMsg_Request::default_instance_->InitAsDefaultInstance();
  SignListMsg_Response::default_instance_->InitAsDefaultInstance();
  GswitchListMsg::default_instance_->InitAsDefaultInstance();
  GswitchListMsg_Request::default_instance_->InitAsDefaultInstance();
  GswitchListMsg_Response::default_instance_->InitAsDefaultInstance();
  MsetListMsg::default_instance_->InitAsDefaultInstance();
  MsetListMsg_Request::default_instance_->InitAsDefaultInstance();
  MsetListMsg_Response::default_instance_->InitAsDefaultInstance();
  EventListMsg::default_instance_->InitAsDefaultInstance();
  EventListMsg_Request::default_instance_->InitAsDefaultInstance();
  EventListMsg_Response::default_instance_->InitAsDefaultInstance();
  DevStateMsg::default_instance_->InitAsDefaultInstance();
  DevStateMsg_Request::default_instance_->InitAsDefaultInstance();
  DevStateMsg_Response::default_instance_->InitAsDefaultInstance();
  StationTypeMsg::default_instance_->InitAsDefaultInstance();
  StationTypeMsg_Request::default_instance_->InitAsDefaultInstance();
  StationTypeMsg_Response::default_instance_->InitAsDefaultInstance();
  StationListMsg::default_instance_->InitAsDefaultInstance();
  StationListMsg_Request::default_instance_->InitAsDefaultInstance();
  StationListMsg_Response::default_instance_->InitAsDefaultInstance();
  TagMsg::default_instance_->InitAsDefaultInstance();
  TagMsg_Request::default_instance_->InitAsDefaultInstance();
  TagMsg_Response::default_instance_->InitAsDefaultInstance();
  OprationMsg::default_instance_->InitAsDefaultInstance();
  OprationMsg_Request::default_instance_->InitAsDefaultInstance();
  OprationMsg_Response::default_instance_->InitAsDefaultInstance();
  PowerSetMsg::default_instance_->InitAsDefaultInstance();
  PowerSetMsg_Request::default_instance_->InitAsDefaultInstance();
  PowerSetMsg_Response::default_instance_->InitAsDefaultInstance();
  LineSetMsg::default_instance_->InitAsDefaultInstance();
  LineSetMsg_Request::default_instance_->InitAsDefaultInstance();
  LineSetMsg_Response::default_instance_->InitAsDefaultInstance();
  SavingListMsg::default_instance_->InitAsDefaultInstance();
  SavingListMsg_Request::default_instance_->InitAsDefaultInstance();
  SavingListMsg_Response::default_instance_->InitAsDefaultInstance();
  WriteSavingMsg::default_instance_->InitAsDefaultInstance();
  WriteSavingMsg_Request::default_instance_->InitAsDefaultInstance();
  WriteSavingMsg_Response::default_instance_->InitAsDefaultInstance();
  TicketMsionListMsg::default_instance_->InitAsDefaultInstance();
  TicketMsionListMsg_Request::default_instance_->InitAsDefaultInstance();
  TicketMsionListMsg_Response::default_instance_->InitAsDefaultInstance();
  TicketMgrMsg::default_instance_->InitAsDefaultInstance();
  TicketMgrMsg_Request::default_instance_->InitAsDefaultInstance();
  TicketMgrMsg_Response::default_instance_->InitAsDefaultInstance();
  TicketListMsg::default_instance_->InitAsDefaultInstance();
  TicketListMsg_Request::default_instance_->InitAsDefaultInstance();
  TicketListMsg_Response::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_msgbody_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_msgbody_2eproto {
  StaticDescriptorInitializer_msgbody_2eproto() {
    protobuf_AddDesc_msgbody_2eproto();
  }
} static_descriptor_initializer_msgbody_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int UserLoginMsg_Request::kUsernameFieldNumber;
const int UserLoginMsg_Request::kUserpwdFieldNumber;
#endif  // !_MSC_VER

UserLoginMsg_Request::UserLoginMsg_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserLoginMsg_Request::InitAsDefaultInstance() {
}

UserLoginMsg_Request::UserLoginMsg_Request(const UserLoginMsg_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserLoginMsg_Request::SharedCtor() {
  _cached_size_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userpwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserLoginMsg_Request::~UserLoginMsg_Request() {
  SharedDtor();
}

void UserLoginMsg_Request::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (userpwd_ != &::google::protobuf::internal::kEmptyString) {
    delete userpwd_;
  }
  if (this != default_instance_) {
  }
}

void UserLoginMsg_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserLoginMsg_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserLoginMsg_Request_descriptor_;
}

const UserLoginMsg_Request& UserLoginMsg_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

UserLoginMsg_Request* UserLoginMsg_Request::default_instance_ = NULL;

UserLoginMsg_Request* UserLoginMsg_Request::New() const {
  return new UserLoginMsg_Request;
}

void UserLoginMsg_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    if (has_userpwd()) {
      if (userpwd_ != &::google::protobuf::internal::kEmptyString) {
        userpwd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserLoginMsg_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes username = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_username()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_userpwd;
        break;
      }

      // optional bytes userpwd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userpwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_userpwd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserLoginMsg_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->username(), output);
  }

  // optional bytes userpwd = 2;
  if (has_userpwd()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->userpwd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserLoginMsg_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes username = 1;
  if (has_username()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->username(), target);
  }

  // optional bytes userpwd = 2;
  if (has_userpwd()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->userpwd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserLoginMsg_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes username = 1;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->username());
    }

    // optional bytes userpwd = 2;
    if (has_userpwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->userpwd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserLoginMsg_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserLoginMsg_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserLoginMsg_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserLoginMsg_Request::MergeFrom(const UserLoginMsg_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_userpwd()) {
      set_userpwd(from.userpwd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserLoginMsg_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserLoginMsg_Request::CopyFrom(const UserLoginMsg_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserLoginMsg_Request::IsInitialized() const {

  return true;
}

void UserLoginMsg_Request::Swap(UserLoginMsg_Request* other) {
  if (other != this) {
    std::swap(username_, other->username_);
    std::swap(userpwd_, other->userpwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserLoginMsg_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserLoginMsg_Request_descriptor_;
  metadata.reflection = UserLoginMsg_Request_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int UserLoginMsg_Response::kRescodeFieldNumber;
const int UserLoginMsg_Response::kUserlistFieldNumber;
#endif  // !_MSC_VER

UserLoginMsg_Response::UserLoginMsg_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserLoginMsg_Response::InitAsDefaultInstance() {
}

UserLoginMsg_Response::UserLoginMsg_Response(const UserLoginMsg_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserLoginMsg_Response::SharedCtor() {
  _cached_size_ = 0;
  rescode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserLoginMsg_Response::~UserLoginMsg_Response() {
  SharedDtor();
}

void UserLoginMsg_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserLoginMsg_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserLoginMsg_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserLoginMsg_Response_descriptor_;
}

const UserLoginMsg_Response& UserLoginMsg_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

UserLoginMsg_Response* UserLoginMsg_Response::default_instance_ = NULL;

UserLoginMsg_Response* UserLoginMsg_Response::New() const {
  return new UserLoginMsg_Response;
}

void UserLoginMsg_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rescode_ = 0u;
  }
  userlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserLoginMsg_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 rescode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rescode_)));
          set_has_rescode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_userlist;
        break;
      }

      // repeated .com.spplus.buff.UserBean userlist = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_userlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_userlist;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserLoginMsg_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 rescode = 1;
  if (has_rescode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rescode(), output);
  }

  // repeated .com.spplus.buff.UserBean userlist = 2;
  for (int i = 0; i < this->userlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->userlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserLoginMsg_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 rescode = 1;
  if (has_rescode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rescode(), target);
  }

  // repeated .com.spplus.buff.UserBean userlist = 2;
  for (int i = 0; i < this->userlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->userlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserLoginMsg_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 rescode = 1;
    if (has_rescode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rescode());
    }

  }
  // repeated .com.spplus.buff.UserBean userlist = 2;
  total_size += 1 * this->userlist_size();
  for (int i = 0; i < this->userlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserLoginMsg_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserLoginMsg_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserLoginMsg_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserLoginMsg_Response::MergeFrom(const UserLoginMsg_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  userlist_.MergeFrom(from.userlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rescode()) {
      set_rescode(from.rescode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserLoginMsg_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserLoginMsg_Response::CopyFrom(const UserLoginMsg_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserLoginMsg_Response::IsInitialized() const {

  return true;
}

void UserLoginMsg_Response::Swap(UserLoginMsg_Response* other) {
  if (other != this) {
    std::swap(rescode_, other->rescode_);
    userlist_.Swap(&other->userlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserLoginMsg_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserLoginMsg_Response_descriptor_;
  metadata.reflection = UserLoginMsg_Response_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int UserLoginMsg::kRequestFieldNumber;
const int UserLoginMsg::kResponseFieldNumber;
#endif  // !_MSC_VER

UserLoginMsg::UserLoginMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserLoginMsg::InitAsDefaultInstance() {
  request_ = const_cast< ::com::spplus::buff::UserLoginMsg_Request*>(&::com::spplus::buff::UserLoginMsg_Request::default_instance());
  response_ = const_cast< ::com::spplus::buff::UserLoginMsg_Response*>(&::com::spplus::buff::UserLoginMsg_Response::default_instance());
}

UserLoginMsg::UserLoginMsg(const UserLoginMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserLoginMsg::SharedCtor() {
  _cached_size_ = 0;
  request_ = NULL;
  response_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserLoginMsg::~UserLoginMsg() {
  SharedDtor();
}

void UserLoginMsg::SharedDtor() {
  if (this != default_instance_) {
    delete request_;
    delete response_;
  }
}

void UserLoginMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserLoginMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserLoginMsg_descriptor_;
}

const UserLoginMsg& UserLoginMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

UserLoginMsg* UserLoginMsg::default_instance_ = NULL;

UserLoginMsg* UserLoginMsg::New() const {
  return new UserLoginMsg;
}

void UserLoginMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_request()) {
      if (request_ != NULL) request_->::com::spplus::buff::UserLoginMsg_Request::Clear();
    }
    if (has_response()) {
      if (response_ != NULL) response_->::com::spplus::buff::UserLoginMsg_Response::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserLoginMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.spplus.buff.UserLoginMsg.Request request = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_response;
        break;
      }

      // optional .com.spplus.buff.UserLoginMsg.Response response = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserLoginMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.spplus.buff.UserLoginMsg.Request request = 1;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->request(), output);
  }

  // optional .com.spplus.buff.UserLoginMsg.Response response = 2;
  if (has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->response(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserLoginMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.spplus.buff.UserLoginMsg.Request request = 1;
  if (has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->request(), target);
  }

  // optional .com.spplus.buff.UserLoginMsg.Response response = 2;
  if (has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->response(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserLoginMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.spplus.buff.UserLoginMsg.Request request = 1;
    if (has_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->request());
    }

    // optional .com.spplus.buff.UserLoginMsg.Response response = 2;
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->response());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserLoginMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserLoginMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserLoginMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserLoginMsg::MergeFrom(const UserLoginMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request()) {
      mutable_request()->::com::spplus::buff::UserLoginMsg_Request::MergeFrom(from.request());
    }
    if (from.has_response()) {
      mutable_response()->::com::spplus::buff::UserLoginMsg_Response::MergeFrom(from.response());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserLoginMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserLoginMsg::CopyFrom(const UserLoginMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserLoginMsg::IsInitialized() const {

  return true;
}

void UserLoginMsg::Swap(UserLoginMsg* other) {
  if (other != this) {
    std::swap(request_, other->request_);
    std::swap(response_, other->response_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserLoginMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserLoginMsg_descriptor_;
  metadata.reflection = UserLoginMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserListMsg_Request::kReqdateFieldNumber;
#endif  // !_MSC_VER

UserListMsg_Request::UserListMsg_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserListMsg_Request::InitAsDefaultInstance() {
}

UserListMsg_Request::UserListMsg_Request(const UserListMsg_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserListMsg_Request::SharedCtor() {
  _cached_size_ = 0;
  reqdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserListMsg_Request::~UserListMsg_Request() {
  SharedDtor();
}

void UserListMsg_Request::SharedDtor() {
  if (reqdate_ != &::google::protobuf::internal::kEmptyString) {
    delete reqdate_;
  }
  if (this != default_instance_) {
  }
}

void UserListMsg_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserListMsg_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserListMsg_Request_descriptor_;
}

const UserListMsg_Request& UserListMsg_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

UserListMsg_Request* UserListMsg_Request::default_instance_ = NULL;

UserListMsg_Request* UserListMsg_Request::New() const {
  return new UserListMsg_Request;
}

void UserListMsg_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_reqdate()) {
      if (reqdate_ != &::google::protobuf::internal::kEmptyString) {
        reqdate_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserListMsg_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes reqdate = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_reqdate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserListMsg_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes reqdate = 1;
  if (has_reqdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->reqdate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserListMsg_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes reqdate = 1;
  if (has_reqdate()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->reqdate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserListMsg_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes reqdate = 1;
    if (has_reqdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->reqdate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserListMsg_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserListMsg_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserListMsg_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserListMsg_Request::MergeFrom(const UserListMsg_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reqdate()) {
      set_reqdate(from.reqdate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserListMsg_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserListMsg_Request::CopyFrom(const UserListMsg_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserListMsg_Request::IsInitialized() const {

  return true;
}

void UserListMsg_Request::Swap(UserListMsg_Request* other) {
  if (other != this) {
    std::swap(reqdate_, other->reqdate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserListMsg_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserListMsg_Request_descriptor_;
  metadata.reflection = UserListMsg_Request_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int UserListMsg_Response::kRescodeFieldNumber;
const int UserListMsg_Response::kUserlistFieldNumber;
#endif  // !_MSC_VER

UserListMsg_Response::UserListMsg_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserListMsg_Response::InitAsDefaultInstance() {
}

UserListMsg_Response::UserListMsg_Response(const UserListMsg_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserListMsg_Response::SharedCtor() {
  _cached_size_ = 0;
  rescode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserListMsg_Response::~UserListMsg_Response() {
  SharedDtor();
}

void UserListMsg_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserListMsg_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserListMsg_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserListMsg_Response_descriptor_;
}

const UserListMsg_Response& UserListMsg_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

UserListMsg_Response* UserListMsg_Response::default_instance_ = NULL;

UserListMsg_Response* UserListMsg_Response::New() const {
  return new UserListMsg_Response;
}

void UserListMsg_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rescode_ = 0u;
  }
  userlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserListMsg_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 rescode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rescode_)));
          set_has_rescode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_userlist;
        break;
      }

      // repeated .com.spplus.buff.UserBean userlist = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_userlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_userlist;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserListMsg_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 rescode = 1;
  if (has_rescode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rescode(), output);
  }

  // repeated .com.spplus.buff.UserBean userlist = 2;
  for (int i = 0; i < this->userlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->userlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserListMsg_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 rescode = 1;
  if (has_rescode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rescode(), target);
  }

  // repeated .com.spplus.buff.UserBean userlist = 2;
  for (int i = 0; i < this->userlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->userlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserListMsg_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 rescode = 1;
    if (has_rescode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rescode());
    }

  }
  // repeated .com.spplus.buff.UserBean userlist = 2;
  total_size += 1 * this->userlist_size();
  for (int i = 0; i < this->userlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserListMsg_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserListMsg_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserListMsg_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserListMsg_Response::MergeFrom(const UserListMsg_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  userlist_.MergeFrom(from.userlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rescode()) {
      set_rescode(from.rescode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserListMsg_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserListMsg_Response::CopyFrom(const UserListMsg_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserListMsg_Response::IsInitialized() const {

  return true;
}

void UserListMsg_Response::Swap(UserListMsg_Response* other) {
  if (other != this) {
    std::swap(rescode_, other->rescode_);
    userlist_.Swap(&other->userlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserListMsg_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserListMsg_Response_descriptor_;
  metadata.reflection = UserListMsg_Response_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int UserListMsg::kRequestFieldNumber;
const int UserListMsg::kResponseFieldNumber;
#endif  // !_MSC_VER

UserListMsg::UserListMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserListMsg::InitAsDefaultInstance() {
  request_ = const_cast< ::com::spplus::buff::UserListMsg_Request*>(&::com::spplus::buff::UserListMsg_Request::default_instance());
  response_ = const_cast< ::com::spplus::buff::UserListMsg_Response*>(&::com::spplus::buff::UserListMsg_Response::default_instance());
}

UserListMsg::UserListMsg(const UserListMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserListMsg::SharedCtor() {
  _cached_size_ = 0;
  request_ = NULL;
  response_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserListMsg::~UserListMsg() {
  SharedDtor();
}

void UserListMsg::SharedDtor() {
  if (this != default_instance_) {
    delete request_;
    delete response_;
  }
}

void UserListMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserListMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserListMsg_descriptor_;
}

const UserListMsg& UserListMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

UserListMsg* UserListMsg::default_instance_ = NULL;

UserListMsg* UserListMsg::New() const {
  return new UserListMsg;
}

void UserListMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_request()) {
      if (request_ != NULL) request_->::com::spplus::buff::UserListMsg_Request::Clear();
    }
    if (has_response()) {
      if (response_ != NULL) response_->::com::spplus::buff::UserListMsg_Response::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserListMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.spplus.buff.UserListMsg.Request request = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_response;
        break;
      }

      // optional .com.spplus.buff.UserListMsg.Response response = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserListMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.spplus.buff.UserListMsg.Request request = 1;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->request(), output);
  }

  // optional .com.spplus.buff.UserListMsg.Response response = 2;
  if (has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->response(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserListMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.spplus.buff.UserListMsg.Request request = 1;
  if (has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->request(), target);
  }

  // optional .com.spplus.buff.UserListMsg.Response response = 2;
  if (has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->response(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserListMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.spplus.buff.UserListMsg.Request request = 1;
    if (has_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->request());
    }

    // optional .com.spplus.buff.UserListMsg.Response response = 2;
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->response());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserListMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserListMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserListMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserListMsg::MergeFrom(const UserListMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request()) {
      mutable_request()->::com::spplus::buff::UserListMsg_Request::MergeFrom(from.request());
    }
    if (from.has_response()) {
      mutable_response()->::com::spplus::buff::UserListMsg_Response::MergeFrom(from.response());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserListMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserListMsg::CopyFrom(const UserListMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserListMsg::IsInitialized() const {

  return true;
}

void UserListMsg::Swap(UserListMsg* other) {
  if (other != this) {
    std::swap(request_, other->request_);
    std::swap(response_, other->response_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserListMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserListMsg_descriptor_;
  metadata.reflection = UserListMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserRoleListMsg_Request::kReqdateFieldNumber;
#endif  // !_MSC_VER

UserRoleListMsg_Request::UserRoleListMsg_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserRoleListMsg_Request::InitAsDefaultInstance() {
}

UserRoleListMsg_Request::UserRoleListMsg_Request(const UserRoleListMsg_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserRoleListMsg_Request::SharedCtor() {
  _cached_size_ = 0;
  reqdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserRoleListMsg_Request::~UserRoleListMsg_Request() {
  SharedDtor();
}

void UserRoleListMsg_Request::SharedDtor() {
  if (reqdate_ != &::google::protobuf::internal::kEmptyString) {
    delete reqdate_;
  }
  if (this != default_instance_) {
  }
}

void UserRoleListMsg_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserRoleListMsg_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserRoleListMsg_Request_descriptor_;
}

const UserRoleListMsg_Request& UserRoleListMsg_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

UserRoleListMsg_Request* UserRoleListMsg_Request::default_instance_ = NULL;

UserRoleListMsg_Request* UserRoleListMsg_Request::New() const {
  return new UserRoleListMsg_Request;
}

void UserRoleListMsg_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_reqdate()) {
      if (reqdate_ != &::google::protobuf::internal::kEmptyString) {
        reqdate_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserRoleListMsg_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes reqdate = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_reqdate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserRoleListMsg_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes reqdate = 1;
  if (has_reqdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->reqdate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserRoleListMsg_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes reqdate = 1;
  if (has_reqdate()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->reqdate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserRoleListMsg_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes reqdate = 1;
    if (has_reqdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->reqdate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserRoleListMsg_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserRoleListMsg_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserRoleListMsg_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserRoleListMsg_Request::MergeFrom(const UserRoleListMsg_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reqdate()) {
      set_reqdate(from.reqdate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserRoleListMsg_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserRoleListMsg_Request::CopyFrom(const UserRoleListMsg_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserRoleListMsg_Request::IsInitialized() const {

  return true;
}

void UserRoleListMsg_Request::Swap(UserRoleListMsg_Request* other) {
  if (other != this) {
    std::swap(reqdate_, other->reqdate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserRoleListMsg_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserRoleListMsg_Request_descriptor_;
  metadata.reflection = UserRoleListMsg_Request_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int UserRoleListMsg_Response::kRescodeFieldNumber;
const int UserRoleListMsg_Response::kUserrolelistFieldNumber;
#endif  // !_MSC_VER

UserRoleListMsg_Response::UserRoleListMsg_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserRoleListMsg_Response::InitAsDefaultInstance() {
}

UserRoleListMsg_Response::UserRoleListMsg_Response(const UserRoleListMsg_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserRoleListMsg_Response::SharedCtor() {
  _cached_size_ = 0;
  rescode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserRoleListMsg_Response::~UserRoleListMsg_Response() {
  SharedDtor();
}

void UserRoleListMsg_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserRoleListMsg_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserRoleListMsg_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserRoleListMsg_Response_descriptor_;
}

const UserRoleListMsg_Response& UserRoleListMsg_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

UserRoleListMsg_Response* UserRoleListMsg_Response::default_instance_ = NULL;

UserRoleListMsg_Response* UserRoleListMsg_Response::New() const {
  return new UserRoleListMsg_Response;
}

void UserRoleListMsg_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rescode_ = 0u;
  }
  userrolelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserRoleListMsg_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 rescode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rescode_)));
          set_has_rescode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_userrolelist;
        break;
      }

      // repeated .com.spplus.buff.UserRoleBean userrolelist = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userrolelist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_userrolelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_userrolelist;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserRoleListMsg_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 rescode = 1;
  if (has_rescode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rescode(), output);
  }

  // repeated .com.spplus.buff.UserRoleBean userrolelist = 2;
  for (int i = 0; i < this->userrolelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->userrolelist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserRoleListMsg_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 rescode = 1;
  if (has_rescode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rescode(), target);
  }

  // repeated .com.spplus.buff.UserRoleBean userrolelist = 2;
  for (int i = 0; i < this->userrolelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->userrolelist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserRoleListMsg_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 rescode = 1;
    if (has_rescode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rescode());
    }

  }
  // repeated .com.spplus.buff.UserRoleBean userrolelist = 2;
  total_size += 1 * this->userrolelist_size();
  for (int i = 0; i < this->userrolelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userrolelist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserRoleListMsg_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserRoleListMsg_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserRoleListMsg_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserRoleListMsg_Response::MergeFrom(const UserRoleListMsg_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  userrolelist_.MergeFrom(from.userrolelist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rescode()) {
      set_rescode(from.rescode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserRoleListMsg_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserRoleListMsg_Response::CopyFrom(const UserRoleListMsg_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserRoleListMsg_Response::IsInitialized() const {

  return true;
}

void UserRoleListMsg_Response::Swap(UserRoleListMsg_Response* other) {
  if (other != this) {
    std::swap(rescode_, other->rescode_);
    userrolelist_.Swap(&other->userrolelist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserRoleListMsg_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserRoleListMsg_Response_descriptor_;
  metadata.reflection = UserRoleListMsg_Response_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int UserRoleListMsg::kRequestFieldNumber;
const int UserRoleListMsg::kResponseFieldNumber;
#endif  // !_MSC_VER

UserRoleListMsg::UserRoleListMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserRoleListMsg::InitAsDefaultInstance() {
  request_ = const_cast< ::com::spplus::buff::UserRoleListMsg_Request*>(&::com::spplus::buff::UserRoleListMsg_Request::default_instance());
  response_ = const_cast< ::com::spplus::buff::UserRoleListMsg_Response*>(&::com::spplus::buff::UserRoleListMsg_Response::default_instance());
}

UserRoleListMsg::UserRoleListMsg(const UserRoleListMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserRoleListMsg::SharedCtor() {
  _cached_size_ = 0;
  request_ = NULL;
  response_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserRoleListMsg::~UserRoleListMsg() {
  SharedDtor();
}

void UserRoleListMsg::SharedDtor() {
  if (this != default_instance_) {
    delete request_;
    delete response_;
  }
}

void UserRoleListMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserRoleListMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserRoleListMsg_descriptor_;
}

const UserRoleListMsg& UserRoleListMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

UserRoleListMsg* UserRoleListMsg::default_instance_ = NULL;

UserRoleListMsg* UserRoleListMsg::New() const {
  return new UserRoleListMsg;
}

void UserRoleListMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_request()) {
      if (request_ != NULL) request_->::com::spplus::buff::UserRoleListMsg_Request::Clear();
    }
    if (has_response()) {
      if (response_ != NULL) response_->::com::spplus::buff::UserRoleListMsg_Response::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserRoleListMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.spplus.buff.UserRoleListMsg.Request request = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_response;
        break;
      }

      // optional .com.spplus.buff.UserRoleListMsg.Response response = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserRoleListMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.spplus.buff.UserRoleListMsg.Request request = 1;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->request(), output);
  }

  // optional .com.spplus.buff.UserRoleListMsg.Response response = 2;
  if (has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->response(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserRoleListMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.spplus.buff.UserRoleListMsg.Request request = 1;
  if (has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->request(), target);
  }

  // optional .com.spplus.buff.UserRoleListMsg.Response response = 2;
  if (has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->response(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserRoleListMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.spplus.buff.UserRoleListMsg.Request request = 1;
    if (has_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->request());
    }

    // optional .com.spplus.buff.UserRoleListMsg.Response response = 2;
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->response());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserRoleListMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserRoleListMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserRoleListMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserRoleListMsg::MergeFrom(const UserRoleListMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request()) {
      mutable_request()->::com::spplus::buff::UserRoleListMsg_Request::MergeFrom(from.request());
    }
    if (from.has_response()) {
      mutable_response()->::com::spplus::buff::UserRoleListMsg_Response::MergeFrom(from.response());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserRoleListMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserRoleListMsg::CopyFrom(const UserRoleListMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserRoleListMsg::IsInitialized() const {

  return true;
}

void UserRoleListMsg::Swap(UserRoleListMsg* other) {
  if (other != this) {
    std::swap(request_, other->request_);
    std::swap(response_, other->response_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserRoleListMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserRoleListMsg_descriptor_;
  metadata.reflection = UserRoleListMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserMgrMsg_Request::kMgrsqlFieldNumber;
#endif  // !_MSC_VER

UserMgrMsg_Request::UserMgrMsg_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserMgrMsg_Request::InitAsDefaultInstance() {
}

UserMgrMsg_Request::UserMgrMsg_Request(const UserMgrMsg_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserMgrMsg_Request::SharedCtor() {
  _cached_size_ = 0;
  mgrsql_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserMgrMsg_Request::~UserMgrMsg_Request() {
  SharedDtor();
}

void UserMgrMsg_Request::SharedDtor() {
  if (mgrsql_ != &::google::protobuf::internal::kEmptyString) {
    delete mgrsql_;
  }
  if (this != default_instance_) {
  }
}

void UserMgrMsg_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserMgrMsg_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserMgrMsg_Request_descriptor_;
}

const UserMgrMsg_Request& UserMgrMsg_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

UserMgrMsg_Request* UserMgrMsg_Request::default_instance_ = NULL;

UserMgrMsg_Request* UserMgrMsg_Request::New() const {
  return new UserMgrMsg_Request;
}

void UserMgrMsg_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_mgrsql()) {
      if (mgrsql_ != &::google::protobuf::internal::kEmptyString) {
        mgrsql_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserMgrMsg_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes mgrsql = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mgrsql()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserMgrMsg_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes mgrsql = 1;
  if (has_mgrsql()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->mgrsql(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserMgrMsg_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes mgrsql = 1;
  if (has_mgrsql()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->mgrsql(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserMgrMsg_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes mgrsql = 1;
    if (has_mgrsql()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mgrsql());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserMgrMsg_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserMgrMsg_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserMgrMsg_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserMgrMsg_Request::MergeFrom(const UserMgrMsg_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mgrsql()) {
      set_mgrsql(from.mgrsql());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserMgrMsg_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserMgrMsg_Request::CopyFrom(const UserMgrMsg_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserMgrMsg_Request::IsInitialized() const {

  return true;
}

void UserMgrMsg_Request::Swap(UserMgrMsg_Request* other) {
  if (other != this) {
    std::swap(mgrsql_, other->mgrsql_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserMgrMsg_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserMgrMsg_Request_descriptor_;
  metadata.reflection = UserMgrMsg_Request_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int UserMgrMsg_Response::kRescodeFieldNumber;
#endif  // !_MSC_VER

UserMgrMsg_Response::UserMgrMsg_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserMgrMsg_Response::InitAsDefaultInstance() {
}

UserMgrMsg_Response::UserMgrMsg_Response(const UserMgrMsg_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserMgrMsg_Response::SharedCtor() {
  _cached_size_ = 0;
  rescode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserMgrMsg_Response::~UserMgrMsg_Response() {
  SharedDtor();
}

void UserMgrMsg_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserMgrMsg_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserMgrMsg_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserMgrMsg_Response_descriptor_;
}

const UserMgrMsg_Response& UserMgrMsg_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

UserMgrMsg_Response* UserMgrMsg_Response::default_instance_ = NULL;

UserMgrMsg_Response* UserMgrMsg_Response::New() const {
  return new UserMgrMsg_Response;
}

void UserMgrMsg_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rescode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserMgrMsg_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 rescode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rescode_)));
          set_has_rescode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserMgrMsg_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 rescode = 1;
  if (has_rescode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rescode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserMgrMsg_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 rescode = 1;
  if (has_rescode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rescode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserMgrMsg_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 rescode = 1;
    if (has_rescode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rescode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserMgrMsg_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserMgrMsg_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserMgrMsg_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserMgrMsg_Response::MergeFrom(const UserMgrMsg_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rescode()) {
      set_rescode(from.rescode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserMgrMsg_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserMgrMsg_Response::CopyFrom(const UserMgrMsg_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserMgrMsg_Response::IsInitialized() const {

  return true;
}

void UserMgrMsg_Response::Swap(UserMgrMsg_Response* other) {
  if (other != this) {
    std::swap(rescode_, other->rescode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserMgrMsg_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserMgrMsg_Response_descriptor_;
  metadata.reflection = UserMgrMsg_Response_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int UserMgrMsg::kRequestFieldNumber;
const int UserMgrMsg::kResponseFieldNumber;
#endif  // !_MSC_VER

UserMgrMsg::UserMgrMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserMgrMsg::InitAsDefaultInstance() {
  request_ = const_cast< ::com::spplus::buff::UserMgrMsg_Request*>(&::com::spplus::buff::UserMgrMsg_Request::default_instance());
  response_ = const_cast< ::com::spplus::buff::UserMgrMsg_Response*>(&::com::spplus::buff::UserMgrMsg_Response::default_instance());
}

UserMgrMsg::UserMgrMsg(const UserMgrMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserMgrMsg::SharedCtor() {
  _cached_size_ = 0;
  request_ = NULL;
  response_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserMgrMsg::~UserMgrMsg() {
  SharedDtor();
}

void UserMgrMsg::SharedDtor() {
  if (this != default_instance_) {
    delete request_;
    delete response_;
  }
}

void UserMgrMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserMgrMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserMgrMsg_descriptor_;
}

const UserMgrMsg& UserMgrMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

UserMgrMsg* UserMgrMsg::default_instance_ = NULL;

UserMgrMsg* UserMgrMsg::New() const {
  return new UserMgrMsg;
}

void UserMgrMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_request()) {
      if (request_ != NULL) request_->::com::spplus::buff::UserMgrMsg_Request::Clear();
    }
    if (has_response()) {
      if (response_ != NULL) response_->::com::spplus::buff::UserMgrMsg_Response::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserMgrMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.spplus.buff.UserMgrMsg.Request request = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_response;
        break;
      }

      // optional .com.spplus.buff.UserMgrMsg.Response response = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserMgrMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.spplus.buff.UserMgrMsg.Request request = 1;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->request(), output);
  }

  // optional .com.spplus.buff.UserMgrMsg.Response response = 2;
  if (has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->response(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserMgrMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.spplus.buff.UserMgrMsg.Request request = 1;
  if (has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->request(), target);
  }

  // optional .com.spplus.buff.UserMgrMsg.Response response = 2;
  if (has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->response(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserMgrMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.spplus.buff.UserMgrMsg.Request request = 1;
    if (has_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->request());
    }

    // optional .com.spplus.buff.UserMgrMsg.Response response = 2;
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->response());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserMgrMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserMgrMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserMgrMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserMgrMsg::MergeFrom(const UserMgrMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request()) {
      mutable_request()->::com::spplus::buff::UserMgrMsg_Request::MergeFrom(from.request());
    }
    if (from.has_response()) {
      mutable_response()->::com::spplus::buff::UserMgrMsg_Response::MergeFrom(from.response());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserMgrMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserMgrMsg::CopyFrom(const UserMgrMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserMgrMsg::IsInitialized() const {

  return true;
}

void UserMgrMsg::Swap(UserMgrMsg* other) {
  if (other != this) {
    std::swap(request_, other->request_);
    std::swap(response_, other->response_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserMgrMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserMgrMsg_descriptor_;
  metadata.reflection = UserMgrMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StationTypeMgrMsg_Request::kMgrsqlFieldNumber;
#endif  // !_MSC_VER

StationTypeMgrMsg_Request::StationTypeMgrMsg_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StationTypeMgrMsg_Request::InitAsDefaultInstance() {
}

StationTypeMgrMsg_Request::StationTypeMgrMsg_Request(const StationTypeMgrMsg_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StationTypeMgrMsg_Request::SharedCtor() {
  _cached_size_ = 0;
  mgrsql_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StationTypeMgrMsg_Request::~StationTypeMgrMsg_Request() {
  SharedDtor();
}

void StationTypeMgrMsg_Request::SharedDtor() {
  if (mgrsql_ != &::google::protobuf::internal::kEmptyString) {
    delete mgrsql_;
  }
  if (this != default_instance_) {
  }
}

void StationTypeMgrMsg_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StationTypeMgrMsg_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StationTypeMgrMsg_Request_descriptor_;
}

const StationTypeMgrMsg_Request& StationTypeMgrMsg_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

StationTypeMgrMsg_Request* StationTypeMgrMsg_Request::default_instance_ = NULL;

StationTypeMgrMsg_Request* StationTypeMgrMsg_Request::New() const {
  return new StationTypeMgrMsg_Request;
}

void StationTypeMgrMsg_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_mgrsql()) {
      if (mgrsql_ != &::google::protobuf::internal::kEmptyString) {
        mgrsql_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StationTypeMgrMsg_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes mgrsql = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mgrsql()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StationTypeMgrMsg_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes mgrsql = 1;
  if (has_mgrsql()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->mgrsql(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StationTypeMgrMsg_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes mgrsql = 1;
  if (has_mgrsql()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->mgrsql(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StationTypeMgrMsg_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes mgrsql = 1;
    if (has_mgrsql()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mgrsql());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StationTypeMgrMsg_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StationTypeMgrMsg_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StationTypeMgrMsg_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StationTypeMgrMsg_Request::MergeFrom(const StationTypeMgrMsg_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mgrsql()) {
      set_mgrsql(from.mgrsql());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StationTypeMgrMsg_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StationTypeMgrMsg_Request::CopyFrom(const StationTypeMgrMsg_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StationTypeMgrMsg_Request::IsInitialized() const {

  return true;
}

void StationTypeMgrMsg_Request::Swap(StationTypeMgrMsg_Request* other) {
  if (other != this) {
    std::swap(mgrsql_, other->mgrsql_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StationTypeMgrMsg_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StationTypeMgrMsg_Request_descriptor_;
  metadata.reflection = StationTypeMgrMsg_Request_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int StationTypeMgrMsg_Response::kRescodeFieldNumber;
#endif  // !_MSC_VER

StationTypeMgrMsg_Response::StationTypeMgrMsg_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StationTypeMgrMsg_Response::InitAsDefaultInstance() {
}

StationTypeMgrMsg_Response::StationTypeMgrMsg_Response(const StationTypeMgrMsg_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StationTypeMgrMsg_Response::SharedCtor() {
  _cached_size_ = 0;
  rescode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StationTypeMgrMsg_Response::~StationTypeMgrMsg_Response() {
  SharedDtor();
}

void StationTypeMgrMsg_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StationTypeMgrMsg_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StationTypeMgrMsg_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StationTypeMgrMsg_Response_descriptor_;
}

const StationTypeMgrMsg_Response& StationTypeMgrMsg_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

StationTypeMgrMsg_Response* StationTypeMgrMsg_Response::default_instance_ = NULL;

StationTypeMgrMsg_Response* StationTypeMgrMsg_Response::New() const {
  return new StationTypeMgrMsg_Response;
}

void StationTypeMgrMsg_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rescode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StationTypeMgrMsg_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 rescode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rescode_)));
          set_has_rescode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StationTypeMgrMsg_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 rescode = 1;
  if (has_rescode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rescode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StationTypeMgrMsg_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 rescode = 1;
  if (has_rescode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rescode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StationTypeMgrMsg_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 rescode = 1;
    if (has_rescode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rescode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StationTypeMgrMsg_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StationTypeMgrMsg_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StationTypeMgrMsg_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StationTypeMgrMsg_Response::MergeFrom(const StationTypeMgrMsg_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rescode()) {
      set_rescode(from.rescode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StationTypeMgrMsg_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StationTypeMgrMsg_Response::CopyFrom(const StationTypeMgrMsg_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StationTypeMgrMsg_Response::IsInitialized() const {

  return true;
}

void StationTypeMgrMsg_Response::Swap(StationTypeMgrMsg_Response* other) {
  if (other != this) {
    std::swap(rescode_, other->rescode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StationTypeMgrMsg_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StationTypeMgrMsg_Response_descriptor_;
  metadata.reflection = StationTypeMgrMsg_Response_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int StationTypeMgrMsg::kRequestFieldNumber;
const int StationTypeMgrMsg::kResponseFieldNumber;
#endif  // !_MSC_VER

StationTypeMgrMsg::StationTypeMgrMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StationTypeMgrMsg::InitAsDefaultInstance() {
  request_ = const_cast< ::com::spplus::buff::StationTypeMgrMsg_Request*>(&::com::spplus::buff::StationTypeMgrMsg_Request::default_instance());
  response_ = const_cast< ::com::spplus::buff::StationTypeMgrMsg_Response*>(&::com::spplus::buff::StationTypeMgrMsg_Response::default_instance());
}

StationTypeMgrMsg::StationTypeMgrMsg(const StationTypeMgrMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StationTypeMgrMsg::SharedCtor() {
  _cached_size_ = 0;
  request_ = NULL;
  response_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StationTypeMgrMsg::~StationTypeMgrMsg() {
  SharedDtor();
}

void StationTypeMgrMsg::SharedDtor() {
  if (this != default_instance_) {
    delete request_;
    delete response_;
  }
}

void StationTypeMgrMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StationTypeMgrMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StationTypeMgrMsg_descriptor_;
}

const StationTypeMgrMsg& StationTypeMgrMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

StationTypeMgrMsg* StationTypeMgrMsg::default_instance_ = NULL;

StationTypeMgrMsg* StationTypeMgrMsg::New() const {
  return new StationTypeMgrMsg;
}

void StationTypeMgrMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_request()) {
      if (request_ != NULL) request_->::com::spplus::buff::StationTypeMgrMsg_Request::Clear();
    }
    if (has_response()) {
      if (response_ != NULL) response_->::com::spplus::buff::StationTypeMgrMsg_Response::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StationTypeMgrMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.spplus.buff.StationTypeMgrMsg.Request request = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_response;
        break;
      }

      // optional .com.spplus.buff.StationTypeMgrMsg.Response response = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StationTypeMgrMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.spplus.buff.StationTypeMgrMsg.Request request = 1;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->request(), output);
  }

  // optional .com.spplus.buff.StationTypeMgrMsg.Response response = 2;
  if (has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->response(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StationTypeMgrMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.spplus.buff.StationTypeMgrMsg.Request request = 1;
  if (has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->request(), target);
  }

  // optional .com.spplus.buff.StationTypeMgrMsg.Response response = 2;
  if (has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->response(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StationTypeMgrMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.spplus.buff.StationTypeMgrMsg.Request request = 1;
    if (has_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->request());
    }

    // optional .com.spplus.buff.StationTypeMgrMsg.Response response = 2;
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->response());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StationTypeMgrMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StationTypeMgrMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StationTypeMgrMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StationTypeMgrMsg::MergeFrom(const StationTypeMgrMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request()) {
      mutable_request()->::com::spplus::buff::StationTypeMgrMsg_Request::MergeFrom(from.request());
    }
    if (from.has_response()) {
      mutable_response()->::com::spplus::buff::StationTypeMgrMsg_Response::MergeFrom(from.response());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StationTypeMgrMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StationTypeMgrMsg::CopyFrom(const StationTypeMgrMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StationTypeMgrMsg::IsInitialized() const {

  return true;
}

void StationTypeMgrMsg::Swap(StationTypeMgrMsg* other) {
  if (other != this) {
    std::swap(request_, other->request_);
    std::swap(response_, other->response_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StationTypeMgrMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StationTypeMgrMsg_descriptor_;
  metadata.reflection = StationTypeMgrMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StationMgrMsg_Request::kReqdateFieldNumber;
const int StationMgrMsg_Request::kStationlistFieldNumber;
#endif  // !_MSC_VER

StationMgrMsg_Request::StationMgrMsg_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StationMgrMsg_Request::InitAsDefaultInstance() {
}

StationMgrMsg_Request::StationMgrMsg_Request(const StationMgrMsg_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StationMgrMsg_Request::SharedCtor() {
  _cached_size_ = 0;
  reqdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StationMgrMsg_Request::~StationMgrMsg_Request() {
  SharedDtor();
}

void StationMgrMsg_Request::SharedDtor() {
  if (reqdate_ != &::google::protobuf::internal::kEmptyString) {
    delete reqdate_;
  }
  if (this != default_instance_) {
  }
}

void StationMgrMsg_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StationMgrMsg_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StationMgrMsg_Request_descriptor_;
}

const StationMgrMsg_Request& StationMgrMsg_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

StationMgrMsg_Request* StationMgrMsg_Request::default_instance_ = NULL;

StationMgrMsg_Request* StationMgrMsg_Request::New() const {
  return new StationMgrMsg_Request;
}

void StationMgrMsg_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_reqdate()) {
      if (reqdate_ != &::google::protobuf::internal::kEmptyString) {
        reqdate_->clear();
      }
    }
  }
  stationlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StationMgrMsg_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes reqdate = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_reqdate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stationlist;
        break;
      }

      // repeated .com.spplus.buff.StationBean stationlist = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stationlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stationlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stationlist;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StationMgrMsg_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes reqdate = 1;
  if (has_reqdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->reqdate(), output);
  }

  // repeated .com.spplus.buff.StationBean stationlist = 2;
  for (int i = 0; i < this->stationlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stationlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StationMgrMsg_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes reqdate = 1;
  if (has_reqdate()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->reqdate(), target);
  }

  // repeated .com.spplus.buff.StationBean stationlist = 2;
  for (int i = 0; i < this->stationlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stationlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StationMgrMsg_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes reqdate = 1;
    if (has_reqdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->reqdate());
    }

  }
  // repeated .com.spplus.buff.StationBean stationlist = 2;
  total_size += 1 * this->stationlist_size();
  for (int i = 0; i < this->stationlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stationlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StationMgrMsg_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StationMgrMsg_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StationMgrMsg_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StationMgrMsg_Request::MergeFrom(const StationMgrMsg_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  stationlist_.MergeFrom(from.stationlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reqdate()) {
      set_reqdate(from.reqdate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StationMgrMsg_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StationMgrMsg_Request::CopyFrom(const StationMgrMsg_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StationMgrMsg_Request::IsInitialized() const {

  return true;
}

void StationMgrMsg_Request::Swap(StationMgrMsg_Request* other) {
  if (other != this) {
    std::swap(reqdate_, other->reqdate_);
    stationlist_.Swap(&other->stationlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StationMgrMsg_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StationMgrMsg_Request_descriptor_;
  metadata.reflection = StationMgrMsg_Request_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int StationMgrMsg_Response::kRescodeFieldNumber;
#endif  // !_MSC_VER

StationMgrMsg_Response::StationMgrMsg_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StationMgrMsg_Response::InitAsDefaultInstance() {
}

StationMgrMsg_Response::StationMgrMsg_Response(const StationMgrMsg_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StationMgrMsg_Response::SharedCtor() {
  _cached_size_ = 0;
  rescode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StationMgrMsg_Response::~StationMgrMsg_Response() {
  SharedDtor();
}

void StationMgrMsg_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StationMgrMsg_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StationMgrMsg_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StationMgrMsg_Response_descriptor_;
}

const StationMgrMsg_Response& StationMgrMsg_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

StationMgrMsg_Response* StationMgrMsg_Response::default_instance_ = NULL;

StationMgrMsg_Response* StationMgrMsg_Response::New() const {
  return new StationMgrMsg_Response;
}

void StationMgrMsg_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rescode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StationMgrMsg_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 rescode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rescode_)));
          set_has_rescode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StationMgrMsg_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 rescode = 1;
  if (has_rescode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rescode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StationMgrMsg_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 rescode = 1;
  if (has_rescode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rescode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StationMgrMsg_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 rescode = 1;
    if (has_rescode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rescode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StationMgrMsg_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StationMgrMsg_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StationMgrMsg_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StationMgrMsg_Response::MergeFrom(const StationMgrMsg_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rescode()) {
      set_rescode(from.rescode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StationMgrMsg_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StationMgrMsg_Response::CopyFrom(const StationMgrMsg_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StationMgrMsg_Response::IsInitialized() const {

  return true;
}

void StationMgrMsg_Response::Swap(StationMgrMsg_Response* other) {
  if (other != this) {
    std::swap(rescode_, other->rescode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StationMgrMsg_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StationMgrMsg_Response_descriptor_;
  metadata.reflection = StationMgrMsg_Response_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int StationMgrMsg::kRequestFieldNumber;
const int StationMgrMsg::kResponseFieldNumber;
#endif  // !_MSC_VER

StationMgrMsg::StationMgrMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StationMgrMsg::InitAsDefaultInstance() {
  request_ = const_cast< ::com::spplus::buff::StationMgrMsg_Request*>(&::com::spplus::buff::StationMgrMsg_Request::default_instance());
  response_ = const_cast< ::com::spplus::buff::StationMgrMsg_Response*>(&::com::spplus::buff::StationMgrMsg_Response::default_instance());
}

StationMgrMsg::StationMgrMsg(const StationMgrMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StationMgrMsg::SharedCtor() {
  _cached_size_ = 0;
  request_ = NULL;
  response_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StationMgrMsg::~StationMgrMsg() {
  SharedDtor();
}

void StationMgrMsg::SharedDtor() {
  if (this != default_instance_) {
    delete request_;
    delete response_;
  }
}

void StationMgrMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StationMgrMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StationMgrMsg_descriptor_;
}

const StationMgrMsg& StationMgrMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

StationMgrMsg* StationMgrMsg::default_instance_ = NULL;

StationMgrMsg* StationMgrMsg::New() const {
  return new StationMgrMsg;
}

void StationMgrMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_request()) {
      if (request_ != NULL) request_->::com::spplus::buff::StationMgrMsg_Request::Clear();
    }
    if (has_response()) {
      if (response_ != NULL) response_->::com::spplus::buff::StationMgrMsg_Response::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StationMgrMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.spplus.buff.StationMgrMsg.Request request = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_response;
        break;
      }

      // optional .com.spplus.buff.StationMgrMsg.Response response = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StationMgrMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.spplus.buff.StationMgrMsg.Request request = 1;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->request(), output);
  }

  // optional .com.spplus.buff.StationMgrMsg.Response response = 2;
  if (has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->response(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StationMgrMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.spplus.buff.StationMgrMsg.Request request = 1;
  if (has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->request(), target);
  }

  // optional .com.spplus.buff.StationMgrMsg.Response response = 2;
  if (has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->response(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StationMgrMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.spplus.buff.StationMgrMsg.Request request = 1;
    if (has_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->request());
    }

    // optional .com.spplus.buff.StationMgrMsg.Response response = 2;
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->response());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StationMgrMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StationMgrMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StationMgrMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StationMgrMsg::MergeFrom(const StationMgrMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request()) {
      mutable_request()->::com::spplus::buff::StationMgrMsg_Request::MergeFrom(from.request());
    }
    if (from.has_response()) {
      mutable_response()->::com::spplus::buff::StationMgrMsg_Response::MergeFrom(from.response());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StationMgrMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StationMgrMsg::CopyFrom(const StationMgrMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StationMgrMsg::IsInitialized() const {

  return true;
}

void StationMgrMsg::Swap(StationMgrMsg* other) {
  if (other != this) {
    std::swap(request_, other->request_);
    std::swap(response_, other->response_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StationMgrMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StationMgrMsg_descriptor_;
  metadata.reflection = StationMgrMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RuleListMsg_Request::kReqdateFieldNumber;
#endif  // !_MSC_VER

RuleListMsg_Request::RuleListMsg_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RuleListMsg_Request::InitAsDefaultInstance() {
}

RuleListMsg_Request::RuleListMsg_Request(const RuleListMsg_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RuleListMsg_Request::SharedCtor() {
  _cached_size_ = 0;
  reqdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RuleListMsg_Request::~RuleListMsg_Request() {
  SharedDtor();
}

void RuleListMsg_Request::SharedDtor() {
  if (reqdate_ != &::google::protobuf::internal::kEmptyString) {
    delete reqdate_;
  }
  if (this != default_instance_) {
  }
}

void RuleListMsg_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RuleListMsg_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RuleListMsg_Request_descriptor_;
}

const RuleListMsg_Request& RuleListMsg_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

RuleListMsg_Request* RuleListMsg_Request::default_instance_ = NULL;

RuleListMsg_Request* RuleListMsg_Request::New() const {
  return new RuleListMsg_Request;
}

void RuleListMsg_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_reqdate()) {
      if (reqdate_ != &::google::protobuf::internal::kEmptyString) {
        reqdate_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RuleListMsg_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes reqdate = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_reqdate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RuleListMsg_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes reqdate = 1;
  if (has_reqdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->reqdate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RuleListMsg_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes reqdate = 1;
  if (has_reqdate()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->reqdate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RuleListMsg_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes reqdate = 1;
    if (has_reqdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->reqdate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RuleListMsg_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RuleListMsg_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RuleListMsg_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RuleListMsg_Request::MergeFrom(const RuleListMsg_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reqdate()) {
      set_reqdate(from.reqdate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RuleListMsg_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RuleListMsg_Request::CopyFrom(const RuleListMsg_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RuleListMsg_Request::IsInitialized() const {

  return true;
}

void RuleListMsg_Request::Swap(RuleListMsg_Request* other) {
  if (other != this) {
    std::swap(reqdate_, other->reqdate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RuleListMsg_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RuleListMsg_Request_descriptor_;
  metadata.reflection = RuleListMsg_Request_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int RuleListMsg_Response::kRescodeFieldNumber;
const int RuleListMsg_Response::kRulelistFieldNumber;
#endif  // !_MSC_VER

RuleListMsg_Response::RuleListMsg_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RuleListMsg_Response::InitAsDefaultInstance() {
}

RuleListMsg_Response::RuleListMsg_Response(const RuleListMsg_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RuleListMsg_Response::SharedCtor() {
  _cached_size_ = 0;
  rescode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RuleListMsg_Response::~RuleListMsg_Response() {
  SharedDtor();
}

void RuleListMsg_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RuleListMsg_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RuleListMsg_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RuleListMsg_Response_descriptor_;
}

const RuleListMsg_Response& RuleListMsg_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

RuleListMsg_Response* RuleListMsg_Response::default_instance_ = NULL;

RuleListMsg_Response* RuleListMsg_Response::New() const {
  return new RuleListMsg_Response;
}

void RuleListMsg_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rescode_ = 0u;
  }
  rulelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RuleListMsg_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 rescode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rescode_)));
          set_has_rescode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rulelist;
        break;
      }

      // repeated .com.spplus.buff.RuleBean rulelist = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rulelist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rulelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rulelist;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RuleListMsg_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 rescode = 1;
  if (has_rescode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rescode(), output);
  }

  // repeated .com.spplus.buff.RuleBean rulelist = 2;
  for (int i = 0; i < this->rulelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rulelist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RuleListMsg_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 rescode = 1;
  if (has_rescode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rescode(), target);
  }

  // repeated .com.spplus.buff.RuleBean rulelist = 2;
  for (int i = 0; i < this->rulelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rulelist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RuleListMsg_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 rescode = 1;
    if (has_rescode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rescode());
    }

  }
  // repeated .com.spplus.buff.RuleBean rulelist = 2;
  total_size += 1 * this->rulelist_size();
  for (int i = 0; i < this->rulelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rulelist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RuleListMsg_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RuleListMsg_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RuleListMsg_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RuleListMsg_Response::MergeFrom(const RuleListMsg_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  rulelist_.MergeFrom(from.rulelist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rescode()) {
      set_rescode(from.rescode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RuleListMsg_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RuleListMsg_Response::CopyFrom(const RuleListMsg_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RuleListMsg_Response::IsInitialized() const {

  return true;
}

void RuleListMsg_Response::Swap(RuleListMsg_Response* other) {
  if (other != this) {
    std::swap(rescode_, other->rescode_);
    rulelist_.Swap(&other->rulelist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RuleListMsg_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RuleListMsg_Response_descriptor_;
  metadata.reflection = RuleListMsg_Response_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int RuleListMsg::kRequestFieldNumber;
const int RuleListMsg::kResponseFieldNumber;
#endif  // !_MSC_VER

RuleListMsg::RuleListMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RuleListMsg::InitAsDefaultInstance() {
  request_ = const_cast< ::com::spplus::buff::RuleListMsg_Request*>(&::com::spplus::buff::RuleListMsg_Request::default_instance());
  response_ = const_cast< ::com::spplus::buff::RuleListMsg_Response*>(&::com::spplus::buff::RuleListMsg_Response::default_instance());
}

RuleListMsg::RuleListMsg(const RuleListMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RuleListMsg::SharedCtor() {
  _cached_size_ = 0;
  request_ = NULL;
  response_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RuleListMsg::~RuleListMsg() {
  SharedDtor();
}

void RuleListMsg::SharedDtor() {
  if (this != default_instance_) {
    delete request_;
    delete response_;
  }
}

void RuleListMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RuleListMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RuleListMsg_descriptor_;
}

const RuleListMsg& RuleListMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

RuleListMsg* RuleListMsg::default_instance_ = NULL;

RuleListMsg* RuleListMsg::New() const {
  return new RuleListMsg;
}

void RuleListMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_request()) {
      if (request_ != NULL) request_->::com::spplus::buff::RuleListMsg_Request::Clear();
    }
    if (has_response()) {
      if (response_ != NULL) response_->::com::spplus::buff::RuleListMsg_Response::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RuleListMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.spplus.buff.RuleListMsg.Request request = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_response;
        break;
      }

      // optional .com.spplus.buff.RuleListMsg.Response response = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RuleListMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.spplus.buff.RuleListMsg.Request request = 1;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->request(), output);
  }

  // optional .com.spplus.buff.RuleListMsg.Response response = 2;
  if (has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->response(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RuleListMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.spplus.buff.RuleListMsg.Request request = 1;
  if (has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->request(), target);
  }

  // optional .com.spplus.buff.RuleListMsg.Response response = 2;
  if (has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->response(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RuleListMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.spplus.buff.RuleListMsg.Request request = 1;
    if (has_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->request());
    }

    // optional .com.spplus.buff.RuleListMsg.Response response = 2;
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->response());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RuleListMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RuleListMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RuleListMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RuleListMsg::MergeFrom(const RuleListMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request()) {
      mutable_request()->::com::spplus::buff::RuleListMsg_Request::MergeFrom(from.request());
    }
    if (from.has_response()) {
      mutable_response()->::com::spplus::buff::RuleListMsg_Response::MergeFrom(from.response());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RuleListMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RuleListMsg::CopyFrom(const RuleListMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RuleListMsg::IsInitialized() const {

  return true;
}

void RuleListMsg::Swap(RuleListMsg* other) {
  if (other != this) {
    std::swap(request_, other->request_);
    std::swap(response_, other->response_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RuleListMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RuleListMsg_descriptor_;
  metadata.reflection = RuleListMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RuleMgrMsg_Request::kMgrsqlFieldNumber;
#endif  // !_MSC_VER

RuleMgrMsg_Request::RuleMgrMsg_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RuleMgrMsg_Request::InitAsDefaultInstance() {
}

RuleMgrMsg_Request::RuleMgrMsg_Request(const RuleMgrMsg_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RuleMgrMsg_Request::SharedCtor() {
  _cached_size_ = 0;
  mgrsql_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RuleMgrMsg_Request::~RuleMgrMsg_Request() {
  SharedDtor();
}

void RuleMgrMsg_Request::SharedDtor() {
  if (mgrsql_ != &::google::protobuf::internal::kEmptyString) {
    delete mgrsql_;
  }
  if (this != default_instance_) {
  }
}

void RuleMgrMsg_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RuleMgrMsg_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RuleMgrMsg_Request_descriptor_;
}

const RuleMgrMsg_Request& RuleMgrMsg_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

RuleMgrMsg_Request* RuleMgrMsg_Request::default_instance_ = NULL;

RuleMgrMsg_Request* RuleMgrMsg_Request::New() const {
  return new RuleMgrMsg_Request;
}

void RuleMgrMsg_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_mgrsql()) {
      if (mgrsql_ != &::google::protobuf::internal::kEmptyString) {
        mgrsql_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RuleMgrMsg_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes mgrsql = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mgrsql()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RuleMgrMsg_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes mgrsql = 1;
  if (has_mgrsql()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->mgrsql(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RuleMgrMsg_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes mgrsql = 1;
  if (has_mgrsql()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->mgrsql(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RuleMgrMsg_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes mgrsql = 1;
    if (has_mgrsql()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mgrsql());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RuleMgrMsg_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RuleMgrMsg_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RuleMgrMsg_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RuleMgrMsg_Request::MergeFrom(const RuleMgrMsg_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mgrsql()) {
      set_mgrsql(from.mgrsql());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RuleMgrMsg_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RuleMgrMsg_Request::CopyFrom(const RuleMgrMsg_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RuleMgrMsg_Request::IsInitialized() const {

  return true;
}

void RuleMgrMsg_Request::Swap(RuleMgrMsg_Request* other) {
  if (other != this) {
    std::swap(mgrsql_, other->mgrsql_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RuleMgrMsg_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RuleMgrMsg_Request_descriptor_;
  metadata.reflection = RuleMgrMsg_Request_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int RuleMgrMsg_Response::kRescodeFieldNumber;
#endif  // !_MSC_VER

RuleMgrMsg_Response::RuleMgrMsg_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RuleMgrMsg_Response::InitAsDefaultInstance() {
}

RuleMgrMsg_Response::RuleMgrMsg_Response(const RuleMgrMsg_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RuleMgrMsg_Response::SharedCtor() {
  _cached_size_ = 0;
  rescode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RuleMgrMsg_Response::~RuleMgrMsg_Response() {
  SharedDtor();
}

void RuleMgrMsg_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RuleMgrMsg_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RuleMgrMsg_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RuleMgrMsg_Response_descriptor_;
}

const RuleMgrMsg_Response& RuleMgrMsg_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

RuleMgrMsg_Response* RuleMgrMsg_Response::default_instance_ = NULL;

RuleMgrMsg_Response* RuleMgrMsg_Response::New() const {
  return new RuleMgrMsg_Response;
}

void RuleMgrMsg_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rescode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RuleMgrMsg_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 rescode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rescode_)));
          set_has_rescode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RuleMgrMsg_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 rescode = 1;
  if (has_rescode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rescode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RuleMgrMsg_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 rescode = 1;
  if (has_rescode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rescode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RuleMgrMsg_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 rescode = 1;
    if (has_rescode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rescode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RuleMgrMsg_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RuleMgrMsg_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RuleMgrMsg_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RuleMgrMsg_Response::MergeFrom(const RuleMgrMsg_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rescode()) {
      set_rescode(from.rescode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RuleMgrMsg_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RuleMgrMsg_Response::CopyFrom(const RuleMgrMsg_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RuleMgrMsg_Response::IsInitialized() const {

  return true;
}

void RuleMgrMsg_Response::Swap(RuleMgrMsg_Response* other) {
  if (other != this) {
    std::swap(rescode_, other->rescode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RuleMgrMsg_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RuleMgrMsg_Response_descriptor_;
  metadata.reflection = RuleMgrMsg_Response_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int RuleMgrMsg::kRequestFieldNumber;
const int RuleMgrMsg::kResponseFieldNumber;
#endif  // !_MSC_VER

RuleMgrMsg::RuleMgrMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RuleMgrMsg::InitAsDefaultInstance() {
  request_ = const_cast< ::com::spplus::buff::RuleMgrMsg_Request*>(&::com::spplus::buff::RuleMgrMsg_Request::default_instance());
  response_ = const_cast< ::com::spplus::buff::RuleMgrMsg_Response*>(&::com::spplus::buff::RuleMgrMsg_Response::default_instance());
}

RuleMgrMsg::RuleMgrMsg(const RuleMgrMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RuleMgrMsg::SharedCtor() {
  _cached_size_ = 0;
  request_ = NULL;
  response_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RuleMgrMsg::~RuleMgrMsg() {
  SharedDtor();
}

void RuleMgrMsg::SharedDtor() {
  if (this != default_instance_) {
    delete request_;
    delete response_;
  }
}

void RuleMgrMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RuleMgrMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RuleMgrMsg_descriptor_;
}

const RuleMgrMsg& RuleMgrMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

RuleMgrMsg* RuleMgrMsg::default_instance_ = NULL;

RuleMgrMsg* RuleMgrMsg::New() const {
  return new RuleMgrMsg;
}

void RuleMgrMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_request()) {
      if (request_ != NULL) request_->::com::spplus::buff::RuleMgrMsg_Request::Clear();
    }
    if (has_response()) {
      if (response_ != NULL) response_->::com::spplus::buff::RuleMgrMsg_Response::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RuleMgrMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.spplus.buff.RuleMgrMsg.Request request = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_response;
        break;
      }

      // optional .com.spplus.buff.RuleMgrMsg.Response response = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RuleMgrMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.spplus.buff.RuleMgrMsg.Request request = 1;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->request(), output);
  }

  // optional .com.spplus.buff.RuleMgrMsg.Response response = 2;
  if (has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->response(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RuleMgrMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.spplus.buff.RuleMgrMsg.Request request = 1;
  if (has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->request(), target);
  }

  // optional .com.spplus.buff.RuleMgrMsg.Response response = 2;
  if (has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->response(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RuleMgrMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.spplus.buff.RuleMgrMsg.Request request = 1;
    if (has_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->request());
    }

    // optional .com.spplus.buff.RuleMgrMsg.Response response = 2;
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->response());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RuleMgrMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RuleMgrMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RuleMgrMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RuleMgrMsg::MergeFrom(const RuleMgrMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request()) {
      mutable_request()->::com::spplus::buff::RuleMgrMsg_Request::MergeFrom(from.request());
    }
    if (from.has_response()) {
      mutable_response()->::com::spplus::buff::RuleMgrMsg_Response::MergeFrom(from.response());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RuleMgrMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RuleMgrMsg::CopyFrom(const RuleMgrMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RuleMgrMsg::IsInitialized() const {

  return true;
}

void RuleMgrMsg::Swap(RuleMgrMsg* other) {
  if (other != this) {
    std::swap(request_, other->request_);
    std::swap(response_, other->response_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RuleMgrMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RuleMgrMsg_descriptor_;
  metadata.reflection = RuleMgrMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StationRuleListMsg_Request::kReqdateFieldNumber;
#endif  // !_MSC_VER

StationRuleListMsg_Request::StationRuleListMsg_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StationRuleListMsg_Request::InitAsDefaultInstance() {
}

StationRuleListMsg_Request::StationRuleListMsg_Request(const StationRuleListMsg_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StationRuleListMsg_Request::SharedCtor() {
  _cached_size_ = 0;
  reqdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StationRuleListMsg_Request::~StationRuleListMsg_Request() {
  SharedDtor();
}

void StationRuleListMsg_Request::SharedDtor() {
  if (reqdate_ != &::google::protobuf::internal::kEmptyString) {
    delete reqdate_;
  }
  if (this != default_instance_) {
  }
}

void StationRuleListMsg_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StationRuleListMsg_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StationRuleListMsg_Request_descriptor_;
}

const StationRuleListMsg_Request& StationRuleListMsg_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

StationRuleListMsg_Request* StationRuleListMsg_Request::default_instance_ = NULL;

StationRuleListMsg_Request* StationRuleListMsg_Request::New() const {
  return new StationRuleListMsg_Request;
}

void StationRuleListMsg_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_reqdate()) {
      if (reqdate_ != &::google::protobuf::internal::kEmptyString) {
        reqdate_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StationRuleListMsg_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes reqdate = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_reqdate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StationRuleListMsg_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes reqdate = 1;
  if (has_reqdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->reqdate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StationRuleListMsg_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes reqdate = 1;
  if (has_reqdate()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->reqdate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StationRuleListMsg_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes reqdate = 1;
    if (has_reqdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->reqdate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StationRuleListMsg_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StationRuleListMsg_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StationRuleListMsg_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StationRuleListMsg_Request::MergeFrom(const StationRuleListMsg_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reqdate()) {
      set_reqdate(from.reqdate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StationRuleListMsg_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StationRuleListMsg_Request::CopyFrom(const StationRuleListMsg_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StationRuleListMsg_Request::IsInitialized() const {

  return true;
}

void StationRuleListMsg_Request::Swap(StationRuleListMsg_Request* other) {
  if (other != this) {
    std::swap(reqdate_, other->reqdate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StationRuleListMsg_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StationRuleListMsg_Request_descriptor_;
  metadata.reflection = StationRuleListMsg_Request_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int StationRuleListMsg_Response::kRescodeFieldNumber;
const int StationRuleListMsg_Response::kStarulelistFieldNumber;
#endif  // !_MSC_VER

StationRuleListMsg_Response::StationRuleListMsg_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StationRuleListMsg_Response::InitAsDefaultInstance() {
}

StationRuleListMsg_Response::StationRuleListMsg_Response(const StationRuleListMsg_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StationRuleListMsg_Response::SharedCtor() {
  _cached_size_ = 0;
  rescode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StationRuleListMsg_Response::~StationRuleListMsg_Response() {
  SharedDtor();
}

void StationRuleListMsg_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StationRuleListMsg_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StationRuleListMsg_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StationRuleListMsg_Response_descriptor_;
}

const StationRuleListMsg_Response& StationRuleListMsg_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

StationRuleListMsg_Response* StationRuleListMsg_Response::default_instance_ = NULL;

StationRuleListMsg_Response* StationRuleListMsg_Response::New() const {
  return new StationRuleListMsg_Response;
}

void StationRuleListMsg_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rescode_ = 0u;
  }
  starulelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StationRuleListMsg_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 rescode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rescode_)));
          set_has_rescode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_starulelist;
        break;
      }

      // repeated .com.spplus.buff.StationRuleBean starulelist = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_starulelist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_starulelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_starulelist;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StationRuleListMsg_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 rescode = 1;
  if (has_rescode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rescode(), output);
  }

  // repeated .com.spplus.buff.StationRuleBean starulelist = 2;
  for (int i = 0; i < this->starulelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->starulelist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StationRuleListMsg_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 rescode = 1;
  if (has_rescode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rescode(), target);
  }

  // repeated .com.spplus.buff.StationRuleBean starulelist = 2;
  for (int i = 0; i < this->starulelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->starulelist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StationRuleListMsg_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 rescode = 1;
    if (has_rescode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rescode());
    }

  }
  // repeated .com.spplus.buff.StationRuleBean starulelist = 2;
  total_size += 1 * this->starulelist_size();
  for (int i = 0; i < this->starulelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->starulelist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StationRuleListMsg_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StationRuleListMsg_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StationRuleListMsg_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StationRuleListMsg_Response::MergeFrom(const StationRuleListMsg_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  starulelist_.MergeFrom(from.starulelist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rescode()) {
      set_rescode(from.rescode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StationRuleListMsg_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StationRuleListMsg_Response::CopyFrom(const StationRuleListMsg_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StationRuleListMsg_Response::IsInitialized() const {

  return true;
}

void StationRuleListMsg_Response::Swap(StationRuleListMsg_Response* other) {
  if (other != this) {
    std::swap(rescode_, other->rescode_);
    starulelist_.Swap(&other->starulelist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StationRuleListMsg_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StationRuleListMsg_Response_descriptor_;
  metadata.reflection = StationRuleListMsg_Response_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int StationRuleListMsg::kRequestFieldNumber;
const int StationRuleListMsg::kResponseFieldNumber;
#endif  // !_MSC_VER

StationRuleListMsg::StationRuleListMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StationRuleListMsg::InitAsDefaultInstance() {
  request_ = const_cast< ::com::spplus::buff::StationRuleListMsg_Request*>(&::com::spplus::buff::StationRuleListMsg_Request::default_instance());
  response_ = const_cast< ::com::spplus::buff::StationRuleListMsg_Response*>(&::com::spplus::buff::StationRuleListMsg_Response::default_instance());
}

StationRuleListMsg::StationRuleListMsg(const StationRuleListMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StationRuleListMsg::SharedCtor() {
  _cached_size_ = 0;
  request_ = NULL;
  response_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StationRuleListMsg::~StationRuleListMsg() {
  SharedDtor();
}

void StationRuleListMsg::SharedDtor() {
  if (this != default_instance_) {
    delete request_;
    delete response_;
  }
}

void StationRuleListMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StationRuleListMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StationRuleListMsg_descriptor_;
}

const StationRuleListMsg& StationRuleListMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

StationRuleListMsg* StationRuleListMsg::default_instance_ = NULL;

StationRuleListMsg* StationRuleListMsg::New() const {
  return new StationRuleListMsg;
}

void StationRuleListMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_request()) {
      if (request_ != NULL) request_->::com::spplus::buff::StationRuleListMsg_Request::Clear();
    }
    if (has_response()) {
      if (response_ != NULL) response_->::com::spplus::buff::StationRuleListMsg_Response::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StationRuleListMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.spplus.buff.StationRuleListMsg.Request request = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_response;
        break;
      }

      // optional .com.spplus.buff.StationRuleListMsg.Response response = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StationRuleListMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.spplus.buff.StationRuleListMsg.Request request = 1;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->request(), output);
  }

  // optional .com.spplus.buff.StationRuleListMsg.Response response = 2;
  if (has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->response(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StationRuleListMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.spplus.buff.StationRuleListMsg.Request request = 1;
  if (has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->request(), target);
  }

  // optional .com.spplus.buff.StationRuleListMsg.Response response = 2;
  if (has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->response(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StationRuleListMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.spplus.buff.StationRuleListMsg.Request request = 1;
    if (has_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->request());
    }

    // optional .com.spplus.buff.StationRuleListMsg.Response response = 2;
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->response());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StationRuleListMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StationRuleListMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StationRuleListMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StationRuleListMsg::MergeFrom(const StationRuleListMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request()) {
      mutable_request()->::com::spplus::buff::StationRuleListMsg_Request::MergeFrom(from.request());
    }
    if (from.has_response()) {
      mutable_response()->::com::spplus::buff::StationRuleListMsg_Response::MergeFrom(from.response());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StationRuleListMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StationRuleListMsg::CopyFrom(const StationRuleListMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StationRuleListMsg::IsInitialized() const {

  return true;
}

void StationRuleListMsg::Swap(StationRuleListMsg* other) {
  if (other != this) {
    std::swap(request_, other->request_);
    std::swap(response_, other->response_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StationRuleListMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StationRuleListMsg_descriptor_;
  metadata.reflection = StationRuleListMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StationRuleMgrMsg_Request::kReqtypeFieldNumber;
const int StationRuleMgrMsg_Request::kMgrsqlFieldNumber;
const int StationRuleMgrMsg_Request::kStationrllistFieldNumber;
#endif  // !_MSC_VER

StationRuleMgrMsg_Request::StationRuleMgrMsg_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StationRuleMgrMsg_Request::InitAsDefaultInstance() {
}

StationRuleMgrMsg_Request::StationRuleMgrMsg_Request(const StationRuleMgrMsg_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StationRuleMgrMsg_Request::SharedCtor() {
  _cached_size_ = 0;
  reqtype_ = 0u;
  mgrsql_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StationRuleMgrMsg_Request::~StationRuleMgrMsg_Request() {
  SharedDtor();
}

void StationRuleMgrMsg_Request::SharedDtor() {
  if (mgrsql_ != &::google::protobuf::internal::kEmptyString) {
    delete mgrsql_;
  }
  if (this != default_instance_) {
  }
}

void StationRuleMgrMsg_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StationRuleMgrMsg_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StationRuleMgrMsg_Request_descriptor_;
}

const StationRuleMgrMsg_Request& StationRuleMgrMsg_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

StationRuleMgrMsg_Request* StationRuleMgrMsg_Request::default_instance_ = NULL;

StationRuleMgrMsg_Request* StationRuleMgrMsg_Request::New() const {
  return new StationRuleMgrMsg_Request;
}

void StationRuleMgrMsg_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reqtype_ = 0u;
    if (has_mgrsql()) {
      if (mgrsql_ != &::google::protobuf::internal::kEmptyString) {
        mgrsql_->clear();
      }
    }
  }
  stationrllist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StationRuleMgrMsg_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 reqtype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reqtype_)));
          set_has_reqtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mgrsql;
        break;
      }

      // optional bytes mgrsql = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mgrsql:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mgrsql()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stationrllist;
        break;
      }

      // repeated .com.spplus.buff.StationRuleBean stationrllist = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stationrllist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stationrllist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stationrllist;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StationRuleMgrMsg_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 reqtype = 1;
  if (has_reqtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reqtype(), output);
  }

  // optional bytes mgrsql = 2;
  if (has_mgrsql()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->mgrsql(), output);
  }

  // repeated .com.spplus.buff.StationRuleBean stationrllist = 3;
  for (int i = 0; i < this->stationrllist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->stationrllist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StationRuleMgrMsg_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 reqtype = 1;
  if (has_reqtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reqtype(), target);
  }

  // optional bytes mgrsql = 2;
  if (has_mgrsql()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->mgrsql(), target);
  }

  // repeated .com.spplus.buff.StationRuleBean stationrllist = 3;
  for (int i = 0; i < this->stationrllist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->stationrllist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StationRuleMgrMsg_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 reqtype = 1;
    if (has_reqtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reqtype());
    }

    // optional bytes mgrsql = 2;
    if (has_mgrsql()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mgrsql());
    }

  }
  // repeated .com.spplus.buff.StationRuleBean stationrllist = 3;
  total_size += 1 * this->stationrllist_size();
  for (int i = 0; i < this->stationrllist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stationrllist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StationRuleMgrMsg_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StationRuleMgrMsg_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StationRuleMgrMsg_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StationRuleMgrMsg_Request::MergeFrom(const StationRuleMgrMsg_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  stationrllist_.MergeFrom(from.stationrllist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reqtype()) {
      set_reqtype(from.reqtype());
    }
    if (from.has_mgrsql()) {
      set_mgrsql(from.mgrsql());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StationRuleMgrMsg_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StationRuleMgrMsg_Request::CopyFrom(const StationRuleMgrMsg_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StationRuleMgrMsg_Request::IsInitialized() const {

  return true;
}

void StationRuleMgrMsg_Request::Swap(StationRuleMgrMsg_Request* other) {
  if (other != this) {
    std::swap(reqtype_, other->reqtype_);
    std::swap(mgrsql_, other->mgrsql_);
    stationrllist_.Swap(&other->stationrllist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StationRuleMgrMsg_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StationRuleMgrMsg_Request_descriptor_;
  metadata.reflection = StationRuleMgrMsg_Request_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int StationRuleMgrMsg_Response::kRescodeFieldNumber;
#endif  // !_MSC_VER

StationRuleMgrMsg_Response::StationRuleMgrMsg_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StationRuleMgrMsg_Response::InitAsDefaultInstance() {
}

StationRuleMgrMsg_Response::StationRuleMgrMsg_Response(const StationRuleMgrMsg_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StationRuleMgrMsg_Response::SharedCtor() {
  _cached_size_ = 0;
  rescode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StationRuleMgrMsg_Response::~StationRuleMgrMsg_Response() {
  SharedDtor();
}

void StationRuleMgrMsg_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StationRuleMgrMsg_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StationRuleMgrMsg_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StationRuleMgrMsg_Response_descriptor_;
}

const StationRuleMgrMsg_Response& StationRuleMgrMsg_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

StationRuleMgrMsg_Response* StationRuleMgrMsg_Response::default_instance_ = NULL;

StationRuleMgrMsg_Response* StationRuleMgrMsg_Response::New() const {
  return new StationRuleMgrMsg_Response;
}

void StationRuleMgrMsg_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rescode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StationRuleMgrMsg_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 rescode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rescode_)));
          set_has_rescode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StationRuleMgrMsg_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 rescode = 1;
  if (has_rescode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rescode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StationRuleMgrMsg_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 rescode = 1;
  if (has_rescode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rescode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StationRuleMgrMsg_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 rescode = 1;
    if (has_rescode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rescode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StationRuleMgrMsg_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StationRuleMgrMsg_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StationRuleMgrMsg_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StationRuleMgrMsg_Response::MergeFrom(const StationRuleMgrMsg_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rescode()) {
      set_rescode(from.rescode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StationRuleMgrMsg_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StationRuleMgrMsg_Response::CopyFrom(const StationRuleMgrMsg_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StationRuleMgrMsg_Response::IsInitialized() const {

  return true;
}

void StationRuleMgrMsg_Response::Swap(StationRuleMgrMsg_Response* other) {
  if (other != this) {
    std::swap(rescode_, other->rescode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StationRuleMgrMsg_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StationRuleMgrMsg_Response_descriptor_;
  metadata.reflection = StationRuleMgrMsg_Response_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int StationRuleMgrMsg::kRequestFieldNumber;
const int StationRuleMgrMsg::kResponseFieldNumber;
#endif  // !_MSC_VER

StationRuleMgrMsg::StationRuleMgrMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StationRuleMgrMsg::InitAsDefaultInstance() {
  request_ = const_cast< ::com::spplus::buff::StationRuleMgrMsg_Request*>(&::com::spplus::buff::StationRuleMgrMsg_Request::default_instance());
  response_ = const_cast< ::com::spplus::buff::StationRuleMgrMsg_Response*>(&::com::spplus::buff::StationRuleMgrMsg_Response::default_instance());
}

StationRuleMgrMsg::StationRuleMgrMsg(const StationRuleMgrMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StationRuleMgrMsg::SharedCtor() {
  _cached_size_ = 0;
  request_ = NULL;
  response_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StationRuleMgrMsg::~StationRuleMgrMsg() {
  SharedDtor();
}

void StationRuleMgrMsg::SharedDtor() {
  if (this != default_instance_) {
    delete request_;
    delete response_;
  }
}

void StationRuleMgrMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StationRuleMgrMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StationRuleMgrMsg_descriptor_;
}

const StationRuleMgrMsg& StationRuleMgrMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

StationRuleMgrMsg* StationRuleMgrMsg::default_instance_ = NULL;

StationRuleMgrMsg* StationRuleMgrMsg::New() const {
  return new StationRuleMgrMsg;
}

void StationRuleMgrMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_request()) {
      if (request_ != NULL) request_->::com::spplus::buff::StationRuleMgrMsg_Request::Clear();
    }
    if (has_response()) {
      if (response_ != NULL) response_->::com::spplus::buff::StationRuleMgrMsg_Response::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StationRuleMgrMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.spplus.buff.StationRuleMgrMsg.Request request = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_response;
        break;
      }

      // optional .com.spplus.buff.StationRuleMgrMsg.Response response = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StationRuleMgrMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.spplus.buff.StationRuleMgrMsg.Request request = 1;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->request(), output);
  }

  // optional .com.spplus.buff.StationRuleMgrMsg.Response response = 2;
  if (has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->response(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StationRuleMgrMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.spplus.buff.StationRuleMgrMsg.Request request = 1;
  if (has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->request(), target);
  }

  // optional .com.spplus.buff.StationRuleMgrMsg.Response response = 2;
  if (has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->response(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StationRuleMgrMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.spplus.buff.StationRuleMgrMsg.Request request = 1;
    if (has_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->request());
    }

    // optional .com.spplus.buff.StationRuleMgrMsg.Response response = 2;
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->response());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StationRuleMgrMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StationRuleMgrMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StationRuleMgrMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StationRuleMgrMsg::MergeFrom(const StationRuleMgrMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request()) {
      mutable_request()->::com::spplus::buff::StationRuleMgrMsg_Request::MergeFrom(from.request());
    }
    if (from.has_response()) {
      mutable_response()->::com::spplus::buff::StationRuleMgrMsg_Response::MergeFrom(from.response());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StationRuleMgrMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StationRuleMgrMsg::CopyFrom(const StationRuleMgrMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StationRuleMgrMsg::IsInitialized() const {

  return true;
}

void StationRuleMgrMsg::Swap(StationRuleMgrMsg* other) {
  if (other != this) {
    std::swap(request_, other->request_);
    std::swap(response_, other->response_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StationRuleMgrMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StationRuleMgrMsg_descriptor_;
  metadata.reflection = StationRuleMgrMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CircleListMsg_Request::kSaveIdFieldNumber;
#endif  // !_MSC_VER

CircleListMsg_Request::CircleListMsg_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CircleListMsg_Request::InitAsDefaultInstance() {
}

CircleListMsg_Request::CircleListMsg_Request(const CircleListMsg_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CircleListMsg_Request::SharedCtor() {
  _cached_size_ = 0;
  saveid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CircleListMsg_Request::~CircleListMsg_Request() {
  SharedDtor();
}

void CircleListMsg_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CircleListMsg_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CircleListMsg_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CircleListMsg_Request_descriptor_;
}

const CircleListMsg_Request& CircleListMsg_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

CircleListMsg_Request* CircleListMsg_Request::default_instance_ = NULL;

CircleListMsg_Request* CircleListMsg_Request::New() const {
  return new CircleListMsg_Request;
}

void CircleListMsg_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    saveid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CircleListMsg_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 saveId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &saveid_)));
          set_has_saveid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CircleListMsg_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 saveId = 1;
  if (has_saveid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->saveid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CircleListMsg_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 saveId = 1;
  if (has_saveid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->saveid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CircleListMsg_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 saveId = 1;
    if (has_saveid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->saveid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CircleListMsg_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CircleListMsg_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CircleListMsg_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CircleListMsg_Request::MergeFrom(const CircleListMsg_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_saveid()) {
      set_saveid(from.saveid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CircleListMsg_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CircleListMsg_Request::CopyFrom(const CircleListMsg_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CircleListMsg_Request::IsInitialized() const {

  return true;
}

void CircleListMsg_Request::Swap(CircleListMsg_Request* other) {
  if (other != this) {
    std::swap(saveid_, other->saveid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CircleListMsg_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CircleListMsg_Request_descriptor_;
  metadata.reflection = CircleListMsg_Request_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CircleListMsg_Response::kRescodeFieldNumber;
const int CircleListMsg_Response::kCirclelistFieldNumber;
#endif  // !_MSC_VER

CircleListMsg_Response::CircleListMsg_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CircleListMsg_Response::InitAsDefaultInstance() {
}

CircleListMsg_Response::CircleListMsg_Response(const CircleListMsg_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CircleListMsg_Response::SharedCtor() {
  _cached_size_ = 0;
  rescode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CircleListMsg_Response::~CircleListMsg_Response() {
  SharedDtor();
}

void CircleListMsg_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CircleListMsg_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CircleListMsg_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CircleListMsg_Response_descriptor_;
}

const CircleListMsg_Response& CircleListMsg_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

CircleListMsg_Response* CircleListMsg_Response::default_instance_ = NULL;

CircleListMsg_Response* CircleListMsg_Response::New() const {
  return new CircleListMsg_Response;
}

void CircleListMsg_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rescode_ = 0u;
  }
  circlelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CircleListMsg_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 rescode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rescode_)));
          set_has_rescode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_circlelist;
        break;
      }

      // repeated .com.spplus.buff.CircleQueryBean circlelist = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_circlelist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_circlelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_circlelist;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CircleListMsg_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 rescode = 1;
  if (has_rescode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rescode(), output);
  }

  // repeated .com.spplus.buff.CircleQueryBean circlelist = 2;
  for (int i = 0; i < this->circlelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->circlelist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CircleListMsg_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 rescode = 1;
  if (has_rescode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rescode(), target);
  }

  // repeated .com.spplus.buff.CircleQueryBean circlelist = 2;
  for (int i = 0; i < this->circlelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->circlelist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CircleListMsg_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 rescode = 1;
    if (has_rescode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rescode());
    }

  }
  // repeated .com.spplus.buff.CircleQueryBean circlelist = 2;
  total_size += 1 * this->circlelist_size();
  for (int i = 0; i < this->circlelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->circlelist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CircleListMsg_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CircleListMsg_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CircleListMsg_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CircleListMsg_Response::MergeFrom(const CircleListMsg_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  circlelist_.MergeFrom(from.circlelist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rescode()) {
      set_rescode(from.rescode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CircleListMsg_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CircleListMsg_Response::CopyFrom(const CircleListMsg_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CircleListMsg_Response::IsInitialized() const {

  return true;
}

void CircleListMsg_Response::Swap(CircleListMsg_Response* other) {
  if (other != this) {
    std::swap(rescode_, other->rescode_);
    circlelist_.Swap(&other->circlelist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CircleListMsg_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CircleListMsg_Response_descriptor_;
  metadata.reflection = CircleListMsg_Response_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CircleListMsg::kRequestFieldNumber;
const int CircleListMsg::kResponseFieldNumber;
#endif  // !_MSC_VER

CircleListMsg::CircleListMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CircleListMsg::InitAsDefaultInstance() {
  request_ = const_cast< ::com::spplus::buff::CircleListMsg_Request*>(&::com::spplus::buff::CircleListMsg_Request::default_instance());
  response_ = const_cast< ::com::spplus::buff::CircleListMsg_Response*>(&::com::spplus::buff::CircleListMsg_Response::default_instance());
}

CircleListMsg::CircleListMsg(const CircleListMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CircleListMsg::SharedCtor() {
  _cached_size_ = 0;
  request_ = NULL;
  response_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CircleListMsg::~CircleListMsg() {
  SharedDtor();
}

void CircleListMsg::SharedDtor() {
  if (this != default_instance_) {
    delete request_;
    delete response_;
  }
}

void CircleListMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CircleListMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CircleListMsg_descriptor_;
}

const CircleListMsg& CircleListMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

CircleListMsg* CircleListMsg::default_instance_ = NULL;

CircleListMsg* CircleListMsg::New() const {
  return new CircleListMsg;
}

void CircleListMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_request()) {
      if (request_ != NULL) request_->::com::spplus::buff::CircleListMsg_Request::Clear();
    }
    if (has_response()) {
      if (response_ != NULL) response_->::com::spplus::buff::CircleListMsg_Response::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CircleListMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.spplus.buff.CircleListMsg.Request request = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_response;
        break;
      }

      // optional .com.spplus.buff.CircleListMsg.Response response = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CircleListMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.spplus.buff.CircleListMsg.Request request = 1;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->request(), output);
  }

  // optional .com.spplus.buff.CircleListMsg.Response response = 2;
  if (has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->response(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CircleListMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.spplus.buff.CircleListMsg.Request request = 1;
  if (has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->request(), target);
  }

  // optional .com.spplus.buff.CircleListMsg.Response response = 2;
  if (has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->response(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CircleListMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.spplus.buff.CircleListMsg.Request request = 1;
    if (has_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->request());
    }

    // optional .com.spplus.buff.CircleListMsg.Response response = 2;
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->response());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CircleListMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CircleListMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CircleListMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CircleListMsg::MergeFrom(const CircleListMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request()) {
      mutable_request()->::com::spplus::buff::CircleListMsg_Request::MergeFrom(from.request());
    }
    if (from.has_response()) {
      mutable_response()->::com::spplus::buff::CircleListMsg_Response::MergeFrom(from.response());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CircleListMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CircleListMsg::CopyFrom(const CircleListMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CircleListMsg::IsInitialized() const {

  return true;
}

void CircleListMsg::Swap(CircleListMsg* other) {
  if (other != this) {
    std::swap(request_, other->request_);
    std::swap(response_, other->response_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CircleListMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CircleListMsg_descriptor_;
  metadata.reflection = CircleListMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SignListMsg_Request::kReqdateFieldNumber;
#endif  // !_MSC_VER

SignListMsg_Request::SignListMsg_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SignListMsg_Request::InitAsDefaultInstance() {
}

SignListMsg_Request::SignListMsg_Request(const SignListMsg_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SignListMsg_Request::SharedCtor() {
  _cached_size_ = 0;
  reqdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SignListMsg_Request::~SignListMsg_Request() {
  SharedDtor();
}

void SignListMsg_Request::SharedDtor() {
  if (reqdate_ != &::google::protobuf::internal::kEmptyString) {
    delete reqdate_;
  }
  if (this != default_instance_) {
  }
}

void SignListMsg_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignListMsg_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignListMsg_Request_descriptor_;
}

const SignListMsg_Request& SignListMsg_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

SignListMsg_Request* SignListMsg_Request::default_instance_ = NULL;

SignListMsg_Request* SignListMsg_Request::New() const {
  return new SignListMsg_Request;
}

void SignListMsg_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_reqdate()) {
      if (reqdate_ != &::google::protobuf::internal::kEmptyString) {
        reqdate_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SignListMsg_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes reqdate = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_reqdate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SignListMsg_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes reqdate = 1;
  if (has_reqdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->reqdate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SignListMsg_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes reqdate = 1;
  if (has_reqdate()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->reqdate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SignListMsg_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes reqdate = 1;
    if (has_reqdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->reqdate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignListMsg_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SignListMsg_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SignListMsg_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SignListMsg_Request::MergeFrom(const SignListMsg_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reqdate()) {
      set_reqdate(from.reqdate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SignListMsg_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignListMsg_Request::CopyFrom(const SignListMsg_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignListMsg_Request::IsInitialized() const {

  return true;
}

void SignListMsg_Request::Swap(SignListMsg_Request* other) {
  if (other != this) {
    std::swap(reqdate_, other->reqdate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SignListMsg_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SignListMsg_Request_descriptor_;
  metadata.reflection = SignListMsg_Request_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SignListMsg_Response::kRescodeFieldNumber;
const int SignListMsg_Response::kSignlistFieldNumber;
#endif  // !_MSC_VER

SignListMsg_Response::SignListMsg_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SignListMsg_Response::InitAsDefaultInstance() {
}

SignListMsg_Response::SignListMsg_Response(const SignListMsg_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SignListMsg_Response::SharedCtor() {
  _cached_size_ = 0;
  rescode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SignListMsg_Response::~SignListMsg_Response() {
  SharedDtor();
}

void SignListMsg_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SignListMsg_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignListMsg_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignListMsg_Response_descriptor_;
}

const SignListMsg_Response& SignListMsg_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

SignListMsg_Response* SignListMsg_Response::default_instance_ = NULL;

SignListMsg_Response* SignListMsg_Response::New() const {
  return new SignListMsg_Response;
}

void SignListMsg_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rescode_ = 0u;
  }
  signlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SignListMsg_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 rescode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rescode_)));
          set_has_rescode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_signlist;
        break;
      }

      // repeated .com.spplus.buff.SignQueryBean signlist = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_signlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_signlist;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SignListMsg_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 rescode = 1;
  if (has_rescode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rescode(), output);
  }

  // repeated .com.spplus.buff.SignQueryBean signlist = 2;
  for (int i = 0; i < this->signlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->signlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SignListMsg_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 rescode = 1;
  if (has_rescode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rescode(), target);
  }

  // repeated .com.spplus.buff.SignQueryBean signlist = 2;
  for (int i = 0; i < this->signlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->signlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SignListMsg_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 rescode = 1;
    if (has_rescode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rescode());
    }

  }
  // repeated .com.spplus.buff.SignQueryBean signlist = 2;
  total_size += 1 * this->signlist_size();
  for (int i = 0; i < this->signlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->signlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignListMsg_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SignListMsg_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SignListMsg_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SignListMsg_Response::MergeFrom(const SignListMsg_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  signlist_.MergeFrom(from.signlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rescode()) {
      set_rescode(from.rescode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SignListMsg_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignListMsg_Response::CopyFrom(const SignListMsg_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignListMsg_Response::IsInitialized() const {

  return true;
}

void SignListMsg_Response::Swap(SignListMsg_Response* other) {
  if (other != this) {
    std::swap(rescode_, other->rescode_);
    signlist_.Swap(&other->signlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SignListMsg_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SignListMsg_Response_descriptor_;
  metadata.reflection = SignListMsg_Response_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SignListMsg::kRequestFieldNumber;
const int SignListMsg::kResponseFieldNumber;
#endif  // !_MSC_VER

SignListMsg::SignListMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SignListMsg::InitAsDefaultInstance() {
  request_ = const_cast< ::com::spplus::buff::SignListMsg_Request*>(&::com::spplus::buff::SignListMsg_Request::default_instance());
  response_ = const_cast< ::com::spplus::buff::SignListMsg_Response*>(&::com::spplus::buff::SignListMsg_Response::default_instance());
}

SignListMsg::SignListMsg(const SignListMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SignListMsg::SharedCtor() {
  _cached_size_ = 0;
  request_ = NULL;
  response_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SignListMsg::~SignListMsg() {
  SharedDtor();
}

void SignListMsg::SharedDtor() {
  if (this != default_instance_) {
    delete request_;
    delete response_;
  }
}

void SignListMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignListMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignListMsg_descriptor_;
}

const SignListMsg& SignListMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

SignListMsg* SignListMsg::default_instance_ = NULL;

SignListMsg* SignListMsg::New() const {
  return new SignListMsg;
}

void SignListMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_request()) {
      if (request_ != NULL) request_->::com::spplus::buff::SignListMsg_Request::Clear();
    }
    if (has_response()) {
      if (response_ != NULL) response_->::com::spplus::buff::SignListMsg_Response::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SignListMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.spplus.buff.SignListMsg.Request request = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_response;
        break;
      }

      // optional .com.spplus.buff.SignListMsg.Response response = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SignListMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.spplus.buff.SignListMsg.Request request = 1;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->request(), output);
  }

  // optional .com.spplus.buff.SignListMsg.Response response = 2;
  if (has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->response(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SignListMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.spplus.buff.SignListMsg.Request request = 1;
  if (has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->request(), target);
  }

  // optional .com.spplus.buff.SignListMsg.Response response = 2;
  if (has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->response(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SignListMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.spplus.buff.SignListMsg.Request request = 1;
    if (has_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->request());
    }

    // optional .com.spplus.buff.SignListMsg.Response response = 2;
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->response());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignListMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SignListMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SignListMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SignListMsg::MergeFrom(const SignListMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request()) {
      mutable_request()->::com::spplus::buff::SignListMsg_Request::MergeFrom(from.request());
    }
    if (from.has_response()) {
      mutable_response()->::com::spplus::buff::SignListMsg_Response::MergeFrom(from.response());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SignListMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignListMsg::CopyFrom(const SignListMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignListMsg::IsInitialized() const {

  return true;
}

void SignListMsg::Swap(SignListMsg* other) {
  if (other != this) {
    std::swap(request_, other->request_);
    std::swap(response_, other->response_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SignListMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SignListMsg_descriptor_;
  metadata.reflection = SignListMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GswitchListMsg_Request::kReqdateFieldNumber;
#endif  // !_MSC_VER

GswitchListMsg_Request::GswitchListMsg_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GswitchListMsg_Request::InitAsDefaultInstance() {
}

GswitchListMsg_Request::GswitchListMsg_Request(const GswitchListMsg_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GswitchListMsg_Request::SharedCtor() {
  _cached_size_ = 0;
  reqdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GswitchListMsg_Request::~GswitchListMsg_Request() {
  SharedDtor();
}

void GswitchListMsg_Request::SharedDtor() {
  if (reqdate_ != &::google::protobuf::internal::kEmptyString) {
    delete reqdate_;
  }
  if (this != default_instance_) {
  }
}

void GswitchListMsg_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GswitchListMsg_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GswitchListMsg_Request_descriptor_;
}

const GswitchListMsg_Request& GswitchListMsg_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

GswitchListMsg_Request* GswitchListMsg_Request::default_instance_ = NULL;

GswitchListMsg_Request* GswitchListMsg_Request::New() const {
  return new GswitchListMsg_Request;
}

void GswitchListMsg_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_reqdate()) {
      if (reqdate_ != &::google::protobuf::internal::kEmptyString) {
        reqdate_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GswitchListMsg_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes reqdate = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_reqdate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GswitchListMsg_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes reqdate = 1;
  if (has_reqdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->reqdate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GswitchListMsg_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes reqdate = 1;
  if (has_reqdate()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->reqdate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GswitchListMsg_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes reqdate = 1;
    if (has_reqdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->reqdate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GswitchListMsg_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GswitchListMsg_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GswitchListMsg_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GswitchListMsg_Request::MergeFrom(const GswitchListMsg_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reqdate()) {
      set_reqdate(from.reqdate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GswitchListMsg_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GswitchListMsg_Request::CopyFrom(const GswitchListMsg_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GswitchListMsg_Request::IsInitialized() const {

  return true;
}

void GswitchListMsg_Request::Swap(GswitchListMsg_Request* other) {
  if (other != this) {
    std::swap(reqdate_, other->reqdate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GswitchListMsg_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GswitchListMsg_Request_descriptor_;
  metadata.reflection = GswitchListMsg_Request_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int GswitchListMsg_Response::kRescodeFieldNumber;
const int GswitchListMsg_Response::kGswitchlistFieldNumber;
#endif  // !_MSC_VER

GswitchListMsg_Response::GswitchListMsg_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GswitchListMsg_Response::InitAsDefaultInstance() {
}

GswitchListMsg_Response::GswitchListMsg_Response(const GswitchListMsg_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GswitchListMsg_Response::SharedCtor() {
  _cached_size_ = 0;
  rescode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GswitchListMsg_Response::~GswitchListMsg_Response() {
  SharedDtor();
}

void GswitchListMsg_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GswitchListMsg_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GswitchListMsg_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GswitchListMsg_Response_descriptor_;
}

const GswitchListMsg_Response& GswitchListMsg_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

GswitchListMsg_Response* GswitchListMsg_Response::default_instance_ = NULL;

GswitchListMsg_Response* GswitchListMsg_Response::New() const {
  return new GswitchListMsg_Response;
}

void GswitchListMsg_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rescode_ = 0u;
  }
  gswitchlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GswitchListMsg_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 rescode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rescode_)));
          set_has_rescode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_gswitchlist;
        break;
      }

      // repeated .com.spplus.buff.GswitchQueryBean gswitchlist = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gswitchlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gswitchlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_gswitchlist;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GswitchListMsg_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 rescode = 1;
  if (has_rescode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rescode(), output);
  }

  // repeated .com.spplus.buff.GswitchQueryBean gswitchlist = 2;
  for (int i = 0; i < this->gswitchlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->gswitchlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GswitchListMsg_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 rescode = 1;
  if (has_rescode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rescode(), target);
  }

  // repeated .com.spplus.buff.GswitchQueryBean gswitchlist = 2;
  for (int i = 0; i < this->gswitchlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->gswitchlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GswitchListMsg_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 rescode = 1;
    if (has_rescode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rescode());
    }

  }
  // repeated .com.spplus.buff.GswitchQueryBean gswitchlist = 2;
  total_size += 1 * this->gswitchlist_size();
  for (int i = 0; i < this->gswitchlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gswitchlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GswitchListMsg_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GswitchListMsg_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GswitchListMsg_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GswitchListMsg_Response::MergeFrom(const GswitchListMsg_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  gswitchlist_.MergeFrom(from.gswitchlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rescode()) {
      set_rescode(from.rescode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GswitchListMsg_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GswitchListMsg_Response::CopyFrom(const GswitchListMsg_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GswitchListMsg_Response::IsInitialized() const {

  return true;
}

void GswitchListMsg_Response::Swap(GswitchListMsg_Response* other) {
  if (other != this) {
    std::swap(rescode_, other->rescode_);
    gswitchlist_.Swap(&other->gswitchlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GswitchListMsg_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GswitchListMsg_Response_descriptor_;
  metadata.reflection = GswitchListMsg_Response_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int GswitchListMsg::kRequestFieldNumber;
const int GswitchListMsg::kResponseFieldNumber;
#endif  // !_MSC_VER

GswitchListMsg::GswitchListMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GswitchListMsg::InitAsDefaultInstance() {
  request_ = const_cast< ::com::spplus::buff::GswitchListMsg_Request*>(&::com::spplus::buff::GswitchListMsg_Request::default_instance());
  response_ = const_cast< ::com::spplus::buff::GswitchListMsg_Response*>(&::com::spplus::buff::GswitchListMsg_Response::default_instance());
}

GswitchListMsg::GswitchListMsg(const GswitchListMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GswitchListMsg::SharedCtor() {
  _cached_size_ = 0;
  request_ = NULL;
  response_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GswitchListMsg::~GswitchListMsg() {
  SharedDtor();
}

void GswitchListMsg::SharedDtor() {
  if (this != default_instance_) {
    delete request_;
    delete response_;
  }
}

void GswitchListMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GswitchListMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GswitchListMsg_descriptor_;
}

const GswitchListMsg& GswitchListMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

GswitchListMsg* GswitchListMsg::default_instance_ = NULL;

GswitchListMsg* GswitchListMsg::New() const {
  return new GswitchListMsg;
}

void GswitchListMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_request()) {
      if (request_ != NULL) request_->::com::spplus::buff::GswitchListMsg_Request::Clear();
    }
    if (has_response()) {
      if (response_ != NULL) response_->::com::spplus::buff::GswitchListMsg_Response::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GswitchListMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.spplus.buff.GswitchListMsg.Request request = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_response;
        break;
      }

      // optional .com.spplus.buff.GswitchListMsg.Response response = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GswitchListMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.spplus.buff.GswitchListMsg.Request request = 1;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->request(), output);
  }

  // optional .com.spplus.buff.GswitchListMsg.Response response = 2;
  if (has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->response(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GswitchListMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.spplus.buff.GswitchListMsg.Request request = 1;
  if (has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->request(), target);
  }

  // optional .com.spplus.buff.GswitchListMsg.Response response = 2;
  if (has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->response(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GswitchListMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.spplus.buff.GswitchListMsg.Request request = 1;
    if (has_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->request());
    }

    // optional .com.spplus.buff.GswitchListMsg.Response response = 2;
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->response());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GswitchListMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GswitchListMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GswitchListMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GswitchListMsg::MergeFrom(const GswitchListMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request()) {
      mutable_request()->::com::spplus::buff::GswitchListMsg_Request::MergeFrom(from.request());
    }
    if (from.has_response()) {
      mutable_response()->::com::spplus::buff::GswitchListMsg_Response::MergeFrom(from.response());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GswitchListMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GswitchListMsg::CopyFrom(const GswitchListMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GswitchListMsg::IsInitialized() const {

  return true;
}

void GswitchListMsg::Swap(GswitchListMsg* other) {
  if (other != this) {
    std::swap(request_, other->request_);
    std::swap(response_, other->response_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GswitchListMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GswitchListMsg_descriptor_;
  metadata.reflection = GswitchListMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsetListMsg_Request::kReqdateFieldNumber;
#endif  // !_MSC_VER

MsetListMsg_Request::MsetListMsg_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsetListMsg_Request::InitAsDefaultInstance() {
}

MsetListMsg_Request::MsetListMsg_Request(const MsetListMsg_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsetListMsg_Request::SharedCtor() {
  _cached_size_ = 0;
  reqdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsetListMsg_Request::~MsetListMsg_Request() {
  SharedDtor();
}

void MsetListMsg_Request::SharedDtor() {
  if (reqdate_ != &::google::protobuf::internal::kEmptyString) {
    delete reqdate_;
  }
  if (this != default_instance_) {
  }
}

void MsetListMsg_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsetListMsg_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsetListMsg_Request_descriptor_;
}

const MsetListMsg_Request& MsetListMsg_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

MsetListMsg_Request* MsetListMsg_Request::default_instance_ = NULL;

MsetListMsg_Request* MsetListMsg_Request::New() const {
  return new MsetListMsg_Request;
}

void MsetListMsg_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_reqdate()) {
      if (reqdate_ != &::google::protobuf::internal::kEmptyString) {
        reqdate_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsetListMsg_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes reqdate = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_reqdate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsetListMsg_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes reqdate = 1;
  if (has_reqdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->reqdate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsetListMsg_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes reqdate = 1;
  if (has_reqdate()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->reqdate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsetListMsg_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes reqdate = 1;
    if (has_reqdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->reqdate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsetListMsg_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsetListMsg_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsetListMsg_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsetListMsg_Request::MergeFrom(const MsetListMsg_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reqdate()) {
      set_reqdate(from.reqdate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsetListMsg_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsetListMsg_Request::CopyFrom(const MsetListMsg_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsetListMsg_Request::IsInitialized() const {

  return true;
}

void MsetListMsg_Request::Swap(MsetListMsg_Request* other) {
  if (other != this) {
    std::swap(reqdate_, other->reqdate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsetListMsg_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsetListMsg_Request_descriptor_;
  metadata.reflection = MsetListMsg_Request_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MsetListMsg_Response::kRescodeFieldNumber;
const int MsetListMsg_Response::kMsetlistFieldNumber;
#endif  // !_MSC_VER

MsetListMsg_Response::MsetListMsg_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsetListMsg_Response::InitAsDefaultInstance() {
}

MsetListMsg_Response::MsetListMsg_Response(const MsetListMsg_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsetListMsg_Response::SharedCtor() {
  _cached_size_ = 0;
  rescode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsetListMsg_Response::~MsetListMsg_Response() {
  SharedDtor();
}

void MsetListMsg_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsetListMsg_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsetListMsg_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsetListMsg_Response_descriptor_;
}

const MsetListMsg_Response& MsetListMsg_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

MsetListMsg_Response* MsetListMsg_Response::default_instance_ = NULL;

MsetListMsg_Response* MsetListMsg_Response::New() const {
  return new MsetListMsg_Response;
}

void MsetListMsg_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rescode_ = 0u;
  }
  msetlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsetListMsg_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 rescode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rescode_)));
          set_has_rescode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msetlist;
        break;
      }

      // repeated .com.spplus.buff.MsetQueryBean msetlist = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msetlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_msetlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msetlist;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsetListMsg_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 rescode = 1;
  if (has_rescode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rescode(), output);
  }

  // repeated .com.spplus.buff.MsetQueryBean msetlist = 2;
  for (int i = 0; i < this->msetlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->msetlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsetListMsg_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 rescode = 1;
  if (has_rescode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rescode(), target);
  }

  // repeated .com.spplus.buff.MsetQueryBean msetlist = 2;
  for (int i = 0; i < this->msetlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->msetlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsetListMsg_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 rescode = 1;
    if (has_rescode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rescode());
    }

  }
  // repeated .com.spplus.buff.MsetQueryBean msetlist = 2;
  total_size += 1 * this->msetlist_size();
  for (int i = 0; i < this->msetlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->msetlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsetListMsg_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsetListMsg_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsetListMsg_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsetListMsg_Response::MergeFrom(const MsetListMsg_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  msetlist_.MergeFrom(from.msetlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rescode()) {
      set_rescode(from.rescode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsetListMsg_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsetListMsg_Response::CopyFrom(const MsetListMsg_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsetListMsg_Response::IsInitialized() const {

  return true;
}

void MsetListMsg_Response::Swap(MsetListMsg_Response* other) {
  if (other != this) {
    std::swap(rescode_, other->rescode_);
    msetlist_.Swap(&other->msetlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsetListMsg_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsetListMsg_Response_descriptor_;
  metadata.reflection = MsetListMsg_Response_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MsetListMsg::kRequestFieldNumber;
const int MsetListMsg::kResponseFieldNumber;
#endif  // !_MSC_VER

MsetListMsg::MsetListMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsetListMsg::InitAsDefaultInstance() {
  request_ = const_cast< ::com::spplus::buff::MsetListMsg_Request*>(&::com::spplus::buff::MsetListMsg_Request::default_instance());
  response_ = const_cast< ::com::spplus::buff::MsetListMsg_Response*>(&::com::spplus::buff::MsetListMsg_Response::default_instance());
}

MsetListMsg::MsetListMsg(const MsetListMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsetListMsg::SharedCtor() {
  _cached_size_ = 0;
  request_ = NULL;
  response_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsetListMsg::~MsetListMsg() {
  SharedDtor();
}

void MsetListMsg::SharedDtor() {
  if (this != default_instance_) {
    delete request_;
    delete response_;
  }
}

void MsetListMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsetListMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsetListMsg_descriptor_;
}

const MsetListMsg& MsetListMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

MsetListMsg* MsetListMsg::default_instance_ = NULL;

MsetListMsg* MsetListMsg::New() const {
  return new MsetListMsg;
}

void MsetListMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_request()) {
      if (request_ != NULL) request_->::com::spplus::buff::MsetListMsg_Request::Clear();
    }
    if (has_response()) {
      if (response_ != NULL) response_->::com::spplus::buff::MsetListMsg_Response::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsetListMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.spplus.buff.MsetListMsg.Request request = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_response;
        break;
      }

      // optional .com.spplus.buff.MsetListMsg.Response response = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsetListMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.spplus.buff.MsetListMsg.Request request = 1;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->request(), output);
  }

  // optional .com.spplus.buff.MsetListMsg.Response response = 2;
  if (has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->response(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsetListMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.spplus.buff.MsetListMsg.Request request = 1;
  if (has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->request(), target);
  }

  // optional .com.spplus.buff.MsetListMsg.Response response = 2;
  if (has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->response(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsetListMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.spplus.buff.MsetListMsg.Request request = 1;
    if (has_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->request());
    }

    // optional .com.spplus.buff.MsetListMsg.Response response = 2;
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->response());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsetListMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsetListMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsetListMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsetListMsg::MergeFrom(const MsetListMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request()) {
      mutable_request()->::com::spplus::buff::MsetListMsg_Request::MergeFrom(from.request());
    }
    if (from.has_response()) {
      mutable_response()->::com::spplus::buff::MsetListMsg_Response::MergeFrom(from.response());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsetListMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsetListMsg::CopyFrom(const MsetListMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsetListMsg::IsInitialized() const {

  return true;
}

void MsetListMsg::Swap(MsetListMsg* other) {
  if (other != this) {
    std::swap(request_, other->request_);
    std::swap(response_, other->response_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsetListMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsetListMsg_descriptor_;
  metadata.reflection = MsetListMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EventListMsg_Request::kReqdateFieldNumber;
#endif  // !_MSC_VER

EventListMsg_Request::EventListMsg_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EventListMsg_Request::InitAsDefaultInstance() {
}

EventListMsg_Request::EventListMsg_Request(const EventListMsg_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EventListMsg_Request::SharedCtor() {
  _cached_size_ = 0;
  reqdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EventListMsg_Request::~EventListMsg_Request() {
  SharedDtor();
}

void EventListMsg_Request::SharedDtor() {
  if (reqdate_ != &::google::protobuf::internal::kEmptyString) {
    delete reqdate_;
  }
  if (this != default_instance_) {
  }
}

void EventListMsg_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventListMsg_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventListMsg_Request_descriptor_;
}

const EventListMsg_Request& EventListMsg_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

EventListMsg_Request* EventListMsg_Request::default_instance_ = NULL;

EventListMsg_Request* EventListMsg_Request::New() const {
  return new EventListMsg_Request;
}

void EventListMsg_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_reqdate()) {
      if (reqdate_ != &::google::protobuf::internal::kEmptyString) {
        reqdate_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EventListMsg_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes reqdate = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_reqdate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EventListMsg_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes reqdate = 1;
  if (has_reqdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->reqdate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EventListMsg_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes reqdate = 1;
  if (has_reqdate()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->reqdate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EventListMsg_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes reqdate = 1;
    if (has_reqdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->reqdate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventListMsg_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EventListMsg_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EventListMsg_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EventListMsg_Request::MergeFrom(const EventListMsg_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reqdate()) {
      set_reqdate(from.reqdate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EventListMsg_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventListMsg_Request::CopyFrom(const EventListMsg_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventListMsg_Request::IsInitialized() const {

  return true;
}

void EventListMsg_Request::Swap(EventListMsg_Request* other) {
  if (other != this) {
    std::swap(reqdate_, other->reqdate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EventListMsg_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EventListMsg_Request_descriptor_;
  metadata.reflection = EventListMsg_Request_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int EventListMsg_Response::kRescodeFieldNumber;
const int EventListMsg_Response::kEventlistFieldNumber;
#endif  // !_MSC_VER

EventListMsg_Response::EventListMsg_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EventListMsg_Response::InitAsDefaultInstance() {
}

EventListMsg_Response::EventListMsg_Response(const EventListMsg_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EventListMsg_Response::SharedCtor() {
  _cached_size_ = 0;
  rescode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EventListMsg_Response::~EventListMsg_Response() {
  SharedDtor();
}

void EventListMsg_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EventListMsg_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventListMsg_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventListMsg_Response_descriptor_;
}

const EventListMsg_Response& EventListMsg_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

EventListMsg_Response* EventListMsg_Response::default_instance_ = NULL;

EventListMsg_Response* EventListMsg_Response::New() const {
  return new EventListMsg_Response;
}

void EventListMsg_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rescode_ = 0u;
  }
  eventlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EventListMsg_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 rescode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rescode_)));
          set_has_rescode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_eventlist;
        break;
      }

      // repeated .com.spplus.buff.EventQueryBean eventlist = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_eventlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_eventlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_eventlist;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EventListMsg_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 rescode = 1;
  if (has_rescode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rescode(), output);
  }

  // repeated .com.spplus.buff.EventQueryBean eventlist = 2;
  for (int i = 0; i < this->eventlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->eventlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EventListMsg_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 rescode = 1;
  if (has_rescode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rescode(), target);
  }

  // repeated .com.spplus.buff.EventQueryBean eventlist = 2;
  for (int i = 0; i < this->eventlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->eventlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EventListMsg_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 rescode = 1;
    if (has_rescode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rescode());
    }

  }
  // repeated .com.spplus.buff.EventQueryBean eventlist = 2;
  total_size += 1 * this->eventlist_size();
  for (int i = 0; i < this->eventlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->eventlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventListMsg_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EventListMsg_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EventListMsg_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EventListMsg_Response::MergeFrom(const EventListMsg_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  eventlist_.MergeFrom(from.eventlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rescode()) {
      set_rescode(from.rescode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EventListMsg_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventListMsg_Response::CopyFrom(const EventListMsg_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventListMsg_Response::IsInitialized() const {

  return true;
}

void EventListMsg_Response::Swap(EventListMsg_Response* other) {
  if (other != this) {
    std::swap(rescode_, other->rescode_);
    eventlist_.Swap(&other->eventlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EventListMsg_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EventListMsg_Response_descriptor_;
  metadata.reflection = EventListMsg_Response_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int EventListMsg::kRequestFieldNumber;
const int EventListMsg::kResponseFieldNumber;
#endif  // !_MSC_VER

EventListMsg::EventListMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EventListMsg::InitAsDefaultInstance() {
  request_ = const_cast< ::com::spplus::buff::EventListMsg_Request*>(&::com::spplus::buff::EventListMsg_Request::default_instance());
  response_ = const_cast< ::com::spplus::buff::EventListMsg_Response*>(&::com::spplus::buff::EventListMsg_Response::default_instance());
}

EventListMsg::EventListMsg(const EventListMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EventListMsg::SharedCtor() {
  _cached_size_ = 0;
  request_ = NULL;
  response_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EventListMsg::~EventListMsg() {
  SharedDtor();
}

void EventListMsg::SharedDtor() {
  if (this != default_instance_) {
    delete request_;
    delete response_;
  }
}

void EventListMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventListMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventListMsg_descriptor_;
}

const EventListMsg& EventListMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

EventListMsg* EventListMsg::default_instance_ = NULL;

EventListMsg* EventListMsg::New() const {
  return new EventListMsg;
}

void EventListMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_request()) {
      if (request_ != NULL) request_->::com::spplus::buff::EventListMsg_Request::Clear();
    }
    if (has_response()) {
      if (response_ != NULL) response_->::com::spplus::buff::EventListMsg_Response::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EventListMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.spplus.buff.EventListMsg.Request request = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_response;
        break;
      }

      // optional .com.spplus.buff.EventListMsg.Response response = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EventListMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.spplus.buff.EventListMsg.Request request = 1;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->request(), output);
  }

  // optional .com.spplus.buff.EventListMsg.Response response = 2;
  if (has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->response(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EventListMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.spplus.buff.EventListMsg.Request request = 1;
  if (has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->request(), target);
  }

  // optional .com.spplus.buff.EventListMsg.Response response = 2;
  if (has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->response(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EventListMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.spplus.buff.EventListMsg.Request request = 1;
    if (has_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->request());
    }

    // optional .com.spplus.buff.EventListMsg.Response response = 2;
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->response());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventListMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EventListMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EventListMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EventListMsg::MergeFrom(const EventListMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request()) {
      mutable_request()->::com::spplus::buff::EventListMsg_Request::MergeFrom(from.request());
    }
    if (from.has_response()) {
      mutable_response()->::com::spplus::buff::EventListMsg_Response::MergeFrom(from.response());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EventListMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventListMsg::CopyFrom(const EventListMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventListMsg::IsInitialized() const {

  return true;
}

void EventListMsg::Swap(EventListMsg* other) {
  if (other != this) {
    std::swap(request_, other->request_);
    std::swap(response_, other->response_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EventListMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EventListMsg_descriptor_;
  metadata.reflection = EventListMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DevStateMsg_Request::kSaveIdFieldNumber;
const int DevStateMsg_Request::kStationCimFieldNumber;
const int DevStateMsg_Request::kUnitCimFieldNumber;
#endif  // !_MSC_VER

DevStateMsg_Request::DevStateMsg_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DevStateMsg_Request::InitAsDefaultInstance() {
}

DevStateMsg_Request::DevStateMsg_Request(const DevStateMsg_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DevStateMsg_Request::SharedCtor() {
  _cached_size_ = 0;
  saveid_ = 0u;
  stationcim_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  unitcim_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DevStateMsg_Request::~DevStateMsg_Request() {
  SharedDtor();
}

void DevStateMsg_Request::SharedDtor() {
  if (stationcim_ != &::google::protobuf::internal::kEmptyString) {
    delete stationcim_;
  }
  if (unitcim_ != &::google::protobuf::internal::kEmptyString) {
    delete unitcim_;
  }
  if (this != default_instance_) {
  }
}

void DevStateMsg_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DevStateMsg_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DevStateMsg_Request_descriptor_;
}

const DevStateMsg_Request& DevStateMsg_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

DevStateMsg_Request* DevStateMsg_Request::default_instance_ = NULL;

DevStateMsg_Request* DevStateMsg_Request::New() const {
  return new DevStateMsg_Request;
}

void DevStateMsg_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    saveid_ = 0u;
    if (has_stationcim()) {
      if (stationcim_ != &::google::protobuf::internal::kEmptyString) {
        stationcim_->clear();
      }
    }
    if (has_unitcim()) {
      if (unitcim_ != &::google::protobuf::internal::kEmptyString) {
        unitcim_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DevStateMsg_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 saveId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &saveid_)));
          set_has_saveid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stationCim;
        break;
      }

      // optional bytes stationCim = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stationCim:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_stationcim()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_unitCim;
        break;
      }

      // optional bytes unitCim = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unitCim:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_unitcim()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DevStateMsg_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 saveId = 1;
  if (has_saveid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->saveid(), output);
  }

  // optional bytes stationCim = 2;
  if (has_stationcim()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->stationcim(), output);
  }

  // optional bytes unitCim = 3;
  if (has_unitcim()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->unitcim(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DevStateMsg_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 saveId = 1;
  if (has_saveid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->saveid(), target);
  }

  // optional bytes stationCim = 2;
  if (has_stationcim()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->stationcim(), target);
  }

  // optional bytes unitCim = 3;
  if (has_unitcim()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->unitcim(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DevStateMsg_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 saveId = 1;
    if (has_saveid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->saveid());
    }

    // optional bytes stationCim = 2;
    if (has_stationcim()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->stationcim());
    }

    // optional bytes unitCim = 3;
    if (has_unitcim()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->unitcim());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DevStateMsg_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DevStateMsg_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DevStateMsg_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DevStateMsg_Request::MergeFrom(const DevStateMsg_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_saveid()) {
      set_saveid(from.saveid());
    }
    if (from.has_stationcim()) {
      set_stationcim(from.stationcim());
    }
    if (from.has_unitcim()) {
      set_unitcim(from.unitcim());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DevStateMsg_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DevStateMsg_Request::CopyFrom(const DevStateMsg_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DevStateMsg_Request::IsInitialized() const {

  return true;
}

void DevStateMsg_Request::Swap(DevStateMsg_Request* other) {
  if (other != this) {
    std::swap(saveid_, other->saveid_);
    std::swap(stationcim_, other->stationcim_);
    std::swap(unitcim_, other->unitcim_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DevStateMsg_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DevStateMsg_Request_descriptor_;
  metadata.reflection = DevStateMsg_Request_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int DevStateMsg_Response::kRescodeFieldNumber;
const int DevStateMsg_Response::kDevStateFieldNumber;
#endif  // !_MSC_VER

DevStateMsg_Response::DevStateMsg_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DevStateMsg_Response::InitAsDefaultInstance() {
}

DevStateMsg_Response::DevStateMsg_Response(const DevStateMsg_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DevStateMsg_Response::SharedCtor() {
  _cached_size_ = 0;
  rescode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DevStateMsg_Response::~DevStateMsg_Response() {
  SharedDtor();
}

void DevStateMsg_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DevStateMsg_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DevStateMsg_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DevStateMsg_Response_descriptor_;
}

const DevStateMsg_Response& DevStateMsg_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

DevStateMsg_Response* DevStateMsg_Response::default_instance_ = NULL;

DevStateMsg_Response* DevStateMsg_Response::New() const {
  return new DevStateMsg_Response;
}

void DevStateMsg_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rescode_ = 0u;
  }
  devstate_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DevStateMsg_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 rescode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rescode_)));
          set_has_rescode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_devState;
        break;
      }

      // repeated .com.spplus.buff.StateBean devState = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_devState:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_devstate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_devState;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DevStateMsg_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 rescode = 1;
  if (has_rescode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rescode(), output);
  }

  // repeated .com.spplus.buff.StateBean devState = 2;
  for (int i = 0; i < this->devstate_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->devstate(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DevStateMsg_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 rescode = 1;
  if (has_rescode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rescode(), target);
  }

  // repeated .com.spplus.buff.StateBean devState = 2;
  for (int i = 0; i < this->devstate_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->devstate(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DevStateMsg_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 rescode = 1;
    if (has_rescode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rescode());
    }

  }
  // repeated .com.spplus.buff.StateBean devState = 2;
  total_size += 1 * this->devstate_size();
  for (int i = 0; i < this->devstate_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->devstate(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DevStateMsg_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DevStateMsg_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DevStateMsg_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DevStateMsg_Response::MergeFrom(const DevStateMsg_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  devstate_.MergeFrom(from.devstate_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rescode()) {
      set_rescode(from.rescode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DevStateMsg_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DevStateMsg_Response::CopyFrom(const DevStateMsg_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DevStateMsg_Response::IsInitialized() const {

  return true;
}

void DevStateMsg_Response::Swap(DevStateMsg_Response* other) {
  if (other != this) {
    std::swap(rescode_, other->rescode_);
    devstate_.Swap(&other->devstate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DevStateMsg_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DevStateMsg_Response_descriptor_;
  metadata.reflection = DevStateMsg_Response_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int DevStateMsg::kRequestFieldNumber;
const int DevStateMsg::kResponseFieldNumber;
#endif  // !_MSC_VER

DevStateMsg::DevStateMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DevStateMsg::InitAsDefaultInstance() {
  request_ = const_cast< ::com::spplus::buff::DevStateMsg_Request*>(&::com::spplus::buff::DevStateMsg_Request::default_instance());
  response_ = const_cast< ::com::spplus::buff::DevStateMsg_Response*>(&::com::spplus::buff::DevStateMsg_Response::default_instance());
}

DevStateMsg::DevStateMsg(const DevStateMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DevStateMsg::SharedCtor() {
  _cached_size_ = 0;
  request_ = NULL;
  response_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DevStateMsg::~DevStateMsg() {
  SharedDtor();
}

void DevStateMsg::SharedDtor() {
  if (this != default_instance_) {
    delete request_;
    delete response_;
  }
}

void DevStateMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DevStateMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DevStateMsg_descriptor_;
}

const DevStateMsg& DevStateMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

DevStateMsg* DevStateMsg::default_instance_ = NULL;

DevStateMsg* DevStateMsg::New() const {
  return new DevStateMsg;
}

void DevStateMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_request()) {
      if (request_ != NULL) request_->::com::spplus::buff::DevStateMsg_Request::Clear();
    }
    if (has_response()) {
      if (response_ != NULL) response_->::com::spplus::buff::DevStateMsg_Response::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DevStateMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.spplus.buff.DevStateMsg.Request request = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_response;
        break;
      }

      // optional .com.spplus.buff.DevStateMsg.Response response = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DevStateMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.spplus.buff.DevStateMsg.Request request = 1;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->request(), output);
  }

  // optional .com.spplus.buff.DevStateMsg.Response response = 2;
  if (has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->response(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DevStateMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.spplus.buff.DevStateMsg.Request request = 1;
  if (has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->request(), target);
  }

  // optional .com.spplus.buff.DevStateMsg.Response response = 2;
  if (has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->response(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DevStateMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.spplus.buff.DevStateMsg.Request request = 1;
    if (has_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->request());
    }

    // optional .com.spplus.buff.DevStateMsg.Response response = 2;
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->response());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DevStateMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DevStateMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DevStateMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DevStateMsg::MergeFrom(const DevStateMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request()) {
      mutable_request()->::com::spplus::buff::DevStateMsg_Request::MergeFrom(from.request());
    }
    if (from.has_response()) {
      mutable_response()->::com::spplus::buff::DevStateMsg_Response::MergeFrom(from.response());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DevStateMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DevStateMsg::CopyFrom(const DevStateMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DevStateMsg::IsInitialized() const {

  return true;
}

void DevStateMsg::Swap(DevStateMsg* other) {
  if (other != this) {
    std::swap(request_, other->request_);
    std::swap(response_, other->response_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DevStateMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DevStateMsg_descriptor_;
  metadata.reflection = DevStateMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StationTypeMsg_Request::kSaveIdFieldNumber;
#endif  // !_MSC_VER

StationTypeMsg_Request::StationTypeMsg_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StationTypeMsg_Request::InitAsDefaultInstance() {
}

StationTypeMsg_Request::StationTypeMsg_Request(const StationTypeMsg_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StationTypeMsg_Request::SharedCtor() {
  _cached_size_ = 0;
  saveid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StationTypeMsg_Request::~StationTypeMsg_Request() {
  SharedDtor();
}

void StationTypeMsg_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StationTypeMsg_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StationTypeMsg_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StationTypeMsg_Request_descriptor_;
}

const StationTypeMsg_Request& StationTypeMsg_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

StationTypeMsg_Request* StationTypeMsg_Request::default_instance_ = NULL;

StationTypeMsg_Request* StationTypeMsg_Request::New() const {
  return new StationTypeMsg_Request;
}

void StationTypeMsg_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    saveid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StationTypeMsg_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 saveId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &saveid_)));
          set_has_saveid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StationTypeMsg_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 saveId = 1;
  if (has_saveid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->saveid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StationTypeMsg_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 saveId = 1;
  if (has_saveid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->saveid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StationTypeMsg_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 saveId = 1;
    if (has_saveid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->saveid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StationTypeMsg_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StationTypeMsg_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StationTypeMsg_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StationTypeMsg_Request::MergeFrom(const StationTypeMsg_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_saveid()) {
      set_saveid(from.saveid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StationTypeMsg_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StationTypeMsg_Request::CopyFrom(const StationTypeMsg_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StationTypeMsg_Request::IsInitialized() const {

  return true;
}

void StationTypeMsg_Request::Swap(StationTypeMsg_Request* other) {
  if (other != this) {
    std::swap(saveid_, other->saveid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StationTypeMsg_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StationTypeMsg_Request_descriptor_;
  metadata.reflection = StationTypeMsg_Request_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int StationTypeMsg_Response::kRescodeFieldNumber;
const int StationTypeMsg_Response::kTypeListFieldNumber;
#endif  // !_MSC_VER

StationTypeMsg_Response::StationTypeMsg_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StationTypeMsg_Response::InitAsDefaultInstance() {
}

StationTypeMsg_Response::StationTypeMsg_Response(const StationTypeMsg_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StationTypeMsg_Response::SharedCtor() {
  _cached_size_ = 0;
  rescode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StationTypeMsg_Response::~StationTypeMsg_Response() {
  SharedDtor();
}

void StationTypeMsg_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StationTypeMsg_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StationTypeMsg_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StationTypeMsg_Response_descriptor_;
}

const StationTypeMsg_Response& StationTypeMsg_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

StationTypeMsg_Response* StationTypeMsg_Response::default_instance_ = NULL;

StationTypeMsg_Response* StationTypeMsg_Response::New() const {
  return new StationTypeMsg_Response;
}

void StationTypeMsg_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rescode_ = 0u;
  }
  typelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StationTypeMsg_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 rescode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rescode_)));
          set_has_rescode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_typeList;
        break;
      }

      // repeated .com.spplus.buff.StationTypeBean typeList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_typeList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_typelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_typeList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StationTypeMsg_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 rescode = 1;
  if (has_rescode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rescode(), output);
  }

  // repeated .com.spplus.buff.StationTypeBean typeList = 2;
  for (int i = 0; i < this->typelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->typelist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StationTypeMsg_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 rescode = 1;
  if (has_rescode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rescode(), target);
  }

  // repeated .com.spplus.buff.StationTypeBean typeList = 2;
  for (int i = 0; i < this->typelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->typelist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StationTypeMsg_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 rescode = 1;
    if (has_rescode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rescode());
    }

  }
  // repeated .com.spplus.buff.StationTypeBean typeList = 2;
  total_size += 1 * this->typelist_size();
  for (int i = 0; i < this->typelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->typelist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StationTypeMsg_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StationTypeMsg_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StationTypeMsg_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StationTypeMsg_Response::MergeFrom(const StationTypeMsg_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  typelist_.MergeFrom(from.typelist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rescode()) {
      set_rescode(from.rescode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StationTypeMsg_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StationTypeMsg_Response::CopyFrom(const StationTypeMsg_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StationTypeMsg_Response::IsInitialized() const {

  return true;
}

void StationTypeMsg_Response::Swap(StationTypeMsg_Response* other) {
  if (other != this) {
    std::swap(rescode_, other->rescode_);
    typelist_.Swap(&other->typelist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StationTypeMsg_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StationTypeMsg_Response_descriptor_;
  metadata.reflection = StationTypeMsg_Response_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int StationTypeMsg::kRequestFieldNumber;
const int StationTypeMsg::kResponseFieldNumber;
#endif  // !_MSC_VER

StationTypeMsg::StationTypeMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StationTypeMsg::InitAsDefaultInstance() {
  request_ = const_cast< ::com::spplus::buff::StationTypeMsg_Request*>(&::com::spplus::buff::StationTypeMsg_Request::default_instance());
  response_ = const_cast< ::com::spplus::buff::StationTypeMsg_Response*>(&::com::spplus::buff::StationTypeMsg_Response::default_instance());
}

StationTypeMsg::StationTypeMsg(const StationTypeMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StationTypeMsg::SharedCtor() {
  _cached_size_ = 0;
  request_ = NULL;
  response_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StationTypeMsg::~StationTypeMsg() {
  SharedDtor();
}

void StationTypeMsg::SharedDtor() {
  if (this != default_instance_) {
    delete request_;
    delete response_;
  }
}

void StationTypeMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StationTypeMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StationTypeMsg_descriptor_;
}

const StationTypeMsg& StationTypeMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

StationTypeMsg* StationTypeMsg::default_instance_ = NULL;

StationTypeMsg* StationTypeMsg::New() const {
  return new StationTypeMsg;
}

void StationTypeMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_request()) {
      if (request_ != NULL) request_->::com::spplus::buff::StationTypeMsg_Request::Clear();
    }
    if (has_response()) {
      if (response_ != NULL) response_->::com::spplus::buff::StationTypeMsg_Response::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StationTypeMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.spplus.buff.StationTypeMsg.Request request = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_response;
        break;
      }

      // optional .com.spplus.buff.StationTypeMsg.Response response = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StationTypeMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.spplus.buff.StationTypeMsg.Request request = 1;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->request(), output);
  }

  // optional .com.spplus.buff.StationTypeMsg.Response response = 2;
  if (has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->response(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StationTypeMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.spplus.buff.StationTypeMsg.Request request = 1;
  if (has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->request(), target);
  }

  // optional .com.spplus.buff.StationTypeMsg.Response response = 2;
  if (has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->response(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StationTypeMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.spplus.buff.StationTypeMsg.Request request = 1;
    if (has_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->request());
    }

    // optional .com.spplus.buff.StationTypeMsg.Response response = 2;
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->response());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StationTypeMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StationTypeMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StationTypeMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StationTypeMsg::MergeFrom(const StationTypeMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request()) {
      mutable_request()->::com::spplus::buff::StationTypeMsg_Request::MergeFrom(from.request());
    }
    if (from.has_response()) {
      mutable_response()->::com::spplus::buff::StationTypeMsg_Response::MergeFrom(from.response());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StationTypeMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StationTypeMsg::CopyFrom(const StationTypeMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StationTypeMsg::IsInitialized() const {

  return true;
}

void StationTypeMsg::Swap(StationTypeMsg* other) {
  if (other != this) {
    std::swap(request_, other->request_);
    std::swap(response_, other->response_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StationTypeMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StationTypeMsg_descriptor_;
  metadata.reflection = StationTypeMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StationListMsg_Request::kStationIdFieldNumber;
#endif  // !_MSC_VER

StationListMsg_Request::StationListMsg_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StationListMsg_Request::InitAsDefaultInstance() {
}

StationListMsg_Request::StationListMsg_Request(const StationListMsg_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StationListMsg_Request::SharedCtor() {
  _cached_size_ = 0;
  stationid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StationListMsg_Request::~StationListMsg_Request() {
  SharedDtor();
}

void StationListMsg_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StationListMsg_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StationListMsg_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StationListMsg_Request_descriptor_;
}

const StationListMsg_Request& StationListMsg_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

StationListMsg_Request* StationListMsg_Request::default_instance_ = NULL;

StationListMsg_Request* StationListMsg_Request::New() const {
  return new StationListMsg_Request;
}

void StationListMsg_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stationid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StationListMsg_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 stationId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stationid_)));
          set_has_stationid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StationListMsg_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 stationId = 1;
  if (has_stationid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stationid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StationListMsg_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 stationId = 1;
  if (has_stationid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->stationid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StationListMsg_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 stationId = 1;
    if (has_stationid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stationid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StationListMsg_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StationListMsg_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StationListMsg_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StationListMsg_Request::MergeFrom(const StationListMsg_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stationid()) {
      set_stationid(from.stationid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StationListMsg_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StationListMsg_Request::CopyFrom(const StationListMsg_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StationListMsg_Request::IsInitialized() const {

  return true;
}

void StationListMsg_Request::Swap(StationListMsg_Request* other) {
  if (other != this) {
    std::swap(stationid_, other->stationid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StationListMsg_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StationListMsg_Request_descriptor_;
  metadata.reflection = StationListMsg_Request_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int StationListMsg_Response::kRescodeFieldNumber;
const int StationListMsg_Response::kStationListFieldNumber;
#endif  // !_MSC_VER

StationListMsg_Response::StationListMsg_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StationListMsg_Response::InitAsDefaultInstance() {
}

StationListMsg_Response::StationListMsg_Response(const StationListMsg_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StationListMsg_Response::SharedCtor() {
  _cached_size_ = 0;
  rescode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StationListMsg_Response::~StationListMsg_Response() {
  SharedDtor();
}

void StationListMsg_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StationListMsg_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StationListMsg_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StationListMsg_Response_descriptor_;
}

const StationListMsg_Response& StationListMsg_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

StationListMsg_Response* StationListMsg_Response::default_instance_ = NULL;

StationListMsg_Response* StationListMsg_Response::New() const {
  return new StationListMsg_Response;
}

void StationListMsg_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rescode_ = 0u;
  }
  stationlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StationListMsg_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 rescode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rescode_)));
          set_has_rescode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stationList;
        break;
      }

      // repeated .com.spplus.buff.StationBean stationList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stationList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stationlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stationList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StationListMsg_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 rescode = 1;
  if (has_rescode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rescode(), output);
  }

  // repeated .com.spplus.buff.StationBean stationList = 2;
  for (int i = 0; i < this->stationlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stationlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StationListMsg_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 rescode = 1;
  if (has_rescode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rescode(), target);
  }

  // repeated .com.spplus.buff.StationBean stationList = 2;
  for (int i = 0; i < this->stationlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stationlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StationListMsg_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 rescode = 1;
    if (has_rescode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rescode());
    }

  }
  // repeated .com.spplus.buff.StationBean stationList = 2;
  total_size += 1 * this->stationlist_size();
  for (int i = 0; i < this->stationlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stationlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StationListMsg_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StationListMsg_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StationListMsg_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StationListMsg_Response::MergeFrom(const StationListMsg_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  stationlist_.MergeFrom(from.stationlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rescode()) {
      set_rescode(from.rescode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StationListMsg_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StationListMsg_Response::CopyFrom(const StationListMsg_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StationListMsg_Response::IsInitialized() const {

  return true;
}

void StationListMsg_Response::Swap(StationListMsg_Response* other) {
  if (other != this) {
    std::swap(rescode_, other->rescode_);
    stationlist_.Swap(&other->stationlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StationListMsg_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StationListMsg_Response_descriptor_;
  metadata.reflection = StationListMsg_Response_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int StationListMsg::kRequestFieldNumber;
const int StationListMsg::kResponseFieldNumber;
#endif  // !_MSC_VER

StationListMsg::StationListMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StationListMsg::InitAsDefaultInstance() {
  request_ = const_cast< ::com::spplus::buff::StationListMsg_Request*>(&::com::spplus::buff::StationListMsg_Request::default_instance());
  response_ = const_cast< ::com::spplus::buff::StationListMsg_Response*>(&::com::spplus::buff::StationListMsg_Response::default_instance());
}

StationListMsg::StationListMsg(const StationListMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StationListMsg::SharedCtor() {
  _cached_size_ = 0;
  request_ = NULL;
  response_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StationListMsg::~StationListMsg() {
  SharedDtor();
}

void StationListMsg::SharedDtor() {
  if (this != default_instance_) {
    delete request_;
    delete response_;
  }
}

void StationListMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StationListMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StationListMsg_descriptor_;
}

const StationListMsg& StationListMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

StationListMsg* StationListMsg::default_instance_ = NULL;

StationListMsg* StationListMsg::New() const {
  return new StationListMsg;
}

void StationListMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_request()) {
      if (request_ != NULL) request_->::com::spplus::buff::StationListMsg_Request::Clear();
    }
    if (has_response()) {
      if (response_ != NULL) response_->::com::spplus::buff::StationListMsg_Response::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StationListMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.spplus.buff.StationListMsg.Request request = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_response;
        break;
      }

      // optional .com.spplus.buff.StationListMsg.Response response = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StationListMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.spplus.buff.StationListMsg.Request request = 1;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->request(), output);
  }

  // optional .com.spplus.buff.StationListMsg.Response response = 2;
  if (has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->response(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StationListMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.spplus.buff.StationListMsg.Request request = 1;
  if (has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->request(), target);
  }

  // optional .com.spplus.buff.StationListMsg.Response response = 2;
  if (has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->response(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StationListMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.spplus.buff.StationListMsg.Request request = 1;
    if (has_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->request());
    }

    // optional .com.spplus.buff.StationListMsg.Response response = 2;
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->response());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StationListMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StationListMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StationListMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StationListMsg::MergeFrom(const StationListMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request()) {
      mutable_request()->::com::spplus::buff::StationListMsg_Request::MergeFrom(from.request());
    }
    if (from.has_response()) {
      mutable_response()->::com::spplus::buff::StationListMsg_Response::MergeFrom(from.response());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StationListMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StationListMsg::CopyFrom(const StationListMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StationListMsg::IsInitialized() const {

  return true;
}

void StationListMsg::Swap(StationListMsg* other) {
  if (other != this) {
    std::swap(request_, other->request_);
    std::swap(response_, other->response_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StationListMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StationListMsg_descriptor_;
  metadata.reflection = StationListMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TagMsg_Request::kSaveIdFieldNumber;
const int TagMsg_Request::kTypeFieldNumber;
const int TagMsg_Request::kUnitCimFieldNumber;
#endif  // !_MSC_VER

TagMsg_Request::TagMsg_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TagMsg_Request::InitAsDefaultInstance() {
}

TagMsg_Request::TagMsg_Request(const TagMsg_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TagMsg_Request::SharedCtor() {
  _cached_size_ = 0;
  saveid_ = 0u;
  type_ = 0u;
  unitcim_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TagMsg_Request::~TagMsg_Request() {
  SharedDtor();
}

void TagMsg_Request::SharedDtor() {
  if (unitcim_ != &::google::protobuf::internal::kEmptyString) {
    delete unitcim_;
  }
  if (this != default_instance_) {
  }
}

void TagMsg_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TagMsg_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TagMsg_Request_descriptor_;
}

const TagMsg_Request& TagMsg_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

TagMsg_Request* TagMsg_Request::default_instance_ = NULL;

TagMsg_Request* TagMsg_Request::New() const {
  return new TagMsg_Request;
}

void TagMsg_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    saveid_ = 0u;
    type_ = 0u;
    if (has_unitcim()) {
      if (unitcim_ != &::google::protobuf::internal::kEmptyString) {
        unitcim_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TagMsg_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 saveId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &saveid_)));
          set_has_saveid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional uint32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_unitCim;
        break;
      }

      // optional bytes unitCim = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unitCim:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_unitcim()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TagMsg_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 saveId = 1;
  if (has_saveid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->saveid(), output);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // optional bytes unitCim = 3;
  if (has_unitcim()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->unitcim(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TagMsg_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 saveId = 1;
  if (has_saveid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->saveid(), target);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // optional bytes unitCim = 3;
  if (has_unitcim()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->unitcim(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TagMsg_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 saveId = 1;
    if (has_saveid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->saveid());
    }

    // optional uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional bytes unitCim = 3;
    if (has_unitcim()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->unitcim());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TagMsg_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TagMsg_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TagMsg_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TagMsg_Request::MergeFrom(const TagMsg_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_saveid()) {
      set_saveid(from.saveid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_unitcim()) {
      set_unitcim(from.unitcim());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TagMsg_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TagMsg_Request::CopyFrom(const TagMsg_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TagMsg_Request::IsInitialized() const {

  return true;
}

void TagMsg_Request::Swap(TagMsg_Request* other) {
  if (other != this) {
    std::swap(saveid_, other->saveid_);
    std::swap(type_, other->type_);
    std::swap(unitcim_, other->unitcim_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TagMsg_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TagMsg_Request_descriptor_;
  metadata.reflection = TagMsg_Request_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int TagMsg_Response::kRescodeFieldNumber;
const int TagMsg_Response::kResmsgFieldNumber;
#endif  // !_MSC_VER

TagMsg_Response::TagMsg_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TagMsg_Response::InitAsDefaultInstance() {
}

TagMsg_Response::TagMsg_Response(const TagMsg_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TagMsg_Response::SharedCtor() {
  _cached_size_ = 0;
  rescode_ = 0u;
  resmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TagMsg_Response::~TagMsg_Response() {
  SharedDtor();
}

void TagMsg_Response::SharedDtor() {
  if (resmsg_ != &::google::protobuf::internal::kEmptyString) {
    delete resmsg_;
  }
  if (this != default_instance_) {
  }
}

void TagMsg_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TagMsg_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TagMsg_Response_descriptor_;
}

const TagMsg_Response& TagMsg_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

TagMsg_Response* TagMsg_Response::default_instance_ = NULL;

TagMsg_Response* TagMsg_Response::New() const {
  return new TagMsg_Response;
}

void TagMsg_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rescode_ = 0u;
    if (has_resmsg()) {
      if (resmsg_ != &::google::protobuf::internal::kEmptyString) {
        resmsg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TagMsg_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 rescode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rescode_)));
          set_has_rescode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_resmsg;
        break;
      }

      // optional bytes resmsg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resmsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_resmsg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TagMsg_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 rescode = 1;
  if (has_rescode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rescode(), output);
  }

  // optional bytes resmsg = 2;
  if (has_resmsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->resmsg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TagMsg_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 rescode = 1;
  if (has_rescode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rescode(), target);
  }

  // optional bytes resmsg = 2;
  if (has_resmsg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->resmsg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TagMsg_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 rescode = 1;
    if (has_rescode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rescode());
    }

    // optional bytes resmsg = 2;
    if (has_resmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->resmsg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TagMsg_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TagMsg_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TagMsg_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TagMsg_Response::MergeFrom(const TagMsg_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rescode()) {
      set_rescode(from.rescode());
    }
    if (from.has_resmsg()) {
      set_resmsg(from.resmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TagMsg_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TagMsg_Response::CopyFrom(const TagMsg_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TagMsg_Response::IsInitialized() const {

  return true;
}

void TagMsg_Response::Swap(TagMsg_Response* other) {
  if (other != this) {
    std::swap(rescode_, other->rescode_);
    std::swap(resmsg_, other->resmsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TagMsg_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TagMsg_Response_descriptor_;
  metadata.reflection = TagMsg_Response_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int TagMsg::kRequestFieldNumber;
const int TagMsg::kResponseFieldNumber;
#endif  // !_MSC_VER

TagMsg::TagMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TagMsg::InitAsDefaultInstance() {
  request_ = const_cast< ::com::spplus::buff::TagMsg_Request*>(&::com::spplus::buff::TagMsg_Request::default_instance());
  response_ = const_cast< ::com::spplus::buff::TagMsg_Response*>(&::com::spplus::buff::TagMsg_Response::default_instance());
}

TagMsg::TagMsg(const TagMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TagMsg::SharedCtor() {
  _cached_size_ = 0;
  request_ = NULL;
  response_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TagMsg::~TagMsg() {
  SharedDtor();
}

void TagMsg::SharedDtor() {
  if (this != default_instance_) {
    delete request_;
    delete response_;
  }
}

void TagMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TagMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TagMsg_descriptor_;
}

const TagMsg& TagMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

TagMsg* TagMsg::default_instance_ = NULL;

TagMsg* TagMsg::New() const {
  return new TagMsg;
}

void TagMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_request()) {
      if (request_ != NULL) request_->::com::spplus::buff::TagMsg_Request::Clear();
    }
    if (has_response()) {
      if (response_ != NULL) response_->::com::spplus::buff::TagMsg_Response::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TagMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.spplus.buff.TagMsg.Request request = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_response;
        break;
      }

      // optional .com.spplus.buff.TagMsg.Response response = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TagMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.spplus.buff.TagMsg.Request request = 1;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->request(), output);
  }

  // optional .com.spplus.buff.TagMsg.Response response = 2;
  if (has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->response(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TagMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.spplus.buff.TagMsg.Request request = 1;
  if (has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->request(), target);
  }

  // optional .com.spplus.buff.TagMsg.Response response = 2;
  if (has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->response(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TagMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.spplus.buff.TagMsg.Request request = 1;
    if (has_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->request());
    }

    // optional .com.spplus.buff.TagMsg.Response response = 2;
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->response());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TagMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TagMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TagMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TagMsg::MergeFrom(const TagMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request()) {
      mutable_request()->::com::spplus::buff::TagMsg_Request::MergeFrom(from.request());
    }
    if (from.has_response()) {
      mutable_response()->::com::spplus::buff::TagMsg_Response::MergeFrom(from.response());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TagMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TagMsg::CopyFrom(const TagMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TagMsg::IsInitialized() const {

  return true;
}

void TagMsg::Swap(TagMsg* other) {
  if (other != this) {
    std::swap(request_, other->request_);
    std::swap(response_, other->response_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TagMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TagMsg_descriptor_;
  metadata.reflection = TagMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OprationMsg_Request::kSaveIdFieldNumber;
const int OprationMsg_Request::kTypeFieldNumber;
const int OprationMsg_Request::kUnitCimFieldNumber;
const int OprationMsg_Request::kIscheckFieldNumber;
const int OprationMsg_Request::kUnittypeFieldNumber;
#endif  // !_MSC_VER

OprationMsg_Request::OprationMsg_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OprationMsg_Request::InitAsDefaultInstance() {
}

OprationMsg_Request::OprationMsg_Request(const OprationMsg_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OprationMsg_Request::SharedCtor() {
  _cached_size_ = 0;
  saveid_ = 0u;
  type_ = 0u;
  unitcim_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ischeck_ = false;
  unittype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OprationMsg_Request::~OprationMsg_Request() {
  SharedDtor();
}

void OprationMsg_Request::SharedDtor() {
  if (unitcim_ != &::google::protobuf::internal::kEmptyString) {
    delete unitcim_;
  }
  if (this != default_instance_) {
  }
}

void OprationMsg_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OprationMsg_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OprationMsg_Request_descriptor_;
}

const OprationMsg_Request& OprationMsg_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

OprationMsg_Request* OprationMsg_Request::default_instance_ = NULL;

OprationMsg_Request* OprationMsg_Request::New() const {
  return new OprationMsg_Request;
}

void OprationMsg_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    saveid_ = 0u;
    type_ = 0u;
    if (has_unitcim()) {
      if (unitcim_ != &::google::protobuf::internal::kEmptyString) {
        unitcim_->clear();
      }
    }
    ischeck_ = false;
    unittype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OprationMsg_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 saveId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &saveid_)));
          set_has_saveid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional uint32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_unitCim;
        break;
      }

      // optional bytes unitCim = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unitCim:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_unitcim()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ischeck;
        break;
      }

      // optional bool ischeck = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ischeck:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ischeck_)));
          set_has_ischeck();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_unittype;
        break;
      }

      // optional uint32 unittype = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unittype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unittype_)));
          set_has_unittype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OprationMsg_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 saveId = 1;
  if (has_saveid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->saveid(), output);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // optional bytes unitCim = 3;
  if (has_unitcim()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->unitcim(), output);
  }

  // optional bool ischeck = 4;
  if (has_ischeck()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->ischeck(), output);
  }

  // optional uint32 unittype = 5;
  if (has_unittype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->unittype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OprationMsg_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 saveId = 1;
  if (has_saveid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->saveid(), target);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // optional bytes unitCim = 3;
  if (has_unitcim()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->unitcim(), target);
  }

  // optional bool ischeck = 4;
  if (has_ischeck()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->ischeck(), target);
  }

  // optional uint32 unittype = 5;
  if (has_unittype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->unittype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OprationMsg_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 saveId = 1;
    if (has_saveid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->saveid());
    }

    // optional uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional bytes unitCim = 3;
    if (has_unitcim()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->unitcim());
    }

    // optional bool ischeck = 4;
    if (has_ischeck()) {
      total_size += 1 + 1;
    }

    // optional uint32 unittype = 5;
    if (has_unittype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unittype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OprationMsg_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OprationMsg_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OprationMsg_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OprationMsg_Request::MergeFrom(const OprationMsg_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_saveid()) {
      set_saveid(from.saveid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_unitcim()) {
      set_unitcim(from.unitcim());
    }
    if (from.has_ischeck()) {
      set_ischeck(from.ischeck());
    }
    if (from.has_unittype()) {
      set_unittype(from.unittype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OprationMsg_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OprationMsg_Request::CopyFrom(const OprationMsg_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OprationMsg_Request::IsInitialized() const {

  return true;
}

void OprationMsg_Request::Swap(OprationMsg_Request* other) {
  if (other != this) {
    std::swap(saveid_, other->saveid_);
    std::swap(type_, other->type_);
    std::swap(unitcim_, other->unitcim_);
    std::swap(ischeck_, other->ischeck_);
    std::swap(unittype_, other->unittype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OprationMsg_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OprationMsg_Request_descriptor_;
  metadata.reflection = OprationMsg_Request_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int OprationMsg_Response::kRescodeFieldNumber;
const int OprationMsg_Response::kResmsgFieldNumber;
const int OprationMsg_Response::kDevStateFieldNumber;
const int OprationMsg_Response::kRuleListFieldNumber;
const int OprationMsg_Response::kOptypeFieldNumber;
#endif  // !_MSC_VER

OprationMsg_Response::OprationMsg_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OprationMsg_Response::InitAsDefaultInstance() {
}

OprationMsg_Response::OprationMsg_Response(const OprationMsg_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OprationMsg_Response::SharedCtor() {
  _cached_size_ = 0;
  rescode_ = 0u;
  resmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  optype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OprationMsg_Response::~OprationMsg_Response() {
  SharedDtor();
}

void OprationMsg_Response::SharedDtor() {
  if (resmsg_ != &::google::protobuf::internal::kEmptyString) {
    delete resmsg_;
  }
  if (this != default_instance_) {
  }
}

void OprationMsg_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OprationMsg_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OprationMsg_Response_descriptor_;
}

const OprationMsg_Response& OprationMsg_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

OprationMsg_Response* OprationMsg_Response::default_instance_ = NULL;

OprationMsg_Response* OprationMsg_Response::New() const {
  return new OprationMsg_Response;
}

void OprationMsg_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rescode_ = 0u;
    if (has_resmsg()) {
      if (resmsg_ != &::google::protobuf::internal::kEmptyString) {
        resmsg_->clear();
      }
    }
    optype_ = 0u;
  }
  devstate_.Clear();
  rulelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OprationMsg_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 rescode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rescode_)));
          set_has_rescode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_resmsg;
        break;
      }

      // optional bytes resmsg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resmsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_resmsg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_devState;
        break;
      }

      // repeated .com.spplus.buff.StateBean devState = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_devState:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_devstate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_devState;
        if (input->ExpectTag(34)) goto parse_ruleList;
        break;
      }

      // repeated .com.spplus.buff.RuleBean ruleList = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ruleList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rulelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ruleList;
        if (input->ExpectTag(40)) goto parse_optype;
        break;
      }

      // optional uint32 optype = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_optype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &optype_)));
          set_has_optype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OprationMsg_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 rescode = 1;
  if (has_rescode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rescode(), output);
  }

  // optional bytes resmsg = 2;
  if (has_resmsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->resmsg(), output);
  }

  // repeated .com.spplus.buff.StateBean devState = 3;
  for (int i = 0; i < this->devstate_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->devstate(i), output);
  }

  // repeated .com.spplus.buff.RuleBean ruleList = 4;
  for (int i = 0; i < this->rulelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->rulelist(i), output);
  }

  // optional uint32 optype = 5;
  if (has_optype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->optype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OprationMsg_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 rescode = 1;
  if (has_rescode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rescode(), target);
  }

  // optional bytes resmsg = 2;
  if (has_resmsg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->resmsg(), target);
  }

  // repeated .com.spplus.buff.StateBean devState = 3;
  for (int i = 0; i < this->devstate_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->devstate(i), target);
  }

  // repeated .com.spplus.buff.RuleBean ruleList = 4;
  for (int i = 0; i < this->rulelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->rulelist(i), target);
  }

  // optional uint32 optype = 5;
  if (has_optype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->optype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OprationMsg_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 rescode = 1;
    if (has_rescode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rescode());
    }

    // optional bytes resmsg = 2;
    if (has_resmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->resmsg());
    }

    // optional uint32 optype = 5;
    if (has_optype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->optype());
    }

  }
  // repeated .com.spplus.buff.StateBean devState = 3;
  total_size += 1 * this->devstate_size();
  for (int i = 0; i < this->devstate_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->devstate(i));
  }

  // repeated .com.spplus.buff.RuleBean ruleList = 4;
  total_size += 1 * this->rulelist_size();
  for (int i = 0; i < this->rulelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rulelist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OprationMsg_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OprationMsg_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OprationMsg_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OprationMsg_Response::MergeFrom(const OprationMsg_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  devstate_.MergeFrom(from.devstate_);
  rulelist_.MergeFrom(from.rulelist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rescode()) {
      set_rescode(from.rescode());
    }
    if (from.has_resmsg()) {
      set_resmsg(from.resmsg());
    }
    if (from.has_optype()) {
      set_optype(from.optype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OprationMsg_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OprationMsg_Response::CopyFrom(const OprationMsg_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OprationMsg_Response::IsInitialized() const {

  return true;
}

void OprationMsg_Response::Swap(OprationMsg_Response* other) {
  if (other != this) {
    std::swap(rescode_, other->rescode_);
    std::swap(resmsg_, other->resmsg_);
    devstate_.Swap(&other->devstate_);
    rulelist_.Swap(&other->rulelist_);
    std::swap(optype_, other->optype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OprationMsg_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OprationMsg_Response_descriptor_;
  metadata.reflection = OprationMsg_Response_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int OprationMsg::kRequestFieldNumber;
const int OprationMsg::kResponseFieldNumber;
#endif  // !_MSC_VER

OprationMsg::OprationMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OprationMsg::InitAsDefaultInstance() {
  request_ = const_cast< ::com::spplus::buff::OprationMsg_Request*>(&::com::spplus::buff::OprationMsg_Request::default_instance());
  response_ = const_cast< ::com::spplus::buff::OprationMsg_Response*>(&::com::spplus::buff::OprationMsg_Response::default_instance());
}

OprationMsg::OprationMsg(const OprationMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OprationMsg::SharedCtor() {
  _cached_size_ = 0;
  request_ = NULL;
  response_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OprationMsg::~OprationMsg() {
  SharedDtor();
}

void OprationMsg::SharedDtor() {
  if (this != default_instance_) {
    delete request_;
    delete response_;
  }
}

void OprationMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OprationMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OprationMsg_descriptor_;
}

const OprationMsg& OprationMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

OprationMsg* OprationMsg::default_instance_ = NULL;

OprationMsg* OprationMsg::New() const {
  return new OprationMsg;
}

void OprationMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_request()) {
      if (request_ != NULL) request_->::com::spplus::buff::OprationMsg_Request::Clear();
    }
    if (has_response()) {
      if (response_ != NULL) response_->::com::spplus::buff::OprationMsg_Response::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OprationMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.spplus.buff.OprationMsg.Request request = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_response;
        break;
      }

      // optional .com.spplus.buff.OprationMsg.Response response = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OprationMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.spplus.buff.OprationMsg.Request request = 1;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->request(), output);
  }

  // optional .com.spplus.buff.OprationMsg.Response response = 2;
  if (has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->response(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OprationMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.spplus.buff.OprationMsg.Request request = 1;
  if (has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->request(), target);
  }

  // optional .com.spplus.buff.OprationMsg.Response response = 2;
  if (has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->response(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OprationMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.spplus.buff.OprationMsg.Request request = 1;
    if (has_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->request());
    }

    // optional .com.spplus.buff.OprationMsg.Response response = 2;
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->response());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OprationMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OprationMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OprationMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OprationMsg::MergeFrom(const OprationMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request()) {
      mutable_request()->::com::spplus::buff::OprationMsg_Request::MergeFrom(from.request());
    }
    if (from.has_response()) {
      mutable_response()->::com::spplus::buff::OprationMsg_Response::MergeFrom(from.response());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OprationMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OprationMsg::CopyFrom(const OprationMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OprationMsg::IsInitialized() const {

  return true;
}

void OprationMsg::Swap(OprationMsg* other) {
  if (other != this) {
    std::swap(request_, other->request_);
    std::swap(response_, other->response_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OprationMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OprationMsg_descriptor_;
  metadata.reflection = OprationMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PowerSetMsg_Request::kStationCimFieldNumber;
const int PowerSetMsg_Request::kUnitCimFieldNumber;
#endif  // !_MSC_VER

PowerSetMsg_Request::PowerSetMsg_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PowerSetMsg_Request::InitAsDefaultInstance() {
}

PowerSetMsg_Request::PowerSetMsg_Request(const PowerSetMsg_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PowerSetMsg_Request::SharedCtor() {
  _cached_size_ = 0;
  stationcim_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  unitcim_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PowerSetMsg_Request::~PowerSetMsg_Request() {
  SharedDtor();
}

void PowerSetMsg_Request::SharedDtor() {
  if (stationcim_ != &::google::protobuf::internal::kEmptyString) {
    delete stationcim_;
  }
  if (unitcim_ != &::google::protobuf::internal::kEmptyString) {
    delete unitcim_;
  }
  if (this != default_instance_) {
  }
}

void PowerSetMsg_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PowerSetMsg_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PowerSetMsg_Request_descriptor_;
}

const PowerSetMsg_Request& PowerSetMsg_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

PowerSetMsg_Request* PowerSetMsg_Request::default_instance_ = NULL;

PowerSetMsg_Request* PowerSetMsg_Request::New() const {
  return new PowerSetMsg_Request;
}

void PowerSetMsg_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_stationcim()) {
      if (stationcim_ != &::google::protobuf::internal::kEmptyString) {
        stationcim_->clear();
      }
    }
    if (has_unitcim()) {
      if (unitcim_ != &::google::protobuf::internal::kEmptyString) {
        unitcim_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PowerSetMsg_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes stationCim = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_stationcim()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_unitCim;
        break;
      }

      // optional bytes unitCim = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unitCim:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_unitcim()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PowerSetMsg_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes stationCim = 1;
  if (has_stationcim()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->stationcim(), output);
  }

  // optional bytes unitCim = 2;
  if (has_unitcim()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->unitcim(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PowerSetMsg_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes stationCim = 1;
  if (has_stationcim()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->stationcim(), target);
  }

  // optional bytes unitCim = 2;
  if (has_unitcim()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->unitcim(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PowerSetMsg_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes stationCim = 1;
    if (has_stationcim()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->stationcim());
    }

    // optional bytes unitCim = 2;
    if (has_unitcim()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->unitcim());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PowerSetMsg_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PowerSetMsg_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PowerSetMsg_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PowerSetMsg_Request::MergeFrom(const PowerSetMsg_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stationcim()) {
      set_stationcim(from.stationcim());
    }
    if (from.has_unitcim()) {
      set_unitcim(from.unitcim());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PowerSetMsg_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PowerSetMsg_Request::CopyFrom(const PowerSetMsg_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PowerSetMsg_Request::IsInitialized() const {

  return true;
}

void PowerSetMsg_Request::Swap(PowerSetMsg_Request* other) {
  if (other != this) {
    std::swap(stationcim_, other->stationcim_);
    std::swap(unitcim_, other->unitcim_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PowerSetMsg_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PowerSetMsg_Request_descriptor_;
  metadata.reflection = PowerSetMsg_Request_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int PowerSetMsg_Response::kRescodeFieldNumber;
const int PowerSetMsg_Response::kResmsgFieldNumber;
#endif  // !_MSC_VER

PowerSetMsg_Response::PowerSetMsg_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PowerSetMsg_Response::InitAsDefaultInstance() {
}

PowerSetMsg_Response::PowerSetMsg_Response(const PowerSetMsg_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PowerSetMsg_Response::SharedCtor() {
  _cached_size_ = 0;
  rescode_ = 0u;
  resmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PowerSetMsg_Response::~PowerSetMsg_Response() {
  SharedDtor();
}

void PowerSetMsg_Response::SharedDtor() {
  if (resmsg_ != &::google::protobuf::internal::kEmptyString) {
    delete resmsg_;
  }
  if (this != default_instance_) {
  }
}

void PowerSetMsg_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PowerSetMsg_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PowerSetMsg_Response_descriptor_;
}

const PowerSetMsg_Response& PowerSetMsg_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

PowerSetMsg_Response* PowerSetMsg_Response::default_instance_ = NULL;

PowerSetMsg_Response* PowerSetMsg_Response::New() const {
  return new PowerSetMsg_Response;
}

void PowerSetMsg_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rescode_ = 0u;
    if (has_resmsg()) {
      if (resmsg_ != &::google::protobuf::internal::kEmptyString) {
        resmsg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PowerSetMsg_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 rescode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rescode_)));
          set_has_rescode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_resmsg;
        break;
      }

      // optional bytes resmsg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resmsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_resmsg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PowerSetMsg_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 rescode = 1;
  if (has_rescode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rescode(), output);
  }

  // optional bytes resmsg = 2;
  if (has_resmsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->resmsg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PowerSetMsg_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 rescode = 1;
  if (has_rescode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rescode(), target);
  }

  // optional bytes resmsg = 2;
  if (has_resmsg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->resmsg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PowerSetMsg_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 rescode = 1;
    if (has_rescode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rescode());
    }

    // optional bytes resmsg = 2;
    if (has_resmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->resmsg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PowerSetMsg_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PowerSetMsg_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PowerSetMsg_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PowerSetMsg_Response::MergeFrom(const PowerSetMsg_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rescode()) {
      set_rescode(from.rescode());
    }
    if (from.has_resmsg()) {
      set_resmsg(from.resmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PowerSetMsg_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PowerSetMsg_Response::CopyFrom(const PowerSetMsg_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PowerSetMsg_Response::IsInitialized() const {

  return true;
}

void PowerSetMsg_Response::Swap(PowerSetMsg_Response* other) {
  if (other != this) {
    std::swap(rescode_, other->rescode_);
    std::swap(resmsg_, other->resmsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PowerSetMsg_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PowerSetMsg_Response_descriptor_;
  metadata.reflection = PowerSetMsg_Response_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int PowerSetMsg::kRequestFieldNumber;
const int PowerSetMsg::kResponseFieldNumber;
#endif  // !_MSC_VER

PowerSetMsg::PowerSetMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PowerSetMsg::InitAsDefaultInstance() {
  request_ = const_cast< ::com::spplus::buff::PowerSetMsg_Request*>(&::com::spplus::buff::PowerSetMsg_Request::default_instance());
  response_ = const_cast< ::com::spplus::buff::PowerSetMsg_Response*>(&::com::spplus::buff::PowerSetMsg_Response::default_instance());
}

PowerSetMsg::PowerSetMsg(const PowerSetMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PowerSetMsg::SharedCtor() {
  _cached_size_ = 0;
  request_ = NULL;
  response_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PowerSetMsg::~PowerSetMsg() {
  SharedDtor();
}

void PowerSetMsg::SharedDtor() {
  if (this != default_instance_) {
    delete request_;
    delete response_;
  }
}

void PowerSetMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PowerSetMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PowerSetMsg_descriptor_;
}

const PowerSetMsg& PowerSetMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

PowerSetMsg* PowerSetMsg::default_instance_ = NULL;

PowerSetMsg* PowerSetMsg::New() const {
  return new PowerSetMsg;
}

void PowerSetMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_request()) {
      if (request_ != NULL) request_->::com::spplus::buff::PowerSetMsg_Request::Clear();
    }
    if (has_response()) {
      if (response_ != NULL) response_->::com::spplus::buff::PowerSetMsg_Response::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PowerSetMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.spplus.buff.PowerSetMsg.Request request = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_response;
        break;
      }

      // optional .com.spplus.buff.PowerSetMsg.Response response = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PowerSetMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.spplus.buff.PowerSetMsg.Request request = 1;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->request(), output);
  }

  // optional .com.spplus.buff.PowerSetMsg.Response response = 2;
  if (has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->response(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PowerSetMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.spplus.buff.PowerSetMsg.Request request = 1;
  if (has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->request(), target);
  }

  // optional .com.spplus.buff.PowerSetMsg.Response response = 2;
  if (has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->response(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PowerSetMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.spplus.buff.PowerSetMsg.Request request = 1;
    if (has_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->request());
    }

    // optional .com.spplus.buff.PowerSetMsg.Response response = 2;
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->response());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PowerSetMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PowerSetMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PowerSetMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PowerSetMsg::MergeFrom(const PowerSetMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request()) {
      mutable_request()->::com::spplus::buff::PowerSetMsg_Request::MergeFrom(from.request());
    }
    if (from.has_response()) {
      mutable_response()->::com::spplus::buff::PowerSetMsg_Response::MergeFrom(from.response());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PowerSetMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PowerSetMsg::CopyFrom(const PowerSetMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PowerSetMsg::IsInitialized() const {

  return true;
}

void PowerSetMsg::Swap(PowerSetMsg* other) {
  if (other != this) {
    std::swap(request_, other->request_);
    std::swap(response_, other->response_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PowerSetMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PowerSetMsg_descriptor_;
  metadata.reflection = PowerSetMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LineSetMsg_Request::kUnitCimFieldNumber;
const int LineSetMsg_Request::kStationOneCimFieldNumber;
const int LineSetMsg_Request::kStationOtherCimFieldNumber;
#endif  // !_MSC_VER

LineSetMsg_Request::LineSetMsg_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LineSetMsg_Request::InitAsDefaultInstance() {
}

LineSetMsg_Request::LineSetMsg_Request(const LineSetMsg_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LineSetMsg_Request::SharedCtor() {
  _cached_size_ = 0;
  unitcim_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  stationonecim_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  stationothercim_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LineSetMsg_Request::~LineSetMsg_Request() {
  SharedDtor();
}

void LineSetMsg_Request::SharedDtor() {
  if (unitcim_ != &::google::protobuf::internal::kEmptyString) {
    delete unitcim_;
  }
  if (stationonecim_ != &::google::protobuf::internal::kEmptyString) {
    delete stationonecim_;
  }
  if (stationothercim_ != &::google::protobuf::internal::kEmptyString) {
    delete stationothercim_;
  }
  if (this != default_instance_) {
  }
}

void LineSetMsg_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LineSetMsg_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LineSetMsg_Request_descriptor_;
}

const LineSetMsg_Request& LineSetMsg_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

LineSetMsg_Request* LineSetMsg_Request::default_instance_ = NULL;

LineSetMsg_Request* LineSetMsg_Request::New() const {
  return new LineSetMsg_Request;
}

void LineSetMsg_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_unitcim()) {
      if (unitcim_ != &::google::protobuf::internal::kEmptyString) {
        unitcim_->clear();
      }
    }
    if (has_stationonecim()) {
      if (stationonecim_ != &::google::protobuf::internal::kEmptyString) {
        stationonecim_->clear();
      }
    }
    if (has_stationothercim()) {
      if (stationothercim_ != &::google::protobuf::internal::kEmptyString) {
        stationothercim_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LineSetMsg_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes unitCim = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_unitcim()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stationOneCim;
        break;
      }

      // optional bytes stationOneCim = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stationOneCim:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_stationonecim()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stationOtherCim;
        break;
      }

      // optional bytes stationOtherCim = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stationOtherCim:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_stationothercim()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LineSetMsg_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes unitCim = 1;
  if (has_unitcim()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->unitcim(), output);
  }

  // optional bytes stationOneCim = 2;
  if (has_stationonecim()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->stationonecim(), output);
  }

  // optional bytes stationOtherCim = 3;
  if (has_stationothercim()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->stationothercim(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LineSetMsg_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes unitCim = 1;
  if (has_unitcim()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->unitcim(), target);
  }

  // optional bytes stationOneCim = 2;
  if (has_stationonecim()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->stationonecim(), target);
  }

  // optional bytes stationOtherCim = 3;
  if (has_stationothercim()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->stationothercim(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LineSetMsg_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes unitCim = 1;
    if (has_unitcim()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->unitcim());
    }

    // optional bytes stationOneCim = 2;
    if (has_stationonecim()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->stationonecim());
    }

    // optional bytes stationOtherCim = 3;
    if (has_stationothercim()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->stationothercim());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LineSetMsg_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LineSetMsg_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LineSetMsg_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LineSetMsg_Request::MergeFrom(const LineSetMsg_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unitcim()) {
      set_unitcim(from.unitcim());
    }
    if (from.has_stationonecim()) {
      set_stationonecim(from.stationonecim());
    }
    if (from.has_stationothercim()) {
      set_stationothercim(from.stationothercim());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LineSetMsg_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LineSetMsg_Request::CopyFrom(const LineSetMsg_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LineSetMsg_Request::IsInitialized() const {

  return true;
}

void LineSetMsg_Request::Swap(LineSetMsg_Request* other) {
  if (other != this) {
    std::swap(unitcim_, other->unitcim_);
    std::swap(stationonecim_, other->stationonecim_);
    std::swap(stationothercim_, other->stationothercim_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LineSetMsg_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LineSetMsg_Request_descriptor_;
  metadata.reflection = LineSetMsg_Request_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int LineSetMsg_Response::kRescodeFieldNumber;
const int LineSetMsg_Response::kResmsgFieldNumber;
#endif  // !_MSC_VER

LineSetMsg_Response::LineSetMsg_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LineSetMsg_Response::InitAsDefaultInstance() {
}

LineSetMsg_Response::LineSetMsg_Response(const LineSetMsg_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LineSetMsg_Response::SharedCtor() {
  _cached_size_ = 0;
  rescode_ = 0u;
  resmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LineSetMsg_Response::~LineSetMsg_Response() {
  SharedDtor();
}

void LineSetMsg_Response::SharedDtor() {
  if (resmsg_ != &::google::protobuf::internal::kEmptyString) {
    delete resmsg_;
  }
  if (this != default_instance_) {
  }
}

void LineSetMsg_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LineSetMsg_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LineSetMsg_Response_descriptor_;
}

const LineSetMsg_Response& LineSetMsg_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

LineSetMsg_Response* LineSetMsg_Response::default_instance_ = NULL;

LineSetMsg_Response* LineSetMsg_Response::New() const {
  return new LineSetMsg_Response;
}

void LineSetMsg_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rescode_ = 0u;
    if (has_resmsg()) {
      if (resmsg_ != &::google::protobuf::internal::kEmptyString) {
        resmsg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LineSetMsg_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 rescode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rescode_)));
          set_has_rescode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_resmsg;
        break;
      }

      // optional bytes resmsg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resmsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_resmsg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LineSetMsg_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 rescode = 1;
  if (has_rescode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rescode(), output);
  }

  // optional bytes resmsg = 2;
  if (has_resmsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->resmsg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LineSetMsg_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 rescode = 1;
  if (has_rescode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rescode(), target);
  }

  // optional bytes resmsg = 2;
  if (has_resmsg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->resmsg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LineSetMsg_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 rescode = 1;
    if (has_rescode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rescode());
    }

    // optional bytes resmsg = 2;
    if (has_resmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->resmsg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LineSetMsg_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LineSetMsg_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LineSetMsg_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LineSetMsg_Response::MergeFrom(const LineSetMsg_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rescode()) {
      set_rescode(from.rescode());
    }
    if (from.has_resmsg()) {
      set_resmsg(from.resmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LineSetMsg_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LineSetMsg_Response::CopyFrom(const LineSetMsg_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LineSetMsg_Response::IsInitialized() const {

  return true;
}

void LineSetMsg_Response::Swap(LineSetMsg_Response* other) {
  if (other != this) {
    std::swap(rescode_, other->rescode_);
    std::swap(resmsg_, other->resmsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LineSetMsg_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LineSetMsg_Response_descriptor_;
  metadata.reflection = LineSetMsg_Response_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int LineSetMsg::kRequestFieldNumber;
const int LineSetMsg::kResponseFieldNumber;
#endif  // !_MSC_VER

LineSetMsg::LineSetMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LineSetMsg::InitAsDefaultInstance() {
  request_ = const_cast< ::com::spplus::buff::LineSetMsg_Request*>(&::com::spplus::buff::LineSetMsg_Request::default_instance());
  response_ = const_cast< ::com::spplus::buff::LineSetMsg_Response*>(&::com::spplus::buff::LineSetMsg_Response::default_instance());
}

LineSetMsg::LineSetMsg(const LineSetMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LineSetMsg::SharedCtor() {
  _cached_size_ = 0;
  request_ = NULL;
  response_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LineSetMsg::~LineSetMsg() {
  SharedDtor();
}

void LineSetMsg::SharedDtor() {
  if (this != default_instance_) {
    delete request_;
    delete response_;
  }
}

void LineSetMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LineSetMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LineSetMsg_descriptor_;
}

const LineSetMsg& LineSetMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

LineSetMsg* LineSetMsg::default_instance_ = NULL;

LineSetMsg* LineSetMsg::New() const {
  return new LineSetMsg;
}

void LineSetMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_request()) {
      if (request_ != NULL) request_->::com::spplus::buff::LineSetMsg_Request::Clear();
    }
    if (has_response()) {
      if (response_ != NULL) response_->::com::spplus::buff::LineSetMsg_Response::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LineSetMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.spplus.buff.LineSetMsg.Request request = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_response;
        break;
      }

      // optional .com.spplus.buff.LineSetMsg.Response response = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LineSetMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.spplus.buff.LineSetMsg.Request request = 1;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->request(), output);
  }

  // optional .com.spplus.buff.LineSetMsg.Response response = 2;
  if (has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->response(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LineSetMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.spplus.buff.LineSetMsg.Request request = 1;
  if (has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->request(), target);
  }

  // optional .com.spplus.buff.LineSetMsg.Response response = 2;
  if (has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->response(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LineSetMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.spplus.buff.LineSetMsg.Request request = 1;
    if (has_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->request());
    }

    // optional .com.spplus.buff.LineSetMsg.Response response = 2;
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->response());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LineSetMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LineSetMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LineSetMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LineSetMsg::MergeFrom(const LineSetMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request()) {
      mutable_request()->::com::spplus::buff::LineSetMsg_Request::MergeFrom(from.request());
    }
    if (from.has_response()) {
      mutable_response()->::com::spplus::buff::LineSetMsg_Response::MergeFrom(from.response());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LineSetMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LineSetMsg::CopyFrom(const LineSetMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LineSetMsg::IsInitialized() const {

  return true;
}

void LineSetMsg::Swap(LineSetMsg* other) {
  if (other != this) {
    std::swap(request_, other->request_);
    std::swap(response_, other->response_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LineSetMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LineSetMsg_descriptor_;
  metadata.reflection = LineSetMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SavingListMsg_Request::kIdFieldNumber;
#endif  // !_MSC_VER

SavingListMsg_Request::SavingListMsg_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SavingListMsg_Request::InitAsDefaultInstance() {
}

SavingListMsg_Request::SavingListMsg_Request(const SavingListMsg_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SavingListMsg_Request::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SavingListMsg_Request::~SavingListMsg_Request() {
  SharedDtor();
}

void SavingListMsg_Request::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void SavingListMsg_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SavingListMsg_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SavingListMsg_Request_descriptor_;
}

const SavingListMsg_Request& SavingListMsg_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

SavingListMsg_Request* SavingListMsg_Request::default_instance_ = NULL;

SavingListMsg_Request* SavingListMsg_Request::New() const {
  return new SavingListMsg_Request;
}

void SavingListMsg_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SavingListMsg_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SavingListMsg_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SavingListMsg_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes id = 1;
  if (has_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SavingListMsg_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SavingListMsg_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SavingListMsg_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SavingListMsg_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SavingListMsg_Request::MergeFrom(const SavingListMsg_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SavingListMsg_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SavingListMsg_Request::CopyFrom(const SavingListMsg_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SavingListMsg_Request::IsInitialized() const {

  return true;
}

void SavingListMsg_Request::Swap(SavingListMsg_Request* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SavingListMsg_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SavingListMsg_Request_descriptor_;
  metadata.reflection = SavingListMsg_Request_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SavingListMsg_Response::kSaveListFieldNumber;
const int SavingListMsg_Response::kRescodeFieldNumber;
#endif  // !_MSC_VER

SavingListMsg_Response::SavingListMsg_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SavingListMsg_Response::InitAsDefaultInstance() {
}

SavingListMsg_Response::SavingListMsg_Response(const SavingListMsg_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SavingListMsg_Response::SharedCtor() {
  _cached_size_ = 0;
  rescode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SavingListMsg_Response::~SavingListMsg_Response() {
  SharedDtor();
}

void SavingListMsg_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SavingListMsg_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SavingListMsg_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SavingListMsg_Response_descriptor_;
}

const SavingListMsg_Response& SavingListMsg_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

SavingListMsg_Response* SavingListMsg_Response::default_instance_ = NULL;

SavingListMsg_Response* SavingListMsg_Response::New() const {
  return new SavingListMsg_Response;
}

void SavingListMsg_Response::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    rescode_ = 0u;
  }
  savelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SavingListMsg_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.spplus.buff.SavingBean saveList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_saveList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_savelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_saveList;
        if (input->ExpectTag(16)) goto parse_rescode;
        break;
      }

      // optional uint32 rescode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rescode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rescode_)));
          set_has_rescode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SavingListMsg_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.spplus.buff.SavingBean saveList = 1;
  for (int i = 0; i < this->savelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->savelist(i), output);
  }

  // optional uint32 rescode = 2;
  if (has_rescode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rescode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SavingListMsg_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .com.spplus.buff.SavingBean saveList = 1;
  for (int i = 0; i < this->savelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->savelist(i), target);
  }

  // optional uint32 rescode = 2;
  if (has_rescode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rescode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SavingListMsg_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 rescode = 2;
    if (has_rescode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rescode());
    }

  }
  // repeated .com.spplus.buff.SavingBean saveList = 1;
  total_size += 1 * this->savelist_size();
  for (int i = 0; i < this->savelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->savelist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SavingListMsg_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SavingListMsg_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SavingListMsg_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SavingListMsg_Response::MergeFrom(const SavingListMsg_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  savelist_.MergeFrom(from.savelist_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_rescode()) {
      set_rescode(from.rescode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SavingListMsg_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SavingListMsg_Response::CopyFrom(const SavingListMsg_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SavingListMsg_Response::IsInitialized() const {

  return true;
}

void SavingListMsg_Response::Swap(SavingListMsg_Response* other) {
  if (other != this) {
    savelist_.Swap(&other->savelist_);
    std::swap(rescode_, other->rescode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SavingListMsg_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SavingListMsg_Response_descriptor_;
  metadata.reflection = SavingListMsg_Response_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SavingListMsg::kRequestFieldNumber;
const int SavingListMsg::kResponseFieldNumber;
#endif  // !_MSC_VER

SavingListMsg::SavingListMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SavingListMsg::InitAsDefaultInstance() {
  request_ = const_cast< ::com::spplus::buff::SavingListMsg_Request*>(&::com::spplus::buff::SavingListMsg_Request::default_instance());
  response_ = const_cast< ::com::spplus::buff::SavingListMsg_Response*>(&::com::spplus::buff::SavingListMsg_Response::default_instance());
}

SavingListMsg::SavingListMsg(const SavingListMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SavingListMsg::SharedCtor() {
  _cached_size_ = 0;
  request_ = NULL;
  response_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SavingListMsg::~SavingListMsg() {
  SharedDtor();
}

void SavingListMsg::SharedDtor() {
  if (this != default_instance_) {
    delete request_;
    delete response_;
  }
}

void SavingListMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SavingListMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SavingListMsg_descriptor_;
}

const SavingListMsg& SavingListMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

SavingListMsg* SavingListMsg::default_instance_ = NULL;

SavingListMsg* SavingListMsg::New() const {
  return new SavingListMsg;
}

void SavingListMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_request()) {
      if (request_ != NULL) request_->::com::spplus::buff::SavingListMsg_Request::Clear();
    }
    if (has_response()) {
      if (response_ != NULL) response_->::com::spplus::buff::SavingListMsg_Response::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SavingListMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.spplus.buff.SavingListMsg.Request request = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_response;
        break;
      }

      // optional .com.spplus.buff.SavingListMsg.Response response = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SavingListMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.spplus.buff.SavingListMsg.Request request = 1;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->request(), output);
  }

  // optional .com.spplus.buff.SavingListMsg.Response response = 2;
  if (has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->response(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SavingListMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.spplus.buff.SavingListMsg.Request request = 1;
  if (has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->request(), target);
  }

  // optional .com.spplus.buff.SavingListMsg.Response response = 2;
  if (has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->response(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SavingListMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.spplus.buff.SavingListMsg.Request request = 1;
    if (has_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->request());
    }

    // optional .com.spplus.buff.SavingListMsg.Response response = 2;
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->response());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SavingListMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SavingListMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SavingListMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SavingListMsg::MergeFrom(const SavingListMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request()) {
      mutable_request()->::com::spplus::buff::SavingListMsg_Request::MergeFrom(from.request());
    }
    if (from.has_response()) {
      mutable_response()->::com::spplus::buff::SavingListMsg_Response::MergeFrom(from.response());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SavingListMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SavingListMsg::CopyFrom(const SavingListMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SavingListMsg::IsInitialized() const {

  return true;
}

void SavingListMsg::Swap(SavingListMsg* other) {
  if (other != this) {
    std::swap(request_, other->request_);
    std::swap(response_, other->response_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SavingListMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SavingListMsg_descriptor_;
  metadata.reflection = SavingListMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WriteSavingMsg_Request::kSaveNameFieldNumber;
const int WriteSavingMsg_Request::kSaveIdFieldNumber;
const int WriteSavingMsg_Request::kStateListFieldNumber;
#endif  // !_MSC_VER

WriteSavingMsg_Request::WriteSavingMsg_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WriteSavingMsg_Request::InitAsDefaultInstance() {
}

WriteSavingMsg_Request::WriteSavingMsg_Request(const WriteSavingMsg_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WriteSavingMsg_Request::SharedCtor() {
  _cached_size_ = 0;
  savename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  saveid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WriteSavingMsg_Request::~WriteSavingMsg_Request() {
  SharedDtor();
}

void WriteSavingMsg_Request::SharedDtor() {
  if (savename_ != &::google::protobuf::internal::kEmptyString) {
    delete savename_;
  }
  if (this != default_instance_) {
  }
}

void WriteSavingMsg_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WriteSavingMsg_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WriteSavingMsg_Request_descriptor_;
}

const WriteSavingMsg_Request& WriteSavingMsg_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

WriteSavingMsg_Request* WriteSavingMsg_Request::default_instance_ = NULL;

WriteSavingMsg_Request* WriteSavingMsg_Request::New() const {
  return new WriteSavingMsg_Request;
}

void WriteSavingMsg_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_savename()) {
      if (savename_ != &::google::protobuf::internal::kEmptyString) {
        savename_->clear();
      }
    }
    saveid_ = 0u;
  }
  statelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WriteSavingMsg_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes saveName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_savename()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_saveId;
        break;
      }

      // optional uint32 saveId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_saveId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &saveid_)));
          set_has_saveid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stateList;
        break;
      }

      // repeated .com.spplus.buff.StateBean stateList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stateList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_statelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stateList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WriteSavingMsg_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes saveName = 1;
  if (has_savename()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->savename(), output);
  }

  // optional uint32 saveId = 2;
  if (has_saveid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->saveid(), output);
  }

  // repeated .com.spplus.buff.StateBean stateList = 3;
  for (int i = 0; i < this->statelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->statelist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WriteSavingMsg_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes saveName = 1;
  if (has_savename()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->savename(), target);
  }

  // optional uint32 saveId = 2;
  if (has_saveid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->saveid(), target);
  }

  // repeated .com.spplus.buff.StateBean stateList = 3;
  for (int i = 0; i < this->statelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->statelist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WriteSavingMsg_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes saveName = 1;
    if (has_savename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->savename());
    }

    // optional uint32 saveId = 2;
    if (has_saveid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->saveid());
    }

  }
  // repeated .com.spplus.buff.StateBean stateList = 3;
  total_size += 1 * this->statelist_size();
  for (int i = 0; i < this->statelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->statelist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WriteSavingMsg_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WriteSavingMsg_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WriteSavingMsg_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WriteSavingMsg_Request::MergeFrom(const WriteSavingMsg_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  statelist_.MergeFrom(from.statelist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_savename()) {
      set_savename(from.savename());
    }
    if (from.has_saveid()) {
      set_saveid(from.saveid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WriteSavingMsg_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteSavingMsg_Request::CopyFrom(const WriteSavingMsg_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteSavingMsg_Request::IsInitialized() const {

  return true;
}

void WriteSavingMsg_Request::Swap(WriteSavingMsg_Request* other) {
  if (other != this) {
    std::swap(savename_, other->savename_);
    std::swap(saveid_, other->saveid_);
    statelist_.Swap(&other->statelist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WriteSavingMsg_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WriteSavingMsg_Request_descriptor_;
  metadata.reflection = WriteSavingMsg_Request_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int WriteSavingMsg_Response::kRescodeFieldNumber;
#endif  // !_MSC_VER

WriteSavingMsg_Response::WriteSavingMsg_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WriteSavingMsg_Response::InitAsDefaultInstance() {
}

WriteSavingMsg_Response::WriteSavingMsg_Response(const WriteSavingMsg_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WriteSavingMsg_Response::SharedCtor() {
  _cached_size_ = 0;
  rescode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WriteSavingMsg_Response::~WriteSavingMsg_Response() {
  SharedDtor();
}

void WriteSavingMsg_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WriteSavingMsg_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WriteSavingMsg_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WriteSavingMsg_Response_descriptor_;
}

const WriteSavingMsg_Response& WriteSavingMsg_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

WriteSavingMsg_Response* WriteSavingMsg_Response::default_instance_ = NULL;

WriteSavingMsg_Response* WriteSavingMsg_Response::New() const {
  return new WriteSavingMsg_Response;
}

void WriteSavingMsg_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rescode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WriteSavingMsg_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 rescode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rescode_)));
          set_has_rescode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WriteSavingMsg_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 rescode = 1;
  if (has_rescode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rescode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WriteSavingMsg_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 rescode = 1;
  if (has_rescode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rescode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WriteSavingMsg_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 rescode = 1;
    if (has_rescode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rescode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WriteSavingMsg_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WriteSavingMsg_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WriteSavingMsg_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WriteSavingMsg_Response::MergeFrom(const WriteSavingMsg_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rescode()) {
      set_rescode(from.rescode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WriteSavingMsg_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteSavingMsg_Response::CopyFrom(const WriteSavingMsg_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteSavingMsg_Response::IsInitialized() const {

  return true;
}

void WriteSavingMsg_Response::Swap(WriteSavingMsg_Response* other) {
  if (other != this) {
    std::swap(rescode_, other->rescode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WriteSavingMsg_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WriteSavingMsg_Response_descriptor_;
  metadata.reflection = WriteSavingMsg_Response_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int WriteSavingMsg::kRequestFieldNumber;
const int WriteSavingMsg::kResponseFieldNumber;
#endif  // !_MSC_VER

WriteSavingMsg::WriteSavingMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WriteSavingMsg::InitAsDefaultInstance() {
  request_ = const_cast< ::com::spplus::buff::WriteSavingMsg_Request*>(&::com::spplus::buff::WriteSavingMsg_Request::default_instance());
  response_ = const_cast< ::com::spplus::buff::WriteSavingMsg_Response*>(&::com::spplus::buff::WriteSavingMsg_Response::default_instance());
}

WriteSavingMsg::WriteSavingMsg(const WriteSavingMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WriteSavingMsg::SharedCtor() {
  _cached_size_ = 0;
  request_ = NULL;
  response_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WriteSavingMsg::~WriteSavingMsg() {
  SharedDtor();
}

void WriteSavingMsg::SharedDtor() {
  if (this != default_instance_) {
    delete request_;
    delete response_;
  }
}

void WriteSavingMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WriteSavingMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WriteSavingMsg_descriptor_;
}

const WriteSavingMsg& WriteSavingMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

WriteSavingMsg* WriteSavingMsg::default_instance_ = NULL;

WriteSavingMsg* WriteSavingMsg::New() const {
  return new WriteSavingMsg;
}

void WriteSavingMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_request()) {
      if (request_ != NULL) request_->::com::spplus::buff::WriteSavingMsg_Request::Clear();
    }
    if (has_response()) {
      if (response_ != NULL) response_->::com::spplus::buff::WriteSavingMsg_Response::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WriteSavingMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.spplus.buff.WriteSavingMsg.Request request = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_response;
        break;
      }

      // optional .com.spplus.buff.WriteSavingMsg.Response response = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WriteSavingMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.spplus.buff.WriteSavingMsg.Request request = 1;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->request(), output);
  }

  // optional .com.spplus.buff.WriteSavingMsg.Response response = 2;
  if (has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->response(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WriteSavingMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.spplus.buff.WriteSavingMsg.Request request = 1;
  if (has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->request(), target);
  }

  // optional .com.spplus.buff.WriteSavingMsg.Response response = 2;
  if (has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->response(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WriteSavingMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.spplus.buff.WriteSavingMsg.Request request = 1;
    if (has_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->request());
    }

    // optional .com.spplus.buff.WriteSavingMsg.Response response = 2;
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->response());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WriteSavingMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WriteSavingMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WriteSavingMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WriteSavingMsg::MergeFrom(const WriteSavingMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request()) {
      mutable_request()->::com::spplus::buff::WriteSavingMsg_Request::MergeFrom(from.request());
    }
    if (from.has_response()) {
      mutable_response()->::com::spplus::buff::WriteSavingMsg_Response::MergeFrom(from.response());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WriteSavingMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteSavingMsg::CopyFrom(const WriteSavingMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteSavingMsg::IsInitialized() const {

  return true;
}

void WriteSavingMsg::Swap(WriteSavingMsg* other) {
  if (other != this) {
    std::swap(request_, other->request_);
    std::swap(response_, other->response_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WriteSavingMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WriteSavingMsg_descriptor_;
  metadata.reflection = WriteSavingMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TicketMsionListMsg_Request::kUseridFieldNumber;
#endif  // !_MSC_VER

TicketMsionListMsg_Request::TicketMsionListMsg_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TicketMsionListMsg_Request::InitAsDefaultInstance() {
}

TicketMsionListMsg_Request::TicketMsionListMsg_Request(const TicketMsionListMsg_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TicketMsionListMsg_Request::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TicketMsionListMsg_Request::~TicketMsionListMsg_Request() {
  SharedDtor();
}

void TicketMsionListMsg_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TicketMsionListMsg_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TicketMsionListMsg_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TicketMsionListMsg_Request_descriptor_;
}

const TicketMsionListMsg_Request& TicketMsionListMsg_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

TicketMsionListMsg_Request* TicketMsionListMsg_Request::default_instance_ = NULL;

TicketMsionListMsg_Request* TicketMsionListMsg_Request::New() const {
  return new TicketMsionListMsg_Request;
}

void TicketMsionListMsg_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TicketMsionListMsg_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TicketMsionListMsg_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TicketMsionListMsg_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TicketMsionListMsg_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TicketMsionListMsg_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TicketMsionListMsg_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TicketMsionListMsg_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TicketMsionListMsg_Request::MergeFrom(const TicketMsionListMsg_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TicketMsionListMsg_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TicketMsionListMsg_Request::CopyFrom(const TicketMsionListMsg_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TicketMsionListMsg_Request::IsInitialized() const {

  return true;
}

void TicketMsionListMsg_Request::Swap(TicketMsionListMsg_Request* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TicketMsionListMsg_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TicketMsionListMsg_Request_descriptor_;
  metadata.reflection = TicketMsionListMsg_Request_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int TicketMsionListMsg_Response::kRescodeFieldNumber;
const int TicketMsionListMsg_Response::kTktMsionlistFieldNumber;
#endif  // !_MSC_VER

TicketMsionListMsg_Response::TicketMsionListMsg_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TicketMsionListMsg_Response::InitAsDefaultInstance() {
}

TicketMsionListMsg_Response::TicketMsionListMsg_Response(const TicketMsionListMsg_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TicketMsionListMsg_Response::SharedCtor() {
  _cached_size_ = 0;
  rescode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TicketMsionListMsg_Response::~TicketMsionListMsg_Response() {
  SharedDtor();
}

void TicketMsionListMsg_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TicketMsionListMsg_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TicketMsionListMsg_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TicketMsionListMsg_Response_descriptor_;
}

const TicketMsionListMsg_Response& TicketMsionListMsg_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

TicketMsionListMsg_Response* TicketMsionListMsg_Response::default_instance_ = NULL;

TicketMsionListMsg_Response* TicketMsionListMsg_Response::New() const {
  return new TicketMsionListMsg_Response;
}

void TicketMsionListMsg_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rescode_ = 0u;
  }
  tktmsionlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TicketMsionListMsg_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 rescode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rescode_)));
          set_has_rescode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tktMsionlist;
        break;
      }

      // repeated .com.spplus.buff.TicketMsionBean tktMsionlist = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tktMsionlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tktmsionlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tktMsionlist;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TicketMsionListMsg_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 rescode = 1;
  if (has_rescode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rescode(), output);
  }

  // repeated .com.spplus.buff.TicketMsionBean tktMsionlist = 2;
  for (int i = 0; i < this->tktmsionlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tktmsionlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TicketMsionListMsg_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 rescode = 1;
  if (has_rescode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rescode(), target);
  }

  // repeated .com.spplus.buff.TicketMsionBean tktMsionlist = 2;
  for (int i = 0; i < this->tktmsionlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->tktmsionlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TicketMsionListMsg_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 rescode = 1;
    if (has_rescode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rescode());
    }

  }
  // repeated .com.spplus.buff.TicketMsionBean tktMsionlist = 2;
  total_size += 1 * this->tktmsionlist_size();
  for (int i = 0; i < this->tktmsionlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tktmsionlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TicketMsionListMsg_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TicketMsionListMsg_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TicketMsionListMsg_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TicketMsionListMsg_Response::MergeFrom(const TicketMsionListMsg_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  tktmsionlist_.MergeFrom(from.tktmsionlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rescode()) {
      set_rescode(from.rescode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TicketMsionListMsg_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TicketMsionListMsg_Response::CopyFrom(const TicketMsionListMsg_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TicketMsionListMsg_Response::IsInitialized() const {

  return true;
}

void TicketMsionListMsg_Response::Swap(TicketMsionListMsg_Response* other) {
  if (other != this) {
    std::swap(rescode_, other->rescode_);
    tktmsionlist_.Swap(&other->tktmsionlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TicketMsionListMsg_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TicketMsionListMsg_Response_descriptor_;
  metadata.reflection = TicketMsionListMsg_Response_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int TicketMsionListMsg::kRequestFieldNumber;
const int TicketMsionListMsg::kResponseFieldNumber;
#endif  // !_MSC_VER

TicketMsionListMsg::TicketMsionListMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TicketMsionListMsg::InitAsDefaultInstance() {
  request_ = const_cast< ::com::spplus::buff::TicketMsionListMsg_Request*>(&::com::spplus::buff::TicketMsionListMsg_Request::default_instance());
  response_ = const_cast< ::com::spplus::buff::TicketMsionListMsg_Response*>(&::com::spplus::buff::TicketMsionListMsg_Response::default_instance());
}

TicketMsionListMsg::TicketMsionListMsg(const TicketMsionListMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TicketMsionListMsg::SharedCtor() {
  _cached_size_ = 0;
  request_ = NULL;
  response_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TicketMsionListMsg::~TicketMsionListMsg() {
  SharedDtor();
}

void TicketMsionListMsg::SharedDtor() {
  if (this != default_instance_) {
    delete request_;
    delete response_;
  }
}

void TicketMsionListMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TicketMsionListMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TicketMsionListMsg_descriptor_;
}

const TicketMsionListMsg& TicketMsionListMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

TicketMsionListMsg* TicketMsionListMsg::default_instance_ = NULL;

TicketMsionListMsg* TicketMsionListMsg::New() const {
  return new TicketMsionListMsg;
}

void TicketMsionListMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_request()) {
      if (request_ != NULL) request_->::com::spplus::buff::TicketMsionListMsg_Request::Clear();
    }
    if (has_response()) {
      if (response_ != NULL) response_->::com::spplus::buff::TicketMsionListMsg_Response::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TicketMsionListMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.spplus.buff.TicketMsionListMsg.Request request = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_response;
        break;
      }

      // optional .com.spplus.buff.TicketMsionListMsg.Response response = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TicketMsionListMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.spplus.buff.TicketMsionListMsg.Request request = 1;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->request(), output);
  }

  // optional .com.spplus.buff.TicketMsionListMsg.Response response = 2;
  if (has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->response(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TicketMsionListMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.spplus.buff.TicketMsionListMsg.Request request = 1;
  if (has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->request(), target);
  }

  // optional .com.spplus.buff.TicketMsionListMsg.Response response = 2;
  if (has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->response(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TicketMsionListMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.spplus.buff.TicketMsionListMsg.Request request = 1;
    if (has_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->request());
    }

    // optional .com.spplus.buff.TicketMsionListMsg.Response response = 2;
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->response());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TicketMsionListMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TicketMsionListMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TicketMsionListMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TicketMsionListMsg::MergeFrom(const TicketMsionListMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request()) {
      mutable_request()->::com::spplus::buff::TicketMsionListMsg_Request::MergeFrom(from.request());
    }
    if (from.has_response()) {
      mutable_response()->::com::spplus::buff::TicketMsionListMsg_Response::MergeFrom(from.response());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TicketMsionListMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TicketMsionListMsg::CopyFrom(const TicketMsionListMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TicketMsionListMsg::IsInitialized() const {

  return true;
}

void TicketMsionListMsg::Swap(TicketMsionListMsg* other) {
  if (other != this) {
    std::swap(request_, other->request_);
    std::swap(response_, other->response_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TicketMsionListMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TicketMsionListMsg_descriptor_;
  metadata.reflection = TicketMsionListMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TicketMgrMsg_Request::kMgrsqlFieldNumber;
#endif  // !_MSC_VER

TicketMgrMsg_Request::TicketMgrMsg_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TicketMgrMsg_Request::InitAsDefaultInstance() {
}

TicketMgrMsg_Request::TicketMgrMsg_Request(const TicketMgrMsg_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TicketMgrMsg_Request::SharedCtor() {
  _cached_size_ = 0;
  mgrsql_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TicketMgrMsg_Request::~TicketMgrMsg_Request() {
  SharedDtor();
}

void TicketMgrMsg_Request::SharedDtor() {
  if (mgrsql_ != &::google::protobuf::internal::kEmptyString) {
    delete mgrsql_;
  }
  if (this != default_instance_) {
  }
}

void TicketMgrMsg_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TicketMgrMsg_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TicketMgrMsg_Request_descriptor_;
}

const TicketMgrMsg_Request& TicketMgrMsg_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

TicketMgrMsg_Request* TicketMgrMsg_Request::default_instance_ = NULL;

TicketMgrMsg_Request* TicketMgrMsg_Request::New() const {
  return new TicketMgrMsg_Request;
}

void TicketMgrMsg_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_mgrsql()) {
      if (mgrsql_ != &::google::protobuf::internal::kEmptyString) {
        mgrsql_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TicketMgrMsg_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes mgrsql = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mgrsql()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TicketMgrMsg_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes mgrsql = 1;
  if (has_mgrsql()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->mgrsql(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TicketMgrMsg_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes mgrsql = 1;
  if (has_mgrsql()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->mgrsql(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TicketMgrMsg_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes mgrsql = 1;
    if (has_mgrsql()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mgrsql());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TicketMgrMsg_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TicketMgrMsg_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TicketMgrMsg_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TicketMgrMsg_Request::MergeFrom(const TicketMgrMsg_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mgrsql()) {
      set_mgrsql(from.mgrsql());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TicketMgrMsg_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TicketMgrMsg_Request::CopyFrom(const TicketMgrMsg_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TicketMgrMsg_Request::IsInitialized() const {

  return true;
}

void TicketMgrMsg_Request::Swap(TicketMgrMsg_Request* other) {
  if (other != this) {
    std::swap(mgrsql_, other->mgrsql_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TicketMgrMsg_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TicketMgrMsg_Request_descriptor_;
  metadata.reflection = TicketMgrMsg_Request_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int TicketMgrMsg_Response::kRescodeFieldNumber;
#endif  // !_MSC_VER

TicketMgrMsg_Response::TicketMgrMsg_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TicketMgrMsg_Response::InitAsDefaultInstance() {
}

TicketMgrMsg_Response::TicketMgrMsg_Response(const TicketMgrMsg_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TicketMgrMsg_Response::SharedCtor() {
  _cached_size_ = 0;
  rescode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TicketMgrMsg_Response::~TicketMgrMsg_Response() {
  SharedDtor();
}

void TicketMgrMsg_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TicketMgrMsg_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TicketMgrMsg_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TicketMgrMsg_Response_descriptor_;
}

const TicketMgrMsg_Response& TicketMgrMsg_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

TicketMgrMsg_Response* TicketMgrMsg_Response::default_instance_ = NULL;

TicketMgrMsg_Response* TicketMgrMsg_Response::New() const {
  return new TicketMgrMsg_Response;
}

void TicketMgrMsg_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rescode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TicketMgrMsg_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 rescode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rescode_)));
          set_has_rescode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TicketMgrMsg_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 rescode = 1;
  if (has_rescode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rescode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TicketMgrMsg_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 rescode = 1;
  if (has_rescode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rescode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TicketMgrMsg_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 rescode = 1;
    if (has_rescode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rescode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TicketMgrMsg_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TicketMgrMsg_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TicketMgrMsg_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TicketMgrMsg_Response::MergeFrom(const TicketMgrMsg_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rescode()) {
      set_rescode(from.rescode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TicketMgrMsg_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TicketMgrMsg_Response::CopyFrom(const TicketMgrMsg_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TicketMgrMsg_Response::IsInitialized() const {

  return true;
}

void TicketMgrMsg_Response::Swap(TicketMgrMsg_Response* other) {
  if (other != this) {
    std::swap(rescode_, other->rescode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TicketMgrMsg_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TicketMgrMsg_Response_descriptor_;
  metadata.reflection = TicketMgrMsg_Response_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int TicketMgrMsg::kRequestFieldNumber;
const int TicketMgrMsg::kResponseFieldNumber;
#endif  // !_MSC_VER

TicketMgrMsg::TicketMgrMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TicketMgrMsg::InitAsDefaultInstance() {
  request_ = const_cast< ::com::spplus::buff::TicketMgrMsg_Request*>(&::com::spplus::buff::TicketMgrMsg_Request::default_instance());
  response_ = const_cast< ::com::spplus::buff::TicketMgrMsg_Response*>(&::com::spplus::buff::TicketMgrMsg_Response::default_instance());
}

TicketMgrMsg::TicketMgrMsg(const TicketMgrMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TicketMgrMsg::SharedCtor() {
  _cached_size_ = 0;
  request_ = NULL;
  response_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TicketMgrMsg::~TicketMgrMsg() {
  SharedDtor();
}

void TicketMgrMsg::SharedDtor() {
  if (this != default_instance_) {
    delete request_;
    delete response_;
  }
}

void TicketMgrMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TicketMgrMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TicketMgrMsg_descriptor_;
}

const TicketMgrMsg& TicketMgrMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

TicketMgrMsg* TicketMgrMsg::default_instance_ = NULL;

TicketMgrMsg* TicketMgrMsg::New() const {
  return new TicketMgrMsg;
}

void TicketMgrMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_request()) {
      if (request_ != NULL) request_->::com::spplus::buff::TicketMgrMsg_Request::Clear();
    }
    if (has_response()) {
      if (response_ != NULL) response_->::com::spplus::buff::TicketMgrMsg_Response::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TicketMgrMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.spplus.buff.TicketMgrMsg.Request request = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_response;
        break;
      }

      // optional .com.spplus.buff.TicketMgrMsg.Response response = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TicketMgrMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.spplus.buff.TicketMgrMsg.Request request = 1;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->request(), output);
  }

  // optional .com.spplus.buff.TicketMgrMsg.Response response = 2;
  if (has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->response(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TicketMgrMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.spplus.buff.TicketMgrMsg.Request request = 1;
  if (has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->request(), target);
  }

  // optional .com.spplus.buff.TicketMgrMsg.Response response = 2;
  if (has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->response(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TicketMgrMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.spplus.buff.TicketMgrMsg.Request request = 1;
    if (has_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->request());
    }

    // optional .com.spplus.buff.TicketMgrMsg.Response response = 2;
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->response());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TicketMgrMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TicketMgrMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TicketMgrMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TicketMgrMsg::MergeFrom(const TicketMgrMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request()) {
      mutable_request()->::com::spplus::buff::TicketMgrMsg_Request::MergeFrom(from.request());
    }
    if (from.has_response()) {
      mutable_response()->::com::spplus::buff::TicketMgrMsg_Response::MergeFrom(from.response());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TicketMgrMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TicketMgrMsg::CopyFrom(const TicketMgrMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TicketMgrMsg::IsInitialized() const {

  return true;
}

void TicketMgrMsg::Swap(TicketMgrMsg* other) {
  if (other != this) {
    std::swap(request_, other->request_);
    std::swap(response_, other->response_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TicketMgrMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TicketMgrMsg_descriptor_;
  metadata.reflection = TicketMgrMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TicketListMsg_Request::kReqdateFieldNumber;
#endif  // !_MSC_VER

TicketListMsg_Request::TicketListMsg_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TicketListMsg_Request::InitAsDefaultInstance() {
}

TicketListMsg_Request::TicketListMsg_Request(const TicketListMsg_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TicketListMsg_Request::SharedCtor() {
  _cached_size_ = 0;
  reqdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TicketListMsg_Request::~TicketListMsg_Request() {
  SharedDtor();
}

void TicketListMsg_Request::SharedDtor() {
  if (reqdate_ != &::google::protobuf::internal::kEmptyString) {
    delete reqdate_;
  }
  if (this != default_instance_) {
  }
}

void TicketListMsg_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TicketListMsg_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TicketListMsg_Request_descriptor_;
}

const TicketListMsg_Request& TicketListMsg_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

TicketListMsg_Request* TicketListMsg_Request::default_instance_ = NULL;

TicketListMsg_Request* TicketListMsg_Request::New() const {
  return new TicketListMsg_Request;
}

void TicketListMsg_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_reqdate()) {
      if (reqdate_ != &::google::protobuf::internal::kEmptyString) {
        reqdate_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TicketListMsg_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes reqdate = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_reqdate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TicketListMsg_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes reqdate = 1;
  if (has_reqdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->reqdate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TicketListMsg_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes reqdate = 1;
  if (has_reqdate()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->reqdate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TicketListMsg_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes reqdate = 1;
    if (has_reqdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->reqdate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TicketListMsg_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TicketListMsg_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TicketListMsg_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TicketListMsg_Request::MergeFrom(const TicketListMsg_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reqdate()) {
      set_reqdate(from.reqdate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TicketListMsg_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TicketListMsg_Request::CopyFrom(const TicketListMsg_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TicketListMsg_Request::IsInitialized() const {

  return true;
}

void TicketListMsg_Request::Swap(TicketListMsg_Request* other) {
  if (other != this) {
    std::swap(reqdate_, other->reqdate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TicketListMsg_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TicketListMsg_Request_descriptor_;
  metadata.reflection = TicketListMsg_Request_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int TicketListMsg_Response::kRescodeFieldNumber;
const int TicketListMsg_Response::kTicketlistFieldNumber;
#endif  // !_MSC_VER

TicketListMsg_Response::TicketListMsg_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TicketListMsg_Response::InitAsDefaultInstance() {
}

TicketListMsg_Response::TicketListMsg_Response(const TicketListMsg_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TicketListMsg_Response::SharedCtor() {
  _cached_size_ = 0;
  rescode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TicketListMsg_Response::~TicketListMsg_Response() {
  SharedDtor();
}

void TicketListMsg_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TicketListMsg_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TicketListMsg_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TicketListMsg_Response_descriptor_;
}

const TicketListMsg_Response& TicketListMsg_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

TicketListMsg_Response* TicketListMsg_Response::default_instance_ = NULL;

TicketListMsg_Response* TicketListMsg_Response::New() const {
  return new TicketListMsg_Response;
}

void TicketListMsg_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rescode_ = 0u;
  }
  ticketlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TicketListMsg_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 rescode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rescode_)));
          set_has_rescode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ticketlist;
        break;
      }

      // repeated .com.spplus.buff.TicketBean ticketlist = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ticketlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ticketlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ticketlist;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TicketListMsg_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 rescode = 1;
  if (has_rescode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rescode(), output);
  }

  // repeated .com.spplus.buff.TicketBean ticketlist = 2;
  for (int i = 0; i < this->ticketlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ticketlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TicketListMsg_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 rescode = 1;
  if (has_rescode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rescode(), target);
  }

  // repeated .com.spplus.buff.TicketBean ticketlist = 2;
  for (int i = 0; i < this->ticketlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ticketlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TicketListMsg_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 rescode = 1;
    if (has_rescode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rescode());
    }

  }
  // repeated .com.spplus.buff.TicketBean ticketlist = 2;
  total_size += 1 * this->ticketlist_size();
  for (int i = 0; i < this->ticketlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ticketlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TicketListMsg_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TicketListMsg_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TicketListMsg_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TicketListMsg_Response::MergeFrom(const TicketListMsg_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  ticketlist_.MergeFrom(from.ticketlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rescode()) {
      set_rescode(from.rescode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TicketListMsg_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TicketListMsg_Response::CopyFrom(const TicketListMsg_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TicketListMsg_Response::IsInitialized() const {

  return true;
}

void TicketListMsg_Response::Swap(TicketListMsg_Response* other) {
  if (other != this) {
    std::swap(rescode_, other->rescode_);
    ticketlist_.Swap(&other->ticketlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TicketListMsg_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TicketListMsg_Response_descriptor_;
  metadata.reflection = TicketListMsg_Response_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int TicketListMsg::kRequestFieldNumber;
const int TicketListMsg::kResponseFieldNumber;
#endif  // !_MSC_VER

TicketListMsg::TicketListMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TicketListMsg::InitAsDefaultInstance() {
  request_ = const_cast< ::com::spplus::buff::TicketListMsg_Request*>(&::com::spplus::buff::TicketListMsg_Request::default_instance());
  response_ = const_cast< ::com::spplus::buff::TicketListMsg_Response*>(&::com::spplus::buff::TicketListMsg_Response::default_instance());
}

TicketListMsg::TicketListMsg(const TicketListMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TicketListMsg::SharedCtor() {
  _cached_size_ = 0;
  request_ = NULL;
  response_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TicketListMsg::~TicketListMsg() {
  SharedDtor();
}

void TicketListMsg::SharedDtor() {
  if (this != default_instance_) {
    delete request_;
    delete response_;
  }
}

void TicketListMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TicketListMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TicketListMsg_descriptor_;
}

const TicketListMsg& TicketListMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

TicketListMsg* TicketListMsg::default_instance_ = NULL;

TicketListMsg* TicketListMsg::New() const {
  return new TicketListMsg;
}

void TicketListMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_request()) {
      if (request_ != NULL) request_->::com::spplus::buff::TicketListMsg_Request::Clear();
    }
    if (has_response()) {
      if (response_ != NULL) response_->::com::spplus::buff::TicketListMsg_Response::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TicketListMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.spplus.buff.TicketListMsg.Request request = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_response;
        break;
      }

      // optional .com.spplus.buff.TicketListMsg.Response response = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TicketListMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.spplus.buff.TicketListMsg.Request request = 1;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->request(), output);
  }

  // optional .com.spplus.buff.TicketListMsg.Response response = 2;
  if (has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->response(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TicketListMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.spplus.buff.TicketListMsg.Request request = 1;
  if (has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->request(), target);
  }

  // optional .com.spplus.buff.TicketListMsg.Response response = 2;
  if (has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->response(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TicketListMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.spplus.buff.TicketListMsg.Request request = 1;
    if (has_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->request());
    }

    // optional .com.spplus.buff.TicketListMsg.Response response = 2;
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->response());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TicketListMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TicketListMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TicketListMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TicketListMsg::MergeFrom(const TicketListMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request()) {
      mutable_request()->::com::spplus::buff::TicketListMsg_Request::MergeFrom(from.request());
    }
    if (from.has_response()) {
      mutable_response()->::com::spplus::buff::TicketListMsg_Response::MergeFrom(from.response());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TicketListMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TicketListMsg::CopyFrom(const TicketListMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TicketListMsg::IsInitialized() const {

  return true;
}

void TicketListMsg::Swap(TicketListMsg* other) {
  if (other != this) {
    std::swap(request_, other->request_);
    std::swap(response_, other->response_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TicketListMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TicketListMsg_descriptor_;
  metadata.reflection = TicketListMsg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace buff
}  // namespace spplus
}  // namespace com

// @@protoc_insertion_point(global_scope)
